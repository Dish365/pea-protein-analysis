"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@antv+g-math@3.0.0";
exports.ids = ["vendor-chunks/@antv+g-math@3.0.0"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@antv+g-math@3.0.0/node_modules/@antv/g-math/dist/index.esm.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/.pnpm/@antv+g-math@3.0.0/node_modules/@antv/g-math/dist/index.esm.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arcBox: () => (/* binding */ box$5),\n/* harmony export */   arcNearestPoint: () => (/* binding */ nearestPoint$3),\n/* harmony export */   arcTangentAngle: () => (/* binding */ tangentAngle$4),\n/* harmony export */   cubicBox: () => (/* binding */ box$3),\n/* harmony export */   cubicLength: () => (/* binding */ length$3),\n/* harmony export */   cubicNearestPoint: () => (/* binding */ nearestPoint$1),\n/* harmony export */   cubicPointAt: () => (/* binding */ pointAt$2),\n/* harmony export */   cubicPointDistance: () => (/* binding */ pointDistance$3),\n/* harmony export */   cubicTangentAngle: () => (/* binding */ tangentAngle$2),\n/* harmony export */   distance: () => (/* binding */ distance),\n/* harmony export */   lineBox: () => (/* binding */ box$4),\n/* harmony export */   lineLength: () => (/* binding */ length$4),\n/* harmony export */   linePointAt: () => (/* binding */ pointAt$3),\n/* harmony export */   linePointDistance: () => (/* binding */ pointDistance$4),\n/* harmony export */   linePointToLine: () => (/* binding */ pointToLine),\n/* harmony export */   lineTangentAngle: () => (/* binding */ tangentAngle$3),\n/* harmony export */   polygonBox: () => (/* binding */ box$1),\n/* harmony export */   polygonLength: () => (/* binding */ length$1),\n/* harmony export */   polygonPointAt: () => (/* binding */ pointAt),\n/* harmony export */   polygonPointDistance: () => (/* binding */ pointDistance$1),\n/* harmony export */   polygonTangentAngle: () => (/* binding */ tangentAngle),\n/* harmony export */   polylineBox: () => (/* binding */ box$2),\n/* harmony export */   polylineLength: () => (/* binding */ length$2),\n/* harmony export */   polylinePointAt: () => (/* binding */ pointAt$1),\n/* harmony export */   polylinePointDistance: () => (/* binding */ pointDistance$2),\n/* harmony export */   polylineTangentAngle: () => (/* binding */ tangentAngle$1),\n/* harmony export */   quadBox: () => (/* binding */ box),\n/* harmony export */   quadLength: () => (/* binding */ length),\n/* harmony export */   quadNearestPoint: () => (/* binding */ nearestPoint),\n/* harmony export */   quadPointDistance: () => (/* binding */ pointDistance)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/is-number-equal.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ \"(ssr)/../node_modules/.pnpm/gl-matrix@3.4.3/node_modules/gl-matrix/esm/vec2.js\");\n\n\n\nfunction distance(x1, y1, x2, y2) {\n    var dx = x1 - x2;\n    var dy = y1 - y2;\n    return Math.sqrt(dx * dx + dy * dy);\n}\nfunction getBBoxByArray(xArr, yArr) {\n    var minX = Math.min.apply(Math, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(xArr), false));\n    var minY = Math.min.apply(Math, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(yArr), false));\n    var maxX = Math.max.apply(Math, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(xArr), false));\n    var maxY = Math.max.apply(Math, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(yArr), false));\n    return {\n        x: minX,\n        y: minY,\n        width: maxX - minX,\n        height: maxY - minY\n    };\n}\nfunction piMod(angle) {\n    return (angle + Math.PI * 2) % (Math.PI * 2);\n}\nfunction copysign(v1, v2) {\n    var absv = Math.abs(v1);\n    return v2 > 0 ? absv : absv * -1;\n}\nfunction nearestPoint$4(x, y, rx, ry, x0, y0) {\n    var a = rx;\n    var b = ry;\n    // 假如椭圆半径为0则返回圆心\n    if (a === 0 || b === 0) {\n        return {\n            x: x,\n            y: y\n        };\n    }\n    // 转换成 0， 0 为中心的椭圆计算\n    var relativeX = x0 - x;\n    var relativeY = y0 - y;\n    var px = Math.abs(relativeX);\n    var py = Math.abs(relativeY);\n    var squareA = a * a;\n    var squareB = b * b;\n    // const angle0 = Math.atan2(relativeY, relativeX);\n    var t = Math.PI / 4;\n    var nearestX = 0; // 椭圆上的任一点\n    var nearestY = 0;\n    // 迭代 4 次\n    for(var i = 0; i < 4; i++){\n        nearestX = a * Math.cos(t);\n        nearestY = b * Math.sin(t);\n        var ex = (squareA - squareB) * Math.pow(Math.cos(t), 3) / a;\n        var ey = (squareB - squareA) * Math.pow(Math.sin(t), 3) / b;\n        var rx1 = nearestX - ex;\n        var ry1 = nearestY - ey;\n        var qx = px - ex;\n        var qy = py - ey;\n        var r = Math.hypot(ry1, rx1);\n        var q = Math.hypot(qy, qx);\n        var delta_c = r * Math.asin((rx1 * qy - ry1 * qx) / (r * q));\n        var delta_t = delta_c / Math.sqrt(squareA + squareB - nearestX * nearestX - nearestY * nearestY);\n        t += delta_t;\n        t = Math.min(Math.PI / 2, Math.max(0, t));\n    }\n    return {\n        x: x + copysign(nearestX, relativeX),\n        y: y + copysign(nearestY, relativeY)\n    };\n}\n// 偏导数 x\nfunction derivativeXAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle) {\n    return -1 * rx * Math.cos(xRotation) * Math.sin(angle) - ry * Math.sin(xRotation) * Math.cos(angle);\n}\n// 偏导数 y\nfunction derivativeYAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle) {\n    return -1 * rx * Math.sin(xRotation) * Math.sin(angle) + ry * Math.cos(xRotation) * Math.cos(angle);\n}\n// x 的极值\nfunction xExtrema(rx, ry, xRotation) {\n    return Math.atan(-ry / rx * Math.tan(xRotation));\n}\n// y 的极值\nfunction yExtrema(rx, ry, xRotation) {\n    return Math.atan(ry / (rx * Math.tan(xRotation)));\n}\n// 根据角度求 x 坐标\nfunction xAt(cx, cy, rx, ry, xRotation, angle) {\n    return rx * Math.cos(xRotation) * Math.cos(angle) - ry * Math.sin(xRotation) * Math.sin(angle) + cx;\n}\n// 根据角度求 y 坐标\nfunction yAt(cx, cy, rx, ry, xRotation, angle) {\n    return rx * Math.sin(xRotation) * Math.cos(angle) + ry * Math.cos(xRotation) * Math.sin(angle) + cy;\n}\n// 获取点在椭圆上的角度\nfunction getAngle(rx, ry, x0, y0) {\n    var angle = Math.atan2(y0 * rx, x0 * ry);\n    // 转换到 0 - 2PI 内\n    return (angle + Math.PI * 2) % (Math.PI * 2);\n}\n// 根据角度获取，x,y\nfunction getPoint(rx, ry, angle) {\n    return {\n        x: rx * Math.cos(angle),\n        y: ry * Math.sin(angle)\n    };\n}\n// 旋转\nfunction rotate(x, y, angle) {\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    return [\n        x * cos - y * sin,\n        x * sin + y * cos\n    ];\n}\nfunction box$5(cx, cy, rx, ry, xRotation, startAngle, endAngle) {\n    var xDim = xExtrema(rx, ry, xRotation);\n    var minX = Infinity;\n    var maxX = -Infinity;\n    var xs = [\n        startAngle,\n        endAngle\n    ];\n    for(var i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI){\n        var xAngle = xDim + i;\n        if (startAngle < endAngle) {\n            if (startAngle < xAngle && xAngle < endAngle) {\n                xs.push(xAngle);\n            }\n        } else {\n            if (endAngle < xAngle && xAngle < startAngle) {\n                xs.push(xAngle);\n            }\n        }\n    }\n    for(var i = 0; i < xs.length; i++){\n        var x = xAt(cx, cy, rx, ry, xRotation, xs[i]);\n        if (x < minX) {\n            minX = x;\n        }\n        if (x > maxX) {\n            maxX = x;\n        }\n    }\n    var yDim = yExtrema(rx, ry, xRotation);\n    var minY = Infinity;\n    var maxY = -Infinity;\n    var ys = [\n        startAngle,\n        endAngle\n    ];\n    for(var i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI){\n        var yAngle = yDim + i;\n        if (startAngle < endAngle) {\n            if (startAngle < yAngle && yAngle < endAngle) {\n                ys.push(yAngle);\n            }\n        } else {\n            if (endAngle < yAngle && yAngle < startAngle) {\n                ys.push(yAngle);\n            }\n        }\n    }\n    for(var i = 0; i < ys.length; i++){\n        var y = yAt(cx, cy, rx, ry, xRotation, ys[i]);\n        if (y < minY) {\n            minY = y;\n        }\n        if (y > maxY) {\n            maxY = y;\n        }\n    }\n    return {\n        x: minX,\n        y: minY,\n        width: maxX - minX,\n        height: maxY - minY\n    };\n}\nfunction nearestPoint$3(cx, cy, rx, ry, xRotation, startAngle, endAngle, x0, y0) {\n    // 将最近距离问题转换成到椭圆中心 0,0 没有旋转的椭圆问题\n    var relativeVector = rotate(x0 - cx, y0 - cy, -xRotation);\n    var _a = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(relativeVector, 2), x1 = _a[0], y1 = _a[1];\n    // 计算点到椭圆的最近的点\n    var relativePoint = nearestPoint$4(0, 0, rx, ry, x1, y1);\n    // 获取点在椭圆上的角度\n    var angle = getAngle(rx, ry, relativePoint.x, relativePoint.y);\n    // 点没有在圆弧上\n    if (angle < startAngle) {\n        // 小于起始圆弧\n        relativePoint = getPoint(rx, ry, startAngle);\n    } else if (angle > endAngle) {\n        // 大于结束圆弧\n        relativePoint = getPoint(rx, ry, endAngle);\n    }\n    // 旋转到 xRotation 的角度\n    var vector = rotate(relativePoint.x, relativePoint.y, xRotation);\n    return {\n        x: vector[0] + cx,\n        y: vector[1] + cy\n    };\n}\nfunction tangentAngle$4(cx, cy, rx, ry, xRotation, startAngle, endAngle, t) {\n    var angle = (endAngle - startAngle) * t + startAngle;\n    var dx = derivativeXAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle);\n    var dy = derivativeYAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle);\n    return piMod(Math.atan2(dy, dx));\n}\nvar EPSILON = 0.0001;\n/**\n * 使用牛顿切割法求最近的点\n * @param {number[]} xArr      点的 x 数组\n * @param {number[]} yArr      点的 y 数组\n * @param {number}   x         指定的点 x\n * @param {number}   y         指定的点 y\n * @param {Function} tCallback 差值函数\n */ function nearestPoint$2(xArr, yArr, x, y, tCallback, length) {\n    var t = -1;\n    var d = Infinity;\n    var v0 = [\n        x,\n        y\n    ];\n    var segNum = 20;\n    if (length && length > 200) {\n        segNum = length / 10;\n    }\n    var increaseRate = 1 / segNum;\n    var interval = increaseRate / 10;\n    for(var i = 0; i <= segNum; i++){\n        var _t = i * increaseRate;\n        var v1 = [\n            tCallback.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(xArr.concat([\n                _t\n            ])), false)),\n            tCallback.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(yArr.concat([\n                _t\n            ])), false))\n        ];\n        var d1 = distance(v0[0], v0[1], v1[0], v1[1]);\n        if (d1 < d) {\n            t = _t;\n            d = d1;\n        }\n    }\n    // 提前终止\n    if (t === 0) {\n        return {\n            x: xArr[0],\n            y: yArr[0]\n        };\n    }\n    if (t === 1) {\n        var count = xArr.length;\n        return {\n            x: xArr[count - 1],\n            y: yArr[count - 1]\n        };\n    }\n    d = Infinity;\n    for(var i = 0; i < 32; i++){\n        if (interval < EPSILON) {\n            break;\n        }\n        var prev = t - interval;\n        var next = t + interval;\n        var v1 = [\n            tCallback.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(xArr.concat([\n                prev\n            ])), false)),\n            tCallback.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(yArr.concat([\n                prev\n            ])), false))\n        ];\n        var d1 = distance(v0[0], v0[1], v1[0], v1[1]);\n        if (prev >= 0 && d1 < d) {\n            t = prev;\n            d = d1;\n        } else {\n            var v2 = [\n                tCallback.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(xArr.concat([\n                    next\n                ])), false)),\n                tCallback.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(yArr.concat([\n                    next\n                ])), false))\n            ];\n            var d2 = distance(v0[0], v0[1], v2[0], v2[1]);\n            if (next <= 1 && d2 < d) {\n                t = next;\n                d = d2;\n            } else {\n                interval *= 0.5;\n            }\n        }\n    }\n    return {\n        x: tCallback.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(xArr.concat([\n            t\n        ])), false)),\n        y: tCallback.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(yArr.concat([\n            t\n        ])), false))\n    };\n}\n// 近似求解 https://community.khronos.org/t/3d-cubic-bezier-segment-length/62363/2\nfunction snapLength(xArr, yArr) {\n    var totalLength = 0;\n    var count = xArr.length;\n    for(var i = 0; i < count; i++){\n        var x = xArr[i];\n        var y = yArr[i];\n        var nextX = xArr[(i + 1) % count];\n        var nextY = yArr[(i + 1) % count];\n        totalLength += distance(x, y, nextX, nextY);\n    }\n    return totalLength / 2;\n}\nfunction box$4(x1, y1, x2, y2) {\n    return getBBoxByArray([\n        x1,\n        x2\n    ], [\n        y1,\n        y2\n    ]);\n}\nfunction length$4(x1, y1, x2, y2) {\n    return distance(x1, y1, x2, y2);\n}\nfunction pointAt$3(x1, y1, x2, y2, t) {\n    return {\n        x: (1 - t) * x1 + t * x2,\n        y: (1 - t) * y1 + t * y2\n    };\n}\nfunction pointDistance$4(x1, y1, x2, y2, x, y) {\n    // 投影距离 x1, y1 的向量，假设 p, p1, p2 三个点，投影点为 a\n    // p1a = p1p.p1p2/|p1p2| * (p1p 的单位向量)\n    var cross = (x2 - x1) * (x - x1) + (y2 - y1) * (y - y1);\n    if (cross < 0) {\n        return distance(x1, y1, x, y);\n    }\n    var lengthSquare = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n    if (cross > lengthSquare) {\n        return distance(x2, y2, x, y);\n    }\n    return pointToLine(x1, y1, x2, y2, x, y);\n}\nfunction pointToLine(x1, y1, x2, y2, x, y) {\n    var d = [\n        x2 - x1,\n        y2 - y1\n    ];\n    // 如果端点相等，则判定点到点的距离\n    if (gl_matrix__WEBPACK_IMPORTED_MODULE_1__.exactEquals(d, [\n        0,\n        0\n    ])) {\n        return Math.sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1));\n    }\n    var u = [\n        -d[1],\n        d[0]\n    ];\n    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.normalize(u, u);\n    var a = [\n        x - x1,\n        y - y1\n    ];\n    return Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.dot(a, u));\n}\nfunction tangentAngle$3(x1, y1, x2, y2) {\n    return Math.atan2(y2 - y1, x2 - x1);\n}\nfunction cubicAt(p0, p1, p2, p3, t) {\n    var onet = 1 - t; // t * t * t 的性能大概是 Math.pow(t, 3) 的三倍\n    return onet * onet * onet * p0 + 3 * p1 * t * onet * onet + 3 * p2 * t * t * onet + p3 * t * t * t;\n}\nfunction derivativeAt(p0, p1, p2, p3, t) {\n    var onet = 1 - t;\n    return 3 * (onet * onet * (p1 - p0) + 2 * onet * t * (p2 - p1) + t * t * (p3 - p2));\n}\nfunction extrema$1(p0, p1, p2, p3) {\n    var a = -3 * p0 + 9 * p1 - 9 * p2 + 3 * p3;\n    var b = 6 * p0 - 12 * p1 + 6 * p2;\n    var c = 3 * p1 - 3 * p0;\n    var extremas = [];\n    var t1;\n    var t2;\n    var discSqrt;\n    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(a, 0)) {\n        if (!(0,_antv_util__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(b, 0)) {\n            t1 = -c / b;\n            if (t1 >= 0 && t1 <= 1) {\n                extremas.push(t1);\n            }\n        }\n    } else {\n        var disc = b * b - 4 * a * c;\n        if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(disc, 0)) {\n            extremas.push(-b / (2 * a));\n        } else if (disc > 0) {\n            discSqrt = Math.sqrt(disc);\n            t1 = (-b + discSqrt) / (2 * a);\n            t2 = (-b - discSqrt) / (2 * a);\n            if (t1 >= 0 && t1 <= 1) {\n                extremas.push(t1);\n            }\n            if (t2 >= 0 && t2 <= 1) {\n                extremas.push(t2);\n            }\n        }\n    }\n    return extremas;\n}\n// 分割贝塞尔曲线\nfunction divideCubic(x1, y1, x2, y2, x3, y3, x4, y4, t) {\n    // 划分点\n    var xt = cubicAt(x1, x2, x3, x4, t);\n    var yt = cubicAt(y1, y2, y3, y4, t);\n    // 计算两点之间的差值点\n    var c1 = pointAt$3(x1, y1, x2, y2, t);\n    var c2 = pointAt$3(x2, y2, x3, y3, t);\n    var c3 = pointAt$3(x3, y3, x4, y4, t);\n    var c12 = pointAt$3(c1.x, c1.y, c2.x, c2.y, t);\n    var c23 = pointAt$3(c2.x, c2.y, c3.x, c3.y, t);\n    return [\n        [\n            x1,\n            y1,\n            c1.x,\n            c1.y,\n            c12.x,\n            c12.y,\n            xt,\n            yt\n        ],\n        [\n            xt,\n            yt,\n            c23.x,\n            c23.y,\n            c3.x,\n            c3.y,\n            x4,\n            y4\n        ]\n    ];\n}\n// 使用迭代法取贝塞尔曲线的长度，二阶和三阶分开写，更清晰和便于调试\nfunction cubicLength(x1, y1, x2, y2, x3, y3, x4, y4, iterationCount) {\n    if (iterationCount === 0) {\n        return snapLength([\n            x1,\n            x2,\n            x3,\n            x4\n        ], [\n            y1,\n            y2,\n            y3,\n            y4\n        ]);\n    }\n    var cubics = divideCubic(x1, y1, x2, y2, x3, y3, x4, y4, 0.5);\n    var left = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(cubics[0]), false), [\n        iterationCount - 1\n    ], false);\n    var right = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(cubics[1]), false), [\n        iterationCount - 1\n    ], false);\n    return cubicLength.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(left), false)) + cubicLength.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(right), false));\n}\nfunction box$3(x1, y1, x2, y2, x3, y3, x4, y4) {\n    var xArr = [\n        x1,\n        x4\n    ];\n    var yArr = [\n        y1,\n        y4\n    ];\n    var xExtrema = extrema$1(x1, x2, x3, x4);\n    var yExtrema = extrema$1(y1, y2, y3, y4);\n    for(var i = 0; i < xExtrema.length; i++){\n        xArr.push(cubicAt(x1, x2, x3, x4, xExtrema[i]));\n    }\n    for(var i = 0; i < yExtrema.length; i++){\n        yArr.push(cubicAt(y1, y2, y3, y4, yExtrema[i]));\n    }\n    return getBBoxByArray(xArr, yArr);\n}\nfunction length$3(x1, y1, x2, y2, x3, y3, x4, y4) {\n    // 迭代三次，划分成 8 段求长度\n    return cubicLength(x1, y1, x2, y2, x3, y3, x4, y4, 3);\n}\nfunction nearestPoint$1(x1, y1, x2, y2, x3, y3, x4, y4, x0, y0, length) {\n    return nearestPoint$2([\n        x1,\n        x2,\n        x3,\n        x4\n    ], [\n        y1,\n        y2,\n        y3,\n        y4\n    ], x0, y0, cubicAt, length);\n}\nfunction pointDistance$3(x1, y1, x2, y2, x3, y3, x4, y4, x0, y0, length) {\n    var point = nearestPoint$1(x1, y1, x2, y2, x3, y3, x4, y4, x0, y0, length);\n    return distance(point.x, point.y, x0, y0);\n}\nfunction pointAt$2(x1, y1, x2, y2, x3, y3, x4, y4, t) {\n    return {\n        x: cubicAt(x1, x2, x3, x4, t),\n        y: cubicAt(y1, y2, y3, y4, t)\n    };\n}\nfunction tangentAngle$2(x1, y1, x2, y2, x3, y3, x4, y4, t) {\n    var dx = derivativeAt(x1, x2, x3, x4, t);\n    var dy = derivativeAt(y1, y2, y3, y4, t);\n    return piMod(Math.atan2(dy, dx));\n}\nfunction analyzePoints(points) {\n    // 计算每段的长度和总的长度\n    var totalLength = 0;\n    var segments = [];\n    for(var i = 0; i < points.length - 1; i++){\n        var from = points[i];\n        var to = points[i + 1];\n        var length_1 = distance(from[0], from[1], to[0], to[1]);\n        var seg = {\n            from: from,\n            to: to,\n            length: length_1\n        };\n        segments.push(seg);\n        totalLength += length_1;\n    }\n    return {\n        segments: segments,\n        totalLength: totalLength\n    };\n}\nfunction lengthOfSegment(points) {\n    if (points.length < 2) {\n        return 0;\n    }\n    var totalLength = 0;\n    for(var i = 0; i < points.length - 1; i++){\n        var from = points[i];\n        var to = points[i + 1];\n        totalLength += distance(from[0], from[1], to[0], to[1]);\n    }\n    return totalLength;\n}\n/**\n * 按照比例在数据片段中获取点\n * @param {array} points 点的集合\n * @param {number} t 百分比 0-1\n * @return {object} 点的坐标\n */ function pointAtSegments(points, t) {\n    // 边界判断\n    if (t > 1 || t < 0 || points.length < 2) {\n        return null;\n    }\n    var _a = analyzePoints(points), segments = _a.segments, totalLength = _a.totalLength;\n    // 多个点有可能重合\n    if (totalLength === 0) {\n        return {\n            x: points[0][0],\n            y: points[0][1]\n        };\n    }\n    // 计算比例\n    var startRatio = 0;\n    var point = null;\n    for(var i = 0; i < segments.length; i++){\n        var seg = segments[i];\n        var from = seg.from, to = seg.to;\n        var currentRatio = seg.length / totalLength;\n        if (t >= startRatio && t <= startRatio + currentRatio) {\n            var localRatio = (t - startRatio) / currentRatio;\n            point = pointAt$3(from[0], from[1], to[0], to[1], localRatio);\n            break;\n        }\n        startRatio += currentRatio;\n    }\n    return point;\n}\n/**\n * 按照比例在数据片段中获取切线的角度\n * @param {array} points 点的集合\n * @param {number} t 百分比 0-1\n */ function angleAtSegments(points, t) {\n    // 边界判断\n    if (t > 1 || t < 0 || points.length < 2) {\n        return 0;\n    }\n    var _a = analyzePoints(points), segments = _a.segments, totalLength = _a.totalLength;\n    // 计算比例\n    var startRatio = 0;\n    var angle = 0;\n    for(var i = 0; i < segments.length; i++){\n        var seg = segments[i];\n        var from = seg.from, to = seg.to;\n        var currentRatio = seg.length / totalLength;\n        if (t >= startRatio && t <= startRatio + currentRatio) {\n            angle = Math.atan2(to[1] - from[1], to[0] - from[0]);\n            break;\n        }\n        startRatio += currentRatio;\n    }\n    return angle;\n}\nfunction distanceAtSegment(points, x, y) {\n    var minDistance = Infinity;\n    for(var i = 0; i < points.length - 1; i++){\n        var point = points[i];\n        var nextPoint = points[i + 1];\n        var distance_1 = pointDistance$4(point[0], point[1], nextPoint[0], nextPoint[1], x, y);\n        if (distance_1 < minDistance) {\n            minDistance = distance_1;\n        }\n    }\n    return minDistance;\n}\nfunction box$2(points) {\n    var xArr = [];\n    var yArr = [];\n    for(var i = 0; i < points.length; i++){\n        var point = points[i];\n        xArr.push(point[0]);\n        yArr.push(point[1]);\n    }\n    return getBBoxByArray(xArr, yArr);\n}\nfunction length$2(points) {\n    return lengthOfSegment(points);\n}\nfunction pointAt$1(points, t) {\n    return pointAtSegments(points, t);\n}\nfunction pointDistance$2(points, x, y) {\n    return distanceAtSegment(points, x, y);\n}\nfunction tangentAngle$1(points, t) {\n    return angleAtSegments(points, t);\n}\nfunction getAllPoints(points) {\n    var tmp = points.slice(0);\n    if (points.length) {\n        tmp.push(points[0]);\n    }\n    return tmp;\n}\nfunction box$1(points) {\n    return box$2(points);\n}\nfunction length$1(points) {\n    return lengthOfSegment(getAllPoints(points));\n}\nfunction pointAt(points, t) {\n    return pointAtSegments(getAllPoints(points), t);\n}\nfunction pointDistance$1(points, x, y) {\n    return distanceAtSegment(getAllPoints(points), x, y);\n}\nfunction tangentAngle(points, t) {\n    return angleAtSegments(getAllPoints(points), t);\n}\n// 差值公式\nfunction quadraticAt(p0, p1, p2, t) {\n    var onet = 1 - t;\n    return onet * onet * p0 + 2 * t * onet * p1 + t * t * p2;\n}\n// 求极值\nfunction extrema(p0, p1, p2) {\n    var a = p0 + p2 - 2 * p1;\n    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(a, 0)) {\n        return [\n            0.5\n        ];\n    }\n    var rst = (p0 - p1) / a;\n    if (rst <= 1 && rst >= 0) {\n        return [\n            rst\n        ];\n    }\n    return [];\n}\n// 分割贝塞尔曲线\nfunction divideQuadratic(x1, y1, x2, y2, x3, y3, t) {\n    // 划分点\n    var xt = quadraticAt(x1, x2, x3, t);\n    var yt = quadraticAt(y1, y2, y3, t);\n    // 分割的第一条曲线的控制点\n    var controlPoint1 = pointAt$3(x1, y1, x2, y2, t);\n    // 分割的第二条曲线的控制点\n    var controlPoint2 = pointAt$3(x2, y2, x3, y3, t);\n    return [\n        [\n            x1,\n            y1,\n            controlPoint1.x,\n            controlPoint1.y,\n            xt,\n            yt\n        ],\n        [\n            xt,\n            yt,\n            controlPoint2.x,\n            controlPoint2.y,\n            x3,\n            y3\n        ]\n    ];\n}\n// 使用迭代法取贝塞尔曲线的长度\nfunction quadraticLength(x1, y1, x2, y2, x3, y3, iterationCount) {\n    if (iterationCount === 0) {\n        return (distance(x1, y1, x2, y2) + distance(x2, y2, x3, y3) + distance(x1, y1, x3, y3)) / 2;\n    }\n    var quadratics = divideQuadratic(x1, y1, x2, y2, x3, y3, 0.5);\n    var left = quadratics[0];\n    var right = quadratics[1];\n    left.push(iterationCount - 1);\n    right.push(iterationCount - 1);\n    return quadraticLength.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(left), false)) + quadraticLength.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(right), false));\n}\nfunction box(x1, y1, x2, y2, x3, y3) {\n    var xExtrema = extrema(x1, x2, x3)[0];\n    var yExtrema = extrema(y1, y2, y3)[0];\n    // 控制点不加入 box 的计算\n    var xArr = [\n        x1,\n        x3\n    ];\n    var yArr = [\n        y1,\n        y3\n    ];\n    if (xExtrema !== undefined) {\n        xArr.push(quadraticAt(x1, x2, x3, xExtrema));\n    }\n    if (yExtrema !== undefined) {\n        yArr.push(quadraticAt(y1, y2, y3, yExtrema));\n    }\n    return getBBoxByArray(xArr, yArr);\n}\nfunction length(x1, y1, x2, y2, x3, y3) {\n    return quadraticLength(x1, y1, x2, y2, x3, y3, 3);\n}\nfunction nearestPoint(x1, y1, x2, y2, x3, y3, x0, y0) {\n    return nearestPoint$2([\n        x1,\n        x2,\n        x3\n    ], [\n        y1,\n        y2,\n        y3\n    ], x0, y0, quadraticAt);\n}\nfunction pointDistance(x1, y1, x2, y2, x3, y3, x0, y0) {\n    var point = nearestPoint(x1, y1, x2, y2, x3, y3, x0, y0);\n    return distance(point.x, point.y, x0, y0);\n}\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@antv+g-math@3.0.0/node_modules/@antv/g-math/dist/index.esm.js\n");

/***/ })

};
;