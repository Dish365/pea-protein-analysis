"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@antv+g-lite@2.2.16";
exports.ids = ["vendor-chunks/@antv+g-lite@2.2.16"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@antv+g-lite@2.2.16/node_modules/@antv/g-lite/dist/index.esm.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/.pnpm/@antv+g-lite@2.2.16/node_modules/@antv/g-lite/dist/index.esm.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AABB: () => (/* binding */ AABB),\n/* harmony export */   AbstractRenderer: () => (/* binding */ AbstractRenderer),\n/* harmony export */   AbstractRendererPlugin: () => (/* binding */ AbstractRendererPlugin),\n/* harmony export */   BUILT_IN_PROPERTIES: () => (/* binding */ BUILT_IN_PROPERTIES),\n/* harmony export */   CSS: () => (/* binding */ CSS),\n/* harmony export */   CSSGradientValue: () => (/* binding */ CSSGradientValue),\n/* harmony export */   CSSKeywordValue: () => (/* binding */ CSSKeywordValue),\n/* harmony export */   CSSRGB: () => (/* binding */ CSSRGB),\n/* harmony export */   CSSStyleValue: () => (/* binding */ CSSStyleValue),\n/* harmony export */   CSSUnitValue: () => (/* binding */ CSSUnitValue),\n/* harmony export */   Camera: () => (/* binding */ Camera),\n/* harmony export */   CameraEvent: () => (/* binding */ CameraEvent),\n/* harmony export */   CameraProjectionMode: () => (/* binding */ CameraProjectionMode),\n/* harmony export */   CameraTrackingMode: () => (/* binding */ CameraTrackingMode),\n/* harmony export */   CameraType: () => (/* binding */ CameraType),\n/* harmony export */   Canvas: () => (/* binding */ Canvas),\n/* harmony export */   CanvasEvent: () => (/* binding */ CanvasEvent),\n/* harmony export */   Circle: () => (/* binding */ Circle),\n/* harmony export */   CircleUpdater: () => (/* binding */ CircleUpdater),\n/* harmony export */   ClipSpaceNearZ: () => (/* binding */ ClipSpaceNearZ),\n/* harmony export */   CustomElement: () => (/* binding */ CustomElement),\n/* harmony export */   CustomElementRegistry: () => (/* binding */ CustomElementRegistry),\n/* harmony export */   CustomEvent: () => (/* binding */ CustomEvent),\n/* harmony export */   DefaultSceneGraphSelector: () => (/* binding */ DefaultSceneGraphSelector),\n/* harmony export */   DefaultSceneGraphService: () => (/* binding */ DefaultSceneGraphService),\n/* harmony export */   DisplayObject: () => (/* binding */ DisplayObject),\n/* harmony export */   Document: () => (/* binding */ Document),\n/* harmony export */   ERROR_MSG_METHOD_NOT_IMPLEMENTED: () => (/* binding */ ERROR_MSG_METHOD_NOT_IMPLEMENTED),\n/* harmony export */   Element: () => (/* binding */ Element),\n/* harmony export */   ElementEvent: () => (/* binding */ ElementEvent),\n/* harmony export */   Ellipse: () => (/* binding */ Ellipse),\n/* harmony export */   EllipseUpdater: () => (/* binding */ EllipseUpdater),\n/* harmony export */   EventService: () => (/* binding */ EventService),\n/* harmony export */   EventTarget: () => (/* binding */ EventTarget),\n/* harmony export */   FederatedEvent: () => (/* binding */ FederatedEvent),\n/* harmony export */   FederatedMouseEvent: () => (/* binding */ FederatedMouseEvent),\n/* harmony export */   FederatedPointerEvent: () => (/* binding */ FederatedPointerEvent),\n/* harmony export */   FederatedWheelEvent: () => (/* binding */ FederatedWheelEvent),\n/* harmony export */   Fragment: () => (/* binding */ Fragment),\n/* harmony export */   Frustum: () => (/* binding */ Frustum),\n/* harmony export */   GradientType: () => (/* binding */ GradientType),\n/* harmony export */   Group: () => (/* binding */ Group),\n/* harmony export */   GroupUpdater: () => (/* binding */ GroupUpdater),\n/* harmony export */   HTML: () => (/* binding */ HTML),\n/* harmony export */   HTMLUpdater: () => (/* binding */ HTMLUpdater),\n/* harmony export */   Image: () => (/* binding */ Image),\n/* harmony export */   Line: () => (/* binding */ Line),\n/* harmony export */   LineUpdater: () => (/* binding */ LineUpdater),\n/* harmony export */   Mask: () => (/* binding */ Mask),\n/* harmony export */   MutationEvent: () => (/* binding */ MutationEvent),\n/* harmony export */   Node: () => (/* binding */ Node),\n/* harmony export */   OffscreenCanvasCreator: () => (/* binding */ OffscreenCanvasCreator),\n/* harmony export */   Path: () => (/* binding */ Path),\n/* harmony export */   PathUpdater: () => (/* binding */ PathUpdater),\n/* harmony export */   Plane: () => (/* binding */ Plane),\n/* harmony export */   Point: () => (/* binding */ Point),\n/* harmony export */   Polygon: () => (/* binding */ Polygon),\n/* harmony export */   Polyline: () => (/* binding */ Polyline),\n/* harmony export */   PolylineUpdater: () => (/* binding */ PolylineUpdater),\n/* harmony export */   PropertySyntax: () => (/* binding */ PropertySyntax),\n/* harmony export */   RBush: () => (/* binding */ RBush),\n/* harmony export */   Rect: () => (/* binding */ Rect),\n/* harmony export */   RectUpdater: () => (/* binding */ RectUpdater),\n/* harmony export */   Rectangle: () => (/* binding */ Rectangle),\n/* harmony export */   RenderReason: () => (/* binding */ RenderReason),\n/* harmony export */   RenderingService: () => (/* binding */ RenderingService),\n/* harmony export */   Shape: () => (/* binding */ Shape),\n/* harmony export */   SortReason: () => (/* binding */ SortReason),\n/* harmony export */   Strategy: () => (/* binding */ Strategy),\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   TextService: () => (/* binding */ TextService),\n/* harmony export */   TextUpdater: () => (/* binding */ TextUpdater),\n/* harmony export */   UnitType: () => (/* binding */ UnitType),\n/* harmony export */   attrModifiedEvent: () => (/* binding */ attrModifiedEvent),\n/* harmony export */   computeLinearGradient: () => (/* binding */ computeLinearGradient),\n/* harmony export */   computeRadialGradient: () => (/* binding */ computeRadialGradient),\n/* harmony export */   convertToPath: () => (/* binding */ convertToPath),\n/* harmony export */   createVec3: () => (/* binding */ createVec3),\n/* harmony export */   decompose: () => (/* binding */ decompose),\n/* harmony export */   definedProps: () => (/* binding */ definedProps),\n/* harmony export */   deg2rad: () => (/* binding */ deg2rad),\n/* harmony export */   deg2turn: () => (/* binding */ deg2turn),\n/* harmony export */   destroyEvent: () => (/* binding */ destroyEvent),\n/* harmony export */   findClosestClipPathTarget: () => (/* binding */ findClosestClipPathTarget),\n/* harmony export */   fromRotationTranslationScale: () => (/* binding */ fromRotationTranslationScale),\n/* harmony export */   getAngle: () => (/* binding */ getAngle),\n/* harmony export */   getEuler: () => (/* binding */ getEuler),\n/* harmony export */   getOrCalculatePathTotalLength: () => (/* binding */ getOrCalculatePathTotalLength),\n/* harmony export */   grad2deg: () => (/* binding */ grad2deg),\n/* harmony export */   insertedEvent: () => (/* binding */ insertedEvent),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isCSSGradientValue: () => (/* binding */ isCSSGradientValue),\n/* harmony export */   isCSSRGB: () => (/* binding */ isCSSRGB),\n/* harmony export */   isCanvas: () => (/* binding */ isCanvas),\n/* harmony export */   isDisplayObject: () => (/* binding */ isDisplayObject),\n/* harmony export */   isFederatedEvent: () => (/* binding */ isFederatedEvent),\n/* harmony export */   isFillOrStrokeAffected: () => (/* binding */ isFillOrStrokeAffected),\n/* harmony export */   isPattern: () => (/* binding */ isPattern),\n/* harmony export */   mergeColors: () => (/* binding */ mergeColors),\n/* harmony export */   parseColor: () => (/* binding */ parseColor),\n/* harmony export */   parseLength: () => (/* binding */ parseLength),\n/* harmony export */   parsePath: () => (/* binding */ parsePath),\n/* harmony export */   parseTransform: () => (/* binding */ parseTransform),\n/* harmony export */   parsedTransformToMat4: () => (/* binding */ parsedTransformToMat4),\n/* harmony export */   propertyMetadataCache: () => (/* binding */ propertyMetadataCache),\n/* harmony export */   rad2deg: () => (/* binding */ rad2deg),\n/* harmony export */   removedEvent: () => (/* binding */ removedEvent),\n/* harmony export */   resetEntityCounter: () => (/* binding */ resetEntityCounter),\n/* harmony export */   runtime: () => (/* binding */ runtime),\n/* harmony export */   setDOMSize: () => (/* binding */ setDOMSize),\n/* harmony export */   translatePathToString: () => (/* binding */ translatePathToString),\n/* harmony export */   turn2deg: () => (/* binding */ turn2deg)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/callSuper */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/callSuper.js\");\n/* harmony import */ var _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/slicedToArray.js\");\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! eventemitter3 */ \"(ssr)/../node_modules/.pnpm/eventemitter3@5.0.1/node_modules/eventemitter3/index.mjs\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! gl-matrix */ \"(ssr)/../node_modules/.pnpm/gl-matrix@3.4.3/node_modules/gl-matrix/esm/vec3.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! gl-matrix */ \"(ssr)/../node_modules/.pnpm/gl-matrix@3.4.3/node_modules/gl-matrix/esm/vec4.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! gl-matrix */ \"(ssr)/../node_modules/.pnpm/gl-matrix@3.4.3/node_modules/gl-matrix/esm/mat4.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! gl-matrix */ \"(ssr)/../node_modules/.pnpm/gl-matrix@3.4.3/node_modules/gl-matrix/esm/mat3.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! gl-matrix */ \"(ssr)/../node_modules/.pnpm/gl-matrix@3.4.3/node_modules/gl-matrix/esm/quat.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! gl-matrix */ \"(ssr)/../node_modules/.pnpm/gl-matrix@3.4.3/node_modules/gl-matrix/esm/vec2.js\");\n/* harmony import */ var _babel_runtime_helpers_readOnlyError__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/readOnlyError */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/readOnlyError.js\");\n/* harmony import */ var _babel_runtime_helpers_readOnlyError__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_readOnlyError__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/is-number.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/path/util/distance-square-root.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/is-nil.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/is-string.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/clamp.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/path/util/get-total-length.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/min.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/max.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/is-number-equal.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/mod.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/path/process/normalize-path.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/path/convert/path-2-curve.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/path/util/equalize-segments.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/path/util/get-draw-direction.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/path/process/reverse-curve.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/path/process/clone-path.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/path/util/get-rotated-curve.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/is-undefined.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/is-array.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/is-boolean.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/is-function.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/is-object.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/path/util/get-point-at-length.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _babel_runtime_helpers_superPropGet__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @babel/runtime/helpers/superPropGet */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/superPropGet.js\");\n/* harmony import */ var _babel_runtime_helpers_superPropGet__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_superPropGet__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _antv_g_math__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @antv/g-math */ \"(ssr)/../node_modules/.pnpm/@antv+g-math@3.0.0/node_modules/@antv/g-math/dist/index.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @babel/runtime/helpers/regeneratorRuntime */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\");\n/* harmony import */ var _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var _babel_runtime_helpers_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @babel/runtime/helpers/createForOfIteratorHelper */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\");\n/* harmony import */ var _babel_runtime_helpers_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\n/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_15__);\n/*!\n * @antv/g-lite\n * @description A core module for rendering engine implements DOM API.\n * @version 2.2.16\n * @date 1/23/2025, 8:31:51 AM\n * @author AntVis\n * @docs https://g.antv.antgroup.com/\n */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar commonjsGlobal = typeof globalThis !== \"undefined\" ? globalThis :  false ? 0 : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : {};\nvar rbush = {\n    exports: {}\n};\n(function(module, exports) {\n    (function(global1, factory) {\n        module.exports = factory();\n    })(commonjsGlobal, function() {\n        function quickselect(arr, k, left, right, compare) {\n            quickselectStep(arr, k, left || 0, right || arr.length - 1, compare || defaultCompare);\n        }\n        function quickselectStep(arr, k, left, right, compare) {\n            while(right > left){\n                if (right - left > 600) {\n                    var n = right - left + 1;\n                    var m = k - left + 1;\n                    var z = Math.log(n);\n                    var s = 0.5 * Math.exp(2 * z / 3);\n                    var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n                    var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n                    var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n                    quickselectStep(arr, k, newLeft, newRight, compare);\n                }\n                var t = arr[k];\n                var i = left;\n                var j = right;\n                swap(arr, left, k);\n                if (compare(arr[right], t) > 0) {\n                    swap(arr, left, right);\n                }\n                while(i < j){\n                    swap(arr, i, j);\n                    i++;\n                    j--;\n                    while(compare(arr[i], t) < 0){\n                        i++;\n                    }\n                    while(compare(arr[j], t) > 0){\n                        j--;\n                    }\n                }\n                if (compare(arr[left], t) === 0) {\n                    swap(arr, left, j);\n                } else {\n                    j++;\n                    swap(arr, j, right);\n                }\n                if (j <= k) {\n                    left = j + 1;\n                }\n                if (k <= j) {\n                    right = j - 1;\n                }\n            }\n        }\n        function swap(arr, i, j) {\n            var tmp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = tmp;\n        }\n        function defaultCompare(a, b) {\n            return a < b ? -1 : a > b ? 1 : 0;\n        }\n        var RBush = function RBush(maxEntries) {\n            if (maxEntries === void 0) maxEntries = 9;\n            // max entries in a node is 9 by default; min node fill is 40% for best performance\n            this._maxEntries = Math.max(4, maxEntries);\n            this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n            this.clear();\n        };\n        RBush.prototype.all = function all() {\n            return this._all(this.data, []);\n        };\n        RBush.prototype.search = function search(bbox) {\n            var node = this.data;\n            var result = [];\n            if (!intersects(bbox, node)) {\n                return result;\n            }\n            var toBBox = this.toBBox;\n            var nodesToSearch = [];\n            while(node){\n                for(var i = 0; i < node.children.length; i++){\n                    var child = node.children[i];\n                    var childBBox = node.leaf ? toBBox(child) : child;\n                    if (intersects(bbox, childBBox)) {\n                        if (node.leaf) {\n                            result.push(child);\n                        } else if (contains(bbox, childBBox)) {\n                            this._all(child, result);\n                        } else {\n                            nodesToSearch.push(child);\n                        }\n                    }\n                }\n                node = nodesToSearch.pop();\n            }\n            return result;\n        };\n        RBush.prototype.collides = function collides(bbox) {\n            var node = this.data;\n            if (!intersects(bbox, node)) {\n                return false;\n            }\n            var nodesToSearch = [];\n            while(node){\n                for(var i = 0; i < node.children.length; i++){\n                    var child = node.children[i];\n                    var childBBox = node.leaf ? this.toBBox(child) : child;\n                    if (intersects(bbox, childBBox)) {\n                        if (node.leaf || contains(bbox, childBBox)) {\n                            return true;\n                        }\n                        nodesToSearch.push(child);\n                    }\n                }\n                node = nodesToSearch.pop();\n            }\n            return false;\n        };\n        RBush.prototype.load = function load(data) {\n            if (!(data && data.length)) {\n                return this;\n            }\n            if (data.length < this._minEntries) {\n                for(var i = 0; i < data.length; i++){\n                    this.insert(data[i]);\n                }\n                return this;\n            }\n            // recursively build the tree with the given data from scratch using OMT algorithm\n            var node = this._build(data.slice(), 0, data.length - 1, 0);\n            if (!this.data.children.length) {\n                // save as is if tree is empty\n                this.data = node;\n            } else if (this.data.height === node.height) {\n                // split root if trees have the same height\n                this._splitRoot(this.data, node);\n            } else {\n                if (this.data.height < node.height) {\n                    // swap trees if inserted one is bigger\n                    var tmpNode = this.data;\n                    this.data = node;\n                    node = tmpNode;\n                }\n                // insert the small tree into the large tree at appropriate level\n                this._insert(node, this.data.height - node.height - 1, true);\n            }\n            return this;\n        };\n        RBush.prototype.insert = function insert(item) {\n            if (item) {\n                this._insert(item, this.data.height - 1);\n            }\n            return this;\n        };\n        RBush.prototype.clear = function clear() {\n            this.data = createNode([]);\n            return this;\n        };\n        RBush.prototype.remove = function remove(item, equalsFn) {\n            if (!item) {\n                return this;\n            }\n            var node = this.data;\n            var bbox = this.toBBox(item);\n            var path = [];\n            var indexes = [];\n            var i, parent, goingUp;\n            // depth-first iterative tree traversal\n            while(node || path.length){\n                if (!node) {\n                    node = path.pop();\n                    parent = path[path.length - 1];\n                    i = indexes.pop();\n                    goingUp = true;\n                }\n                if (node.leaf) {\n                    var index = findItem(item, node.children, equalsFn);\n                    if (index !== -1) {\n                        // item found, remove the item and condense tree upwards\n                        node.children.splice(index, 1);\n                        path.push(node);\n                        this._condense(path);\n                        return this;\n                    }\n                }\n                if (!goingUp && !node.leaf && contains(node, bbox)) {\n                    path.push(node);\n                    indexes.push(i);\n                    i = 0;\n                    parent = node;\n                    node = node.children[0];\n                } else if (parent) {\n                    i++;\n                    node = parent.children[i];\n                    goingUp = false;\n                } else {\n                    node = null;\n                } // nothing found\n            }\n            return this;\n        };\n        RBush.prototype.toBBox = function toBBox(item) {\n            return item;\n        };\n        RBush.prototype.compareMinX = function compareMinX(a, b) {\n            return a.minX - b.minX;\n        };\n        RBush.prototype.compareMinY = function compareMinY(a, b) {\n            return a.minY - b.minY;\n        };\n        RBush.prototype.toJSON = function toJSON() {\n            return this.data;\n        };\n        RBush.prototype.fromJSON = function fromJSON(data) {\n            this.data = data;\n            return this;\n        };\n        RBush.prototype._all = function _all(node, result) {\n            var nodesToSearch = [];\n            while(node){\n                if (node.leaf) {\n                    result.push.apply(result, node.children);\n                } else {\n                    nodesToSearch.push.apply(nodesToSearch, node.children);\n                }\n                node = nodesToSearch.pop();\n            }\n            return result;\n        };\n        RBush.prototype._build = function _build(items, left, right, height) {\n            var N = right - left + 1;\n            var M = this._maxEntries;\n            var node;\n            if (N <= M) {\n                // reached leaf level; return leaf\n                node = createNode(items.slice(left, right + 1));\n                calcBBox(node, this.toBBox);\n                return node;\n            }\n            if (!height) {\n                // target height of the bulk-loaded tree\n                height = Math.ceil(Math.log(N) / Math.log(M));\n                // target number of root entries to maximize storage utilization\n                M = Math.ceil(N / Math.pow(M, height - 1));\n            }\n            node = createNode([]);\n            node.leaf = false;\n            node.height = height;\n            // split the items into M mostly square tiles\n            var N2 = Math.ceil(N / M);\n            var N1 = N2 * Math.ceil(Math.sqrt(M));\n            multiSelect(items, left, right, N1, this.compareMinX);\n            for(var i = left; i <= right; i += N1){\n                var right2 = Math.min(i + N1 - 1, right);\n                multiSelect(items, i, right2, N2, this.compareMinY);\n                for(var j = i; j <= right2; j += N2){\n                    var right3 = Math.min(j + N2 - 1, right2);\n                    // pack each entry recursively\n                    node.children.push(this._build(items, j, right3, height - 1));\n                }\n            }\n            calcBBox(node, this.toBBox);\n            return node;\n        };\n        RBush.prototype._chooseSubtree = function _chooseSubtree(bbox, node, level, path) {\n            while(true){\n                path.push(node);\n                if (node.leaf || path.length - 1 === level) {\n                    break;\n                }\n                var minArea = Infinity;\n                var minEnlargement = Infinity;\n                var targetNode = void 0;\n                for(var i = 0; i < node.children.length; i++){\n                    var child = node.children[i];\n                    var area = bboxArea(child);\n                    var enlargement = enlargedArea(bbox, child) - area;\n                    // choose entry with the least area enlargement\n                    if (enlargement < minEnlargement) {\n                        minEnlargement = enlargement;\n                        minArea = area < minArea ? area : minArea;\n                        targetNode = child;\n                    } else if (enlargement === minEnlargement) {\n                        // otherwise choose one with the smallest area\n                        if (area < minArea) {\n                            minArea = area;\n                            targetNode = child;\n                        }\n                    }\n                }\n                node = targetNode || node.children[0];\n            }\n            return node;\n        };\n        RBush.prototype._insert = function _insert(item, level, isNode) {\n            var bbox = isNode ? item : this.toBBox(item);\n            var insertPath = [];\n            // find the best node for accommodating the item, saving all nodes along the path too\n            var node = this._chooseSubtree(bbox, this.data, level, insertPath);\n            // put the item into the node\n            node.children.push(item);\n            extend(node, bbox);\n            // split on node overflow; propagate upwards if necessary\n            while(level >= 0){\n                if (insertPath[level].children.length > this._maxEntries) {\n                    this._split(insertPath, level);\n                    level--;\n                } else {\n                    break;\n                }\n            }\n            // adjust bboxes along the insertion path\n            this._adjustParentBBoxes(bbox, insertPath, level);\n        };\n        // split overflowed node into two\n        RBush.prototype._split = function _split(insertPath, level) {\n            var node = insertPath[level];\n            var M = node.children.length;\n            var m = this._minEntries;\n            this._chooseSplitAxis(node, m, M);\n            var splitIndex = this._chooseSplitIndex(node, m, M);\n            var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\n            newNode.height = node.height;\n            newNode.leaf = node.leaf;\n            calcBBox(node, this.toBBox);\n            calcBBox(newNode, this.toBBox);\n            if (level) {\n                insertPath[level - 1].children.push(newNode);\n            } else {\n                this._splitRoot(node, newNode);\n            }\n        };\n        RBush.prototype._splitRoot = function _splitRoot(node, newNode) {\n            // split root node\n            this.data = createNode([\n                node,\n                newNode\n            ]);\n            this.data.height = node.height + 1;\n            this.data.leaf = false;\n            calcBBox(this.data, this.toBBox);\n        };\n        RBush.prototype._chooseSplitIndex = function _chooseSplitIndex(node, m, M) {\n            var index;\n            var minOverlap = Infinity;\n            var minArea = Infinity;\n            for(var i = m; i <= M - m; i++){\n                var bbox1 = distBBox(node, 0, i, this.toBBox);\n                var bbox2 = distBBox(node, i, M, this.toBBox);\n                var overlap = intersectionArea(bbox1, bbox2);\n                var area = bboxArea(bbox1) + bboxArea(bbox2);\n                // choose distribution with minimum overlap\n                if (overlap < minOverlap) {\n                    minOverlap = overlap;\n                    index = i;\n                    minArea = area < minArea ? area : minArea;\n                } else if (overlap === minOverlap) {\n                    // otherwise choose distribution with minimum area\n                    if (area < minArea) {\n                        minArea = area;\n                        index = i;\n                    }\n                }\n            }\n            return index || M - m;\n        };\n        // sorts node children by the best axis for split\n        RBush.prototype._chooseSplitAxis = function _chooseSplitAxis(node, m, M) {\n            var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX;\n            var compareMinY = node.leaf ? this.compareMinY : compareNodeMinY;\n            var xMargin = this._allDistMargin(node, m, M, compareMinX);\n            var yMargin = this._allDistMargin(node, m, M, compareMinY);\n            // if total distributions margin value is minimal for x, sort by minX,\n            // otherwise it's already sorted by minY\n            if (xMargin < yMargin) {\n                node.children.sort(compareMinX);\n            }\n        };\n        // total margin of all possible split distributions where each node is at least m full\n        RBush.prototype._allDistMargin = function _allDistMargin(node, m, M, compare) {\n            node.children.sort(compare);\n            var toBBox = this.toBBox;\n            var leftBBox = distBBox(node, 0, m, toBBox);\n            var rightBBox = distBBox(node, M - m, M, toBBox);\n            var margin = bboxMargin(leftBBox) + bboxMargin(rightBBox);\n            for(var i = m; i < M - m; i++){\n                var child = node.children[i];\n                extend(leftBBox, node.leaf ? toBBox(child) : child);\n                margin += bboxMargin(leftBBox);\n            }\n            for(var i$1 = M - m - 1; i$1 >= m; i$1--){\n                var child$1 = node.children[i$1];\n                extend(rightBBox, node.leaf ? toBBox(child$1) : child$1);\n                margin += bboxMargin(rightBBox);\n            }\n            return margin;\n        };\n        RBush.prototype._adjustParentBBoxes = function _adjustParentBBoxes(bbox, path, level) {\n            // adjust bboxes along the given tree path\n            for(var i = level; i >= 0; i--){\n                extend(path[i], bbox);\n            }\n        };\n        RBush.prototype._condense = function _condense(path) {\n            // go through the path, removing empty nodes and updating bboxes\n            for(var i = path.length - 1, siblings = void 0; i >= 0; i--){\n                if (path[i].children.length === 0) {\n                    if (i > 0) {\n                        siblings = path[i - 1].children;\n                        siblings.splice(siblings.indexOf(path[i]), 1);\n                    } else {\n                        this.clear();\n                    }\n                } else {\n                    calcBBox(path[i], this.toBBox);\n                }\n            }\n        };\n        function findItem(item, items, equalsFn) {\n            if (!equalsFn) {\n                return items.indexOf(item);\n            }\n            for(var i = 0; i < items.length; i++){\n                if (equalsFn(item, items[i])) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n        // calculate node's bbox from bboxes of its children\n        function calcBBox(node, toBBox) {\n            distBBox(node, 0, node.children.length, toBBox, node);\n        }\n        // min bounding rectangle of node children from k to p-1\n        function distBBox(node, k, p, toBBox, destNode) {\n            if (!destNode) {\n                destNode = createNode(null);\n            }\n            destNode.minX = Infinity;\n            destNode.minY = Infinity;\n            destNode.maxX = -Infinity;\n            destNode.maxY = -Infinity;\n            for(var i = k; i < p; i++){\n                var child = node.children[i];\n                extend(destNode, node.leaf ? toBBox(child) : child);\n            }\n            return destNode;\n        }\n        function extend(a, b) {\n            a.minX = Math.min(a.minX, b.minX);\n            a.minY = Math.min(a.minY, b.minY);\n            a.maxX = Math.max(a.maxX, b.maxX);\n            a.maxY = Math.max(a.maxY, b.maxY);\n            return a;\n        }\n        function compareNodeMinX(a, b) {\n            return a.minX - b.minX;\n        }\n        function compareNodeMinY(a, b) {\n            return a.minY - b.minY;\n        }\n        function bboxArea(a) {\n            return (a.maxX - a.minX) * (a.maxY - a.minY);\n        }\n        function bboxMargin(a) {\n            return a.maxX - a.minX + (a.maxY - a.minY);\n        }\n        function enlargedArea(a, b) {\n            return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) * (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\n        }\n        function intersectionArea(a, b) {\n            var minX = Math.max(a.minX, b.minX);\n            var minY = Math.max(a.minY, b.minY);\n            var maxX = Math.min(a.maxX, b.maxX);\n            var maxY = Math.min(a.maxY, b.maxY);\n            return Math.max(0, maxX - minX) * Math.max(0, maxY - minY);\n        }\n        function contains(a, b) {\n            return a.minX <= b.minX && a.minY <= b.minY && b.maxX <= a.maxX && b.maxY <= a.maxY;\n        }\n        function intersects(a, b) {\n            return b.minX <= a.maxX && b.minY <= a.maxY && b.maxX >= a.minX && b.maxY >= a.minY;\n        }\n        function createNode(children) {\n            return {\n                children: children,\n                height: 1,\n                leaf: true,\n                minX: Infinity,\n                minY: Infinity,\n                maxX: -Infinity,\n                maxY: -Infinity\n            };\n        }\n        // sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\n        // combines selection algorithm with binary divide & conquer approach\n        function multiSelect(arr, left, right, n, compare) {\n            var stack = [\n                left,\n                right\n            ];\n            while(stack.length){\n                right = stack.pop();\n                left = stack.pop();\n                if (right - left <= n) {\n                    continue;\n                }\n                var mid = left + Math.ceil((right - left) / n / 2) * n;\n                quickselect(arr, mid, left, right, compare);\n                stack.push(left, mid, mid, right);\n            }\n        }\n        return RBush;\n    });\n})(rbush);\nvar RBush = rbush.exports;\nvar Shape = /*#__PURE__*/ function(Shape) {\n    Shape[\"GROUP\"] = \"g\";\n    Shape[\"FRAGMENT\"] = \"fragment\";\n    Shape[\"CIRCLE\"] = \"circle\";\n    Shape[\"ELLIPSE\"] = \"ellipse\";\n    Shape[\"IMAGE\"] = \"image\";\n    Shape[\"RECT\"] = \"rect\";\n    Shape[\"LINE\"] = \"line\";\n    Shape[\"POLYLINE\"] = \"polyline\";\n    Shape[\"POLYGON\"] = \"polygon\";\n    Shape[\"TEXT\"] = \"text\";\n    Shape[\"PATH\"] = \"path\";\n    Shape[\"HTML\"] = \"html\";\n    Shape[\"MESH\"] = \"mesh\";\n    return Shape;\n}({});\n// prettier-ignore\n// prettier-ignore\n// Cursor style\n// See: https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\nvar ClipSpaceNearZ = /*#__PURE__*/ function(ClipSpaceNearZ) {\n    ClipSpaceNearZ[ClipSpaceNearZ[\"ZERO\"] = 0] = \"ZERO\";\n    ClipSpaceNearZ[ClipSpaceNearZ[\"NEGATIVE_ONE\"] = 1] = \"NEGATIVE_ONE\";\n    return ClipSpaceNearZ;\n}({});\n/**\n * eg. NodeCanvas, OffscreenCanvas, HTMLCanvasElement\n */ /**\n * The format to use when defining custom easing functions\n */ // @see https://github.com/zhanba/pailye/blob/master/packages/flex/src/types.ts\nvar AbstractRendererPlugin = /*#__PURE__*/ function() {\n    function AbstractRendererPlugin() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, AbstractRendererPlugin);\n        this.plugins = [];\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(AbstractRendererPlugin, [\n        {\n            key: \"addRenderingPlugin\",\n            value: function addRenderingPlugin(plugin) {\n                this.plugins.push(plugin);\n                this.context.renderingPlugins.push(plugin);\n            }\n        },\n        {\n            key: \"removeAllRenderingPlugins\",\n            value: function removeAllRenderingPlugins() {\n                var _this = this;\n                this.plugins.forEach(function(plugin) {\n                    var index = _this.context.renderingPlugins.indexOf(plugin);\n                    if (index >= 0) {\n                        _this.context.renderingPlugins.splice(index, 1);\n                    }\n                });\n            }\n        }\n    ]);\n}();\nvar AbstractRenderer = /*#__PURE__*/ function() {\n    function AbstractRenderer(config) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, AbstractRenderer);\n        this.clipSpaceNearZ = ClipSpaceNearZ.NEGATIVE_ONE;\n        this.plugins = [];\n        this.config = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n            /**\n       * only dirty object will cause re-render\n       */ enableDirtyCheck: true,\n            enableCulling: false,\n            /**\n       * enable auto rendering by default\n       */ enableAutoRendering: true,\n            /**\n       * enable dirty rectangle rendering by default\n       */ enableDirtyRectangleRendering: true,\n            enableDirtyRectangleRenderingDebug: false,\n            enableSizeAttenuation: true,\n            enableRenderingOptimization: false\n        }, config);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(AbstractRenderer, [\n        {\n            key: \"registerPlugin\",\n            value: function registerPlugin(plugin) {\n                var index = this.plugins.findIndex(function(p) {\n                    return p === plugin;\n                });\n                if (index === -1) {\n                    this.plugins.push(plugin);\n                }\n            }\n        },\n        {\n            key: \"unregisterPlugin\",\n            value: function unregisterPlugin(plugin) {\n                var index = this.plugins.findIndex(function(p) {\n                    return p === plugin;\n                });\n                if (index > -1) {\n                    this.plugins.splice(index, 1);\n                }\n            }\n        },\n        {\n            key: \"getPlugins\",\n            value: function getPlugins() {\n                return this.plugins;\n            }\n        },\n        {\n            key: \"getPlugin\",\n            value: function getPlugin(name) {\n                return this.plugins.find(function(plugin) {\n                    return plugin.name === name;\n                });\n            }\n        },\n        {\n            key: \"getConfig\",\n            value: function getConfig() {\n                return this.config;\n            }\n        },\n        {\n            key: \"setConfig\",\n            value: function setConfig(config) {\n                Object.assign(this.config, config);\n            }\n        }\n    ]);\n}();\nvar addVec3 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.add, copyVec3 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.copy, maxVec3 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.max, minVec3 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.min, scaleVec3 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.scale, subVec3 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.sub;\n/**\n * Axis-Aligned Bounding Box\n * 为了便于后续 Frustum Culling，通过查找表定义 p-vertex 和 n-vertex\n * @see https://github.com/antvis/GWebGPUEngine/issues/3\n */ var AABB = /*#__PURE__*/ function() {\n    function AABB() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, AABB);\n        this.center = [\n            0,\n            0,\n            0\n        ];\n        this.halfExtents = [\n            0,\n            0,\n            0\n        ];\n        this.min = [\n            0,\n            0,\n            0\n        ];\n        this.max = [\n            0,\n            0,\n            0\n        ];\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(AABB, [\n        {\n            key: \"update\",\n            value: function update(center, halfExtents) {\n                copyVec3(this.center, center);\n                copyVec3(this.halfExtents, halfExtents);\n                subVec3(this.min, this.center, this.halfExtents);\n                addVec3(this.max, this.center, this.halfExtents);\n            }\n        },\n        {\n            key: \"setMinMax\",\n            value: function setMinMax(min, max) {\n                addVec3(this.center, max, min);\n                scaleVec3(this.center, this.center, 0.5);\n                subVec3(this.halfExtents, max, min);\n                scaleVec3(this.halfExtents, this.halfExtents, 0.5);\n                copyVec3(this.min, min);\n                copyVec3(this.max, max);\n            }\n        },\n        {\n            key: \"getMin\",\n            value: function getMin() {\n                return this.min;\n            }\n        },\n        {\n            key: \"getMax\",\n            value: function getMax() {\n                return this.max;\n            }\n        },\n        {\n            key: \"add\",\n            value: function add(aabb) {\n                if (AABB.isEmpty(aabb)) {\n                    return;\n                }\n                if (AABB.isEmpty(this)) {\n                    this.setMinMax(aabb.getMin(), aabb.getMax());\n                    return;\n                }\n                var tc = this.center;\n                var tcx = tc[0];\n                var tcy = tc[1];\n                var tcz = tc[2];\n                var th = this.halfExtents;\n                var thx = th[0];\n                var thy = th[1];\n                var thz = th[2];\n                var tminx = tcx - thx;\n                var tmaxx = tcx + thx;\n                var tminy = tcy - thy;\n                var tmaxy = tcy + thy;\n                var tminz = tcz - thz;\n                var tmaxz = tcz + thz;\n                var oc = aabb.center;\n                var ocx = oc[0];\n                var ocy = oc[1];\n                var ocz = oc[2];\n                var oh = aabb.halfExtents;\n                var ohx = oh[0];\n                var ohy = oh[1];\n                var ohz = oh[2];\n                var ominx = ocx - ohx;\n                var omaxx = ocx + ohx;\n                var ominy = ocy - ohy;\n                var omaxy = ocy + ohy;\n                var ominz = ocz - ohz;\n                var omaxz = ocz + ohz;\n                if (ominx < tminx) {\n                    tminx = ominx;\n                }\n                if (omaxx > tmaxx) {\n                    tmaxx = omaxx;\n                }\n                if (ominy < tminy) {\n                    tminy = ominy;\n                }\n                if (omaxy > tmaxy) {\n                    tmaxy = omaxy;\n                }\n                if (ominz < tminz) {\n                    tminz = ominz;\n                }\n                if (omaxz > tmaxz) {\n                    tmaxz = omaxz;\n                }\n                tc[0] = (tminx + tmaxx) * 0.5;\n                tc[1] = (tminy + tmaxy) * 0.5;\n                tc[2] = (tminz + tmaxz) * 0.5;\n                th[0] = (tmaxx - tminx) * 0.5;\n                th[1] = (tmaxy - tminy) * 0.5;\n                th[2] = (tmaxz - tminz) * 0.5;\n                this.min[0] = tminx;\n                this.min[1] = tminy;\n                this.min[2] = tminz;\n                this.max[0] = tmaxx;\n                this.max[1] = tmaxy;\n                this.max[2] = tmaxz;\n            }\n        },\n        {\n            key: \"setFromTransformedAABB\",\n            value: function setFromTransformedAABB(aabb, m) {\n                var bc = this.center;\n                var br = this.halfExtents;\n                var ac = aabb.center;\n                var ar = aabb.halfExtents;\n                var mx0 = m[0];\n                var mx1 = m[4];\n                var mx2 = m[8];\n                var my0 = m[1];\n                var my1 = m[5];\n                var my2 = m[9];\n                var mz0 = m[2];\n                var mz1 = m[6];\n                var mz2 = m[10];\n                var mx0a = Math.abs(mx0);\n                var mx1a = Math.abs(mx1);\n                var mx2a = Math.abs(mx2);\n                var my0a = Math.abs(my0);\n                var my1a = Math.abs(my1);\n                var my2a = Math.abs(my2);\n                var mz0a = Math.abs(mz0);\n                var mz1a = Math.abs(mz1);\n                var mz2a = Math.abs(mz2);\n                bc[0] = m[12] + mx0 * ac[0] + mx1 * ac[1] + mx2 * ac[2];\n                bc[1] = m[13] + my0 * ac[0] + my1 * ac[1] + my2 * ac[2];\n                bc[2] = m[14] + mz0 * ac[0] + mz1 * ac[1] + mz2 * ac[2];\n                // vec3.set(\n                //   bc,\n                //   m[12] + mx0 * ac[0] + mx1 * ac[1] + mx2 * ac[2],\n                //   m[13] + my0 * ac[0] + my1 * ac[1] + my2 * ac[2],\n                //   m[14] + mz0 * ac[0] + mz1 * ac[1] + mz2 * ac[2],\n                // );\n                br[0] = mx0a * ar[0] + mx1a * ar[1] + mx2a * ar[2];\n                br[1] = my0a * ar[0] + my1a * ar[1] + my2a * ar[2];\n                br[2] = mz0a * ar[0] + mz1a * ar[1] + mz2a * ar[2];\n                // vec3.set(\n                //   br,\n                //   mx0a * ar[0] + mx1a * ar[1] + mx2a * ar[2],\n                //   my0a * ar[0] + my1a * ar[1] + my2a * ar[2],\n                //   mz0a * ar[0] + mz1a * ar[1] + mz2a * ar[2],\n                // );\n                // this.min = vec3.sub(this.min, bc, br);\n                // this.max = vec3.add(this.max, bc, br);\n                subVec3(this.min, bc, br);\n                addVec3(this.max, bc, br);\n            }\n        },\n        {\n            key: \"intersects\",\n            value: function intersects(aabb) {\n                var aMax = this.getMax();\n                var aMin = this.getMin();\n                var bMax = aabb.getMax();\n                var bMin = aabb.getMin();\n                return aMin[0] <= bMax[0] && aMax[0] >= bMin[0] && aMin[1] <= bMax[1] && aMax[1] >= bMin[1] && aMin[2] <= bMax[2] && aMax[2] >= bMin[2];\n            }\n        },\n        {\n            key: \"intersection\",\n            value: function intersection(aabb) {\n                if (!this.intersects(aabb)) {\n                    return null;\n                }\n                var intersection = new AABB();\n                var min = maxVec3([\n                    0,\n                    0,\n                    0\n                ], this.getMin(), aabb.getMin());\n                var max = minVec3([\n                    0,\n                    0,\n                    0\n                ], this.getMax(), aabb.getMax());\n                intersection.setMinMax(min, max);\n                return intersection;\n            }\n        },\n        {\n            key: \"getNegativeFarPoint\",\n            value: function getNegativeFarPoint(plane) {\n                if (plane.pnVertexFlag === 0x111) {\n                    return copyVec3([\n                        0,\n                        0,\n                        0\n                    ], this.min);\n                // return vec3.copy(vec3.create(), this.min);\n                }\n                if (plane.pnVertexFlag === 0x110) {\n                    return [\n                        this.min[0],\n                        this.min[1],\n                        this.max[2]\n                    ];\n                // return vec3.fromValues(this.min[0], this.min[1], this.max[2]);\n                }\n                if (plane.pnVertexFlag === 0x101) {\n                    return [\n                        this.min[0],\n                        this.max[1],\n                        this.min[2]\n                    ];\n                // return vec3.fromValues(this.min[0], this.max[1], this.min[2]);\n                }\n                if (plane.pnVertexFlag === 0x100) {\n                    return [\n                        this.min[0],\n                        this.max[1],\n                        this.max[2]\n                    ];\n                // return vec3.fromValues(this.min[0], this.max[1], this.max[2]);\n                }\n                if (plane.pnVertexFlag === 0x011) {\n                    return [\n                        this.max[0],\n                        this.min[1],\n                        this.min[2]\n                    ];\n                // return vec3.fromValues(this.max[0], this.min[1], this.min[2]);\n                }\n                if (plane.pnVertexFlag === 0x010) {\n                    return [\n                        this.max[0],\n                        this.min[1],\n                        this.max[2]\n                    ];\n                // return vec3.fromValues(this.max[0], this.min[1], this.max[2]);\n                }\n                if (plane.pnVertexFlag === 0x001) {\n                    return [\n                        this.max[0],\n                        this.max[1],\n                        this.min[2]\n                    ];\n                // return vec3.fromValues(this.max[0], this.max[1], this.min[2]);\n                }\n                return [\n                    this.max[0],\n                    this.max[1],\n                    this.max[2]\n                ];\n            // return vec3.fromValues(this.max[0], this.max[1], this.max[2]);\n            }\n        },\n        {\n            key: \"getPositiveFarPoint\",\n            value: function getPositiveFarPoint(plane) {\n                if (plane.pnVertexFlag === 0x111) {\n                    return copyVec3([\n                        0,\n                        0,\n                        0\n                    ], this.max);\n                // return vec3.copy(vec3.create(), this.max);\n                }\n                if (plane.pnVertexFlag === 0x110) {\n                    return [\n                        this.max[0],\n                        this.max[1],\n                        this.min[2]\n                    ];\n                // return vec3.fromValues(this.max[0], this.max[1], this.min[2]);\n                }\n                if (plane.pnVertexFlag === 0x101) {\n                    return [\n                        this.max[0],\n                        this.min[1],\n                        this.max[2]\n                    ];\n                // return vec3.fromValues(this.max[0], this.min[1], this.max[2]);\n                }\n                if (plane.pnVertexFlag === 0x100) {\n                    return [\n                        this.max[0],\n                        this.min[1],\n                        this.min[2]\n                    ];\n                // return vec3.fromValues(this.max[0], this.min[1], this.min[2]);\n                }\n                if (plane.pnVertexFlag === 0x011) {\n                    return [\n                        this.min[0],\n                        this.max[1],\n                        this.max[2]\n                    ];\n                // return vec3.fromValues(this.min[0], this.max[1], this.max[2]);\n                }\n                if (plane.pnVertexFlag === 0x010) {\n                    return [\n                        this.min[0],\n                        this.max[1],\n                        this.min[2]\n                    ];\n                // return vec3.fromValues(this.min[0], this.max[1], this.min[2]);\n                }\n                if (plane.pnVertexFlag === 0x001) {\n                    return [\n                        this.min[0],\n                        this.min[1],\n                        this.max[2]\n                    ];\n                // return vec3.fromValues(this.min[0], this.min[1], this.max[2]);\n                }\n                return [\n                    this.min[0],\n                    this.min[1],\n                    this.min[2]\n                ];\n            // return vec3.fromValues(this.min[0], this.min[1], this.min[2]);\n            }\n        }\n    ], [\n        {\n            key: \"isEmpty\",\n            value: function isEmpty(aabb) {\n                return !aabb || aabb.halfExtents[0] === 0 && aabb.halfExtents[1] === 0 && aabb.halfExtents[2] === 0;\n            }\n        }\n    ]);\n}();\nvar Plane = /*#__PURE__*/ function() {\n    /**\n   * lookup table for p-vertex & n-vertex when doing frustum culling\n   */ function Plane(distance, normal) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Plane);\n        this.distance = distance || 0;\n        this.normal = normal || gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(0, 1, 0);\n        this.updatePNVertexFlag();\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Plane, [\n        {\n            key: \"updatePNVertexFlag\",\n            value: function updatePNVertexFlag() {\n                this.pnVertexFlag = (Number(this.normal[0] >= 0) << 8) + (Number(this.normal[1] >= 0) << 4) + Number(this.normal[2] >= 0);\n            }\n        },\n        {\n            key: \"distanceToPoint\",\n            value: function distanceToPoint(point) {\n                return gl_matrix__WEBPACK_IMPORTED_MODULE_16__.dot(point, this.normal) - this.distance;\n            }\n        },\n        {\n            key: \"normalize\",\n            value: function normalize() {\n                var invLen = 1 / gl_matrix__WEBPACK_IMPORTED_MODULE_16__.len(this.normal);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.scale(this.normal, this.normal, invLen);\n                this.distance *= invLen;\n            }\n        },\n        {\n            key: \"intersectsLine\",\n            value: function intersectsLine(start, end, point) {\n                var d0 = this.distanceToPoint(start);\n                var d1 = this.distanceToPoint(end);\n                var t = d0 / (d0 - d1);\n                var intersects = t >= 0 && t <= 1;\n                if (intersects && point) {\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_16__.lerp(point, start, end, t);\n                }\n                return intersects;\n            }\n        }\n    ]);\n}();\nvar Mask = /*#__PURE__*/ function(Mask) {\n    Mask[Mask[\"OUTSIDE\"] = 4294967295] = \"OUTSIDE\";\n    Mask[Mask[\"INSIDE\"] = 0] = \"INSIDE\";\n    Mask[Mask[\"INDETERMINATE\"] = 2147483647] = \"INDETERMINATE\";\n    return Mask;\n}({});\nvar Frustum = /*#__PURE__*/ function() {\n    function Frustum(planes) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Frustum);\n        this.planes = [];\n        if (planes) {\n            this.planes = planes;\n        } else {\n            for(var i = 0; i < 6; i++){\n                this.planes.push(new Plane());\n            }\n        }\n    }\n    /**\n   * extract 6 planes from projectionMatrix\n   * @see http://www8.cs.umu.se/kurser/5DV051/HT12/lab/plane_extraction.pdf\n   */ return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Frustum, [\n        {\n            key: \"extractFromVPMatrix\",\n            value: function extractFromVPMatrix(projectionMatrix) {\n                // @ts-ignore\n                var _projectionMatrix = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(projectionMatrix, 16), m0 = _projectionMatrix[0], m1 = _projectionMatrix[1], m2 = _projectionMatrix[2], m3 = _projectionMatrix[3], m4 = _projectionMatrix[4], m5 = _projectionMatrix[5], m6 = _projectionMatrix[6], m7 = _projectionMatrix[7], m8 = _projectionMatrix[8], m9 = _projectionMatrix[9], m10 = _projectionMatrix[10], m11 = _projectionMatrix[11], m12 = _projectionMatrix[12], m13 = _projectionMatrix[13], m14 = _projectionMatrix[14], m15 = _projectionMatrix[15];\n                // right\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.set(this.planes[0].normal, m3 - m0, m7 - m4, m11 - m8);\n                this.planes[0].distance = m15 - m12;\n                // left\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.set(this.planes[1].normal, m3 + m0, m7 + m4, m11 + m8);\n                this.planes[1].distance = m15 + m12;\n                // bottom\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.set(this.planes[2].normal, m3 + m1, m7 + m5, m11 + m9);\n                this.planes[2].distance = m15 + m13;\n                // top\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.set(this.planes[3].normal, m3 - m1, m7 - m5, m11 - m9);\n                this.planes[3].distance = m15 - m13;\n                // far\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.set(this.planes[4].normal, m3 - m2, m7 - m6, m11 - m10);\n                this.planes[4].distance = m15 - m14;\n                // near\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.set(this.planes[5].normal, m3 + m2, m7 + m6, m11 + m10);\n                this.planes[5].distance = m15 + m14;\n                this.planes.forEach(function(plane) {\n                    plane.normalize();\n                    plane.updatePNVertexFlag();\n                });\n            }\n        }\n    ]);\n}();\nvar Point = /*#__PURE__*/ function() {\n    function Point() {\n        var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Point);\n        this.x = 0;\n        this.y = 0;\n        this.x = x;\n        this.y = y;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Point, [\n        {\n            key: \"clone\",\n            value: function clone() {\n                return new Point(this.x, this.y);\n            }\n        },\n        {\n            key: \"copyFrom\",\n            value: function copyFrom(p) {\n                this.x = p.x;\n                this.y = p.y;\n            }\n        }\n    ]);\n}();\nvar Rectangle = /*#__PURE__*/ function() {\n    function Rectangle(x, y, width, height) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Rectangle);\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.left = x;\n        this.right = x + width;\n        this.top = y;\n        this.bottom = y + height;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Rectangle, [\n        {\n            key: \"toJSON\",\n            value: function toJSON() {}\n        }\n    ], [\n        {\n            key: \"fromRect\",\n            value: /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMRect/fromRect_static\n     */ function fromRect(rect) {\n                return new Rectangle(rect.x, rect.y, rect.width, rect.height);\n            }\n        },\n        {\n            key: \"applyTransform\",\n            value: function applyTransform(rect, matrix) {\n                var topLeft = gl_matrix__WEBPACK_IMPORTED_MODULE_17__.fromValues(rect.x, rect.y, 0, 1);\n                var topRight = gl_matrix__WEBPACK_IMPORTED_MODULE_17__.fromValues(rect.x + rect.width, rect.y, 0, 1);\n                var bottomLeft = gl_matrix__WEBPACK_IMPORTED_MODULE_17__.fromValues(rect.x, rect.y + rect.height, 0, 1);\n                var bottomRight = gl_matrix__WEBPACK_IMPORTED_MODULE_17__.fromValues(rect.x + rect.width, rect.y + rect.height, 0, 1);\n                var transformedTopLeft = gl_matrix__WEBPACK_IMPORTED_MODULE_17__.create();\n                var transformedTopRight = gl_matrix__WEBPACK_IMPORTED_MODULE_17__.create();\n                var transformedBottomLeft = gl_matrix__WEBPACK_IMPORTED_MODULE_17__.create();\n                var transformedBottomRight = gl_matrix__WEBPACK_IMPORTED_MODULE_17__.create();\n                gl_matrix__WEBPACK_IMPORTED_MODULE_17__.transformMat4(transformedTopLeft, topLeft, matrix);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_17__.transformMat4(transformedTopRight, topRight, matrix);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_17__.transformMat4(transformedBottomLeft, bottomLeft, matrix);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_17__.transformMat4(transformedBottomRight, bottomRight, matrix);\n                var minX = Math.min(transformedTopLeft[0], transformedTopRight[0], transformedBottomLeft[0], transformedBottomRight[0]);\n                var minY = Math.min(transformedTopLeft[1], transformedTopRight[1], transformedBottomLeft[1], transformedBottomRight[1]);\n                var maxX = Math.max(transformedTopLeft[0], transformedTopRight[0], transformedBottomLeft[0], transformedBottomRight[0]);\n                var maxY = Math.max(transformedTopLeft[1], transformedTopRight[1], transformedBottomLeft[1], transformedBottomRight[1]);\n                return Rectangle.fromRect({\n                    x: minX,\n                    y: minY,\n                    width: maxX - minX,\n                    height: maxY - minY\n                });\n            }\n        }\n    ]);\n}();\nvar ERROR_MSG_METHOD_NOT_IMPLEMENTED = \"Method not implemented.\";\nvar ERROR_MSG_USE_DOCUMENT_ELEMENT = \"Use document.documentElement instead.\";\nvar ERROR_MSG_APPEND_DESTROYED_ELEMENT = \"Cannot append a destroyed element.\";\nfunction getAngle(angle) {\n    if (angle === undefined) {\n        return 0;\n    }\n    if (angle > 360 || angle < -360) {\n        return angle % 360;\n    }\n    return angle;\n}\nvar $vec3$2 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create();\nfunction createVec3(x) {\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var clone = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    if (Array.isArray(x) && x.length === 3) {\n        return clone ? gl_matrix__WEBPACK_IMPORTED_MODULE_16__.clone(x) : gl_matrix__WEBPACK_IMPORTED_MODULE_16__.copy($vec3$2, x);\n    }\n    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(x)) {\n        return clone ? gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(x, y, z) : gl_matrix__WEBPACK_IMPORTED_MODULE_16__.set($vec3$2, x, y, z);\n    }\n    return clone ? gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(x[0], x[1] || y, x[2] || z) : gl_matrix__WEBPACK_IMPORTED_MODULE_16__.set($vec3$2, x[0], x[1] || y, x[2] || z);\n}\nvar DEG_RAD = Math.PI / 180;\nfunction deg2rad(deg) {\n    return deg * DEG_RAD;\n}\nvar RAD_DEG = 180 / Math.PI;\nfunction rad2deg(rad) {\n    return rad * RAD_DEG;\n}\nvar GRAD_DEG = 0.9; // 360 / 400;\nfunction grad2deg(grads) {\n    grads %= 400;\n    if (grads < 0) {\n        grads += 400;\n    }\n    return grads * GRAD_DEG;\n}\nfunction deg2turn(deg) {\n    return deg / 360;\n}\nfunction turn2deg(turn) {\n    return 360 * turn;\n}\nvar HALF_PI = Math.PI / 2;\nfunction getEulerFromQuat(out, quat) {\n    var x = quat[0];\n    var y = quat[1];\n    var z = quat[2];\n    var w = quat[3];\n    var x2 = x * x;\n    var y2 = y * y;\n    var z2 = z * z;\n    var w2 = w * w;\n    var unit = x2 + y2 + z2 + w2;\n    var test = x * w - y * z;\n    if (test > 0.499995 * unit) {\n        // TODO: Use glmatrix.EPSILON\n        // singularity at the north pole\n        out[0] = HALF_PI;\n        out[1] = 2 * Math.atan2(y, x);\n        out[2] = 0;\n    } else if (test < -0.499995 * unit) {\n        // TODO: Use glmatrix.EPSILON\n        // singularity at the south pole\n        out[0] = -HALF_PI;\n        out[1] = 2 * Math.atan2(y, x);\n        out[2] = 0;\n    } else {\n        out[0] = Math.asin(2 * (x * z - w * y));\n        out[1] = Math.atan2(2 * (x * w + y * z), 1 - 2 * (z2 + w2));\n        out[2] = Math.atan2(2 * (x * y + z * w), 1 - 2 * (y2 + z2));\n    }\n    // TODO: Return them as degrees and not as radians\n    return out;\n}\nfunction getEulerFromMat4(out, m) {\n    var x;\n    var z;\n    var _mat4$getScaling = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.getScaling(gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create(), m), _mat4$getScaling2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_mat4$getScaling, 3), sx = _mat4$getScaling2[0], sy = _mat4$getScaling2[1], sz = _mat4$getScaling2[2];\n    var y = Math.asin(-m[2] / sx);\n    if (y < HALF_PI) {\n        if (y > -HALF_PI) {\n            x = Math.atan2(m[6] / sy, m[10] / sz);\n            z = Math.atan2(m[1] / sx, m[0] / sx);\n        } else {\n            // Not a unique solution\n            z = 0;\n            x = -Math.atan2(m[4] / sy, m[5] / sy);\n        }\n    } else {\n        // Not a unique solution\n        z = 0;\n        x = Math.atan2(m[4] / sy, m[5] / sy);\n    }\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n/**\n * @see https://github.com/toji/gl-matrix/issues/329\n * @see https://doc.babylonjs.com/divingDeeper/mesh/transforms/center_origin/rotation_conventions\n */ function getEuler(out, quat) {\n    if (quat.length === 16) {\n        return getEulerFromMat4(out, quat);\n    }\n    return getEulerFromQuat(out, quat);\n}\nfunction fromRotationTranslationScale(rotation, x, y, scaleX, scaleY) {\n    var cos = Math.cos(rotation);\n    var sin = Math.sin(rotation);\n    return gl_matrix__WEBPACK_IMPORTED_MODULE_20__.fromValues(scaleX * cos, scaleY * sin, 0, -scaleX * sin, scaleY * cos, 0, x, y, 1);\n}\nfunction makePerspective(out, left, right, top, bottom, near, far) {\n    var zero = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n    var twoNear = 2 * near;\n    var rightMinusLeft = right - left;\n    var topMinusBottom = top - bottom;\n    var x = twoNear / rightMinusLeft;\n    var y = twoNear / topMinusBottom;\n    var a = (right + left) / rightMinusLeft;\n    var b = (top + bottom) / topMinusBottom;\n    var c;\n    var d;\n    var farMinusNear = far - near;\n    var farMulNear = far * near;\n    if (zero) {\n        c = -far / farMinusNear;\n        d = -farMulNear / farMinusNear;\n    } else {\n        c = -(far + near) / farMinusNear;\n        d = -2 * farMulNear / farMinusNear;\n    }\n    out[0] = x;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = y;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = a;\n    out[9] = b;\n    out[10] = c;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = d;\n    out[15] = 0;\n    return out;\n}\nfunction decompose(mat) {\n    var row0x = mat[0];\n    var row0y = mat[1];\n    var row1x = mat[3];\n    var row1y = mat[4];\n    // decompose 3x3 matrix\n    // @see https://www.w3.org/TR/css-transforms-1/#decomposing-a-2d-matrix\n    var scalingX = Math.sqrt(row0x * row0x + row0y * row0y);\n    var scalingY = Math.sqrt(row1x * row1x + row1y * row1y);\n    // If determinant is negative, one axis was flipped.\n    var determinant = row0x * row1y - row0y * row1x;\n    if (determinant < 0) {\n        // Flip axis with minimum unit vector dot product.\n        if (row0x < row1y) {\n            scalingX = -scalingX;\n        } else {\n            scalingY = -scalingY;\n        }\n    }\n    // Renormalize matrix to remove scale.\n    if (scalingX) {\n        var invScalingX = 1 / scalingX;\n        row0x *= invScalingX;\n        row0y *= invScalingX;\n    }\n    if (scalingY) {\n        var invScalingY = 1 / scalingY;\n        row1x *= invScalingY;\n        row1y *= invScalingY;\n    }\n    // Compute rotation and renormalize matrix.\n    var rotation = Math.atan2(row0y, row0x);\n    var angle = rad2deg(rotation);\n    return [\n        mat[6],\n        mat[7],\n        scalingX,\n        scalingY,\n        angle\n    ];\n}\nvar tmp = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create();\nvar perspectiveMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create();\nvar tmpVec4 = gl_matrix__WEBPACK_IMPORTED_MODULE_17__.create();\nvar row = [\n    gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create(),\n    gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create(),\n    gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create()\n];\nvar pdum3 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create();\n/*\nInput:  matrix      ; a 4x4 matrix\nOutput: translation ; a 3 component vector\n        scale       ; a 3 component vector\n        skew        ; skew factors XY,XZ,YZ represented as a 3 component vector\n        perspective ; a 4 component vector\n        quaternion  ; a 4 component vector\nReturns false if the matrix cannot be decomposed, true if it can\n\n\nReferences:\nhttps://github.com/kamicane/matrix3d/blob/master/lib/Matrix3d.js\nhttps://github.com/ChromiumWebApps/chromium/blob/master/ui/gfx/transform_util.cc\nhttp://www.w3.org/TR/css3-transforms/#decomposing-a-3d-matrix\n*/ function decomposeMat4(matrix, translation, scale, skew, perspective, quaternion) {\n    // normalize, if not possible then bail out early\n    if (!normalize(tmp, matrix)) return false;\n    // perspectiveMatrix is used to solve for perspective, but it also provides\n    // an easy way to test for singularity of the upper 3x3 component.\n    gl_matrix__WEBPACK_IMPORTED_MODULE_19__.copy(perspectiveMatrix, tmp);\n    perspectiveMatrix[3] = 0;\n    perspectiveMatrix[7] = 0;\n    perspectiveMatrix[11] = 0;\n    perspectiveMatrix[15] = 1;\n    // If the perspectiveMatrix is not invertible, we are also unable to\n    // decompose, so we'll bail early. Constant taken from SkMatrix44::invert.\n    if (Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_19__.determinant(perspectiveMatrix)) < 1e-8) return false;\n    var a03 = tmp[3];\n    var a13 = tmp[7];\n    var a23 = tmp[11];\n    var a30 = tmp[12];\n    var a31 = tmp[13];\n    var a32 = tmp[14];\n    var a33 = tmp[15];\n    // First, isolate perspective.\n    if (a03 !== 0 || a13 !== 0 || a23 !== 0) {\n        tmpVec4[0] = a03;\n        tmpVec4[1] = a13;\n        tmpVec4[2] = a23;\n        tmpVec4[3] = a33;\n        // Solve the equation by inverting perspectiveMatrix and multiplying\n        // rightHandSide by the inverse.\n        // resuing the perspectiveMatrix here since it's no longer needed\n        var ret = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.invert(perspectiveMatrix, perspectiveMatrix);\n        if (!ret) return false;\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.transpose(perspectiveMatrix, perspectiveMatrix);\n        // multiply by transposed inverse perspective matrix, into perspective vec4\n        gl_matrix__WEBPACK_IMPORTED_MODULE_17__.transformMat4(perspective, tmpVec4, perspectiveMatrix);\n    } else {\n        // no perspective\n        perspective[0] = perspective[1] = perspective[2] = 0;\n        perspective[3] = 1;\n    }\n    // Next take care of translation\n    translation[0] = a30;\n    translation[1] = a31;\n    translation[2] = a32;\n    // Now get scale and shear. 'row' is a 3 element array of 3 component vectors\n    mat3from4(row, tmp);\n    // Compute X scale factor and normalize first row.\n    scale[0] = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.length(row[0]);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_16__.normalize(row[0], row[0]);\n    // Compute XY shear factor and make 2nd row orthogonal to 1st.\n    skew[0] = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.dot(row[0], row[1]);\n    combine(row[1], row[1], row[0], 1.0, -skew[0]);\n    // Now, compute Y scale and normalize 2nd row.\n    scale[1] = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.length(row[1]);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_16__.normalize(row[1], row[1]);\n    skew[0] /= scale[1];\n    // Compute XZ and YZ shears, orthogonalize 3rd row\n    skew[1] = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.dot(row[0], row[2]);\n    combine(row[2], row[2], row[0], 1.0, -skew[1]);\n    skew[2] = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.dot(row[1], row[2]);\n    combine(row[2], row[2], row[1], 1.0, -skew[2]);\n    // Next, get Z scale and normalize 3rd row.\n    scale[2] = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.length(row[2]);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_16__.normalize(row[2], row[2]);\n    skew[1] /= scale[2];\n    skew[2] /= scale[2];\n    // At this point, the matrix (in rows) is orthonormal.\n    // Check for a coordinate system flip.  If the determinant\n    // is -1, then negate the matrix and the scaling factors.\n    gl_matrix__WEBPACK_IMPORTED_MODULE_16__.cross(pdum3, row[1], row[2]);\n    if (gl_matrix__WEBPACK_IMPORTED_MODULE_16__.dot(row[0], pdum3) < 0) {\n        for(var i = 0; i < 3; i++){\n            scale[i] *= -1;\n            row[i][0] *= -1;\n            row[i][1] *= -1;\n            row[i][2] *= -1;\n        }\n    }\n    // Now, get the rotations out\n    quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));\n    quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));\n    quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));\n    quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));\n    if (row[2][1] > row[1][2]) quaternion[0] = -quaternion[0];\n    if (row[0][2] > row[2][0]) quaternion[1] = -quaternion[1];\n    if (row[1][0] > row[0][1]) quaternion[2] = -quaternion[2];\n    return true;\n}\nfunction normalize(out, mat) {\n    var m44 = mat[15];\n    // Cannot normalize.\n    if (m44 === 0) return false;\n    var scale = 1 / m44;\n    for(var i = 0; i < 16; i++)out[i] = mat[i] * scale;\n    return true;\n}\n// gets upper-left of a 4x4 matrix into a 3x3 of vectors\nfunction mat3from4(out, mat4x4) {\n    out[0][0] = mat4x4[0];\n    out[0][1] = mat4x4[1];\n    out[0][2] = mat4x4[2];\n    out[1][0] = mat4x4[4];\n    out[1][1] = mat4x4[5];\n    out[1][2] = mat4x4[6];\n    out[2][0] = mat4x4[8];\n    out[2][1] = mat4x4[9];\n    out[2][2] = mat4x4[10];\n}\nfunction combine(out, a, b, scale1, scale2) {\n    out[0] = a[0] * scale1 + b[0] * scale2;\n    out[1] = a[1] * scale1 + b[1] * scale2;\n    out[2] = a[2] * scale1 + b[2] * scale2;\n}\n/**\n * Different type of cameras, eg. simple camera used in 2D scene or\n * advanced camera which can do actions & switch between landmarks.\n */ var CameraType = /*#__PURE__*/ function(CameraType) {\n    /**\n   * Performs all the rotational operations with the focal point instead of the camera position.\n   * This type of camera is useful in applications(like CAD) where 3D objects are being designed or explored.\n   * Camera cannot orbits over the north & south poles.\n   * @see http://voxelent.com/tutorial-cameras/\n   *\n   * In Three.js it's used in OrbitControls.\n   * @see https://threejs.org/docs/#examples/zh/controls/OrbitControls\n   */ CameraType[CameraType[\"ORBITING\"] = 0] = \"ORBITING\";\n    /**\n   * It's similar to the ORBITING camera, but it allows the camera to orbit over the north or south poles.\n   *\n   * In Three.js it's used in OrbitControls.\n   * @see https://threejs.org/docs/#examples/en/controls/TrackballControls\n   */ CameraType[CameraType[\"EXPLORING\"] = 1] = \"EXPLORING\";\n    /**\n   * Performs all the rotational operations with the camera position.\n   * It's useful in first person shooting games.\n   * Camera cannot orbits over the north & south poles.\n   *\n   * In Three.js it's used in FirstPersonControls.\n   * @see https://threejs.org/docs/#examples/en/controls/FirstPersonControls\n   */ CameraType[CameraType[\"TRACKING\"] = 2] = \"TRACKING\";\n    return CameraType;\n}({});\n/**\n * CameraType must be TRACKING\n */ var CameraTrackingMode = /*#__PURE__*/ function(CameraTrackingMode) {\n    CameraTrackingMode[CameraTrackingMode[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    CameraTrackingMode[CameraTrackingMode[\"ROTATIONAL\"] = 1] = \"ROTATIONAL\";\n    CameraTrackingMode[CameraTrackingMode[\"TRANSLATIONAL\"] = 2] = \"TRANSLATIONAL\";\n    CameraTrackingMode[CameraTrackingMode[\"CINEMATIC\"] = 3] = \"CINEMATIC\";\n    return CameraTrackingMode;\n}({});\nvar CameraProjectionMode = /*#__PURE__*/ function(CameraProjectionMode) {\n    CameraProjectionMode[CameraProjectionMode[\"ORTHOGRAPHIC\"] = 0] = \"ORTHOGRAPHIC\";\n    CameraProjectionMode[CameraProjectionMode[\"PERSPECTIVE\"] = 1] = \"PERSPECTIVE\";\n    return CameraProjectionMode;\n}({});\nvar CameraEvent = {\n    UPDATED: \"updated\"\n};\nvar MIN_DISTANCE = 0.0002;\n/**\n * 参考「WebGL Insights - 23.Designing Cameras for WebGL Applications」，基于 Responsible Camera 思路设计\n * @see https://github.com/d13g0/nucleo.js/blob/master/source/camera/Camera.js\n *\n * 保存相机参数，定义相机动作：\n * 1. dolly 沿 n 轴移动\n * 2. pan 沿 u v 轴移动\n * 3. rotate 以方位角旋转\n * 4. 移动到 Landmark，具有平滑的动画效果，其间禁止其他用户交互\n */ var Camera = /*#__PURE__*/ function() {\n    function Camera() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Camera);\n        /**\n     * Clip space near Z, default to range `[-1, 1]`\n     */ this.clipSpaceNearZ = ClipSpaceNearZ.NEGATIVE_ONE;\n        this.eventEmitter = new eventemitter3__WEBPACK_IMPORTED_MODULE_7__[\"default\"]();\n        /**\n     * Matrix of camera\n     */ this.matrix = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create();\n        /**\n     * u axis +X is right\n     * @see http://learnwebgl.brown37.net/07_cameras/camera_introduction.html#a-camera-definition\n     */ this.right = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(1, 0, 0);\n        /**\n     * v axis +Y is up\n     */ this.up = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(0, 1, 0);\n        /**\n     * n axis +Z is inside\n     */ this.forward = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(0, 0, 1);\n        /**\n     * Position of camera.\n     */ this.position = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(0, 0, 1);\n        /**\n     * Position of focal point.\n     */ this.focalPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(0, 0, 0);\n        /**\n     * vector from focalPoint to position\n     */ this.distanceVector = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(0, 0, -1);\n        /**\n     * length(focalPoint - position)\n     */ this.distance = 1;\n        /**\n     * @see https://en.wikipedia.org/wiki/Azimuth\n     */ this.azimuth = 0;\n        this.elevation = 0;\n        this.roll = 0;\n        this.relAzimuth = 0;\n        this.relElevation = 0;\n        this.relRoll = 0;\n        /**\n     * 沿 n 轴移动时，保证移动速度从快到慢\n     */ this.dollyingStep = 0;\n        this.maxDistance = Infinity;\n        this.minDistance = -Infinity;\n        /**\n     * zoom factor of the camera, default is 1\n     * eg. https://threejs.org/docs/#api/en/cameras/OrthographicCamera.zoom\n     */ this.zoom = 1;\n        /**\n     * invert the horizontal coordinate system HCS\n     */ this.rotateWorld = false;\n        /**\n     * 投影矩阵参数\n     */ /**\n     * field of view [0-360]\n     * @see http://en.wikipedia.org/wiki/Angle_of_view\n     */ this.fov = 30;\n        this.near = 0.1;\n        this.far = 1000;\n        this.aspect = 1;\n        this.projectionMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create();\n        this.projectionMatrixInverse = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create();\n        this.jitteredProjectionMatrix = undefined;\n        this.enableUpdate = true;\n        // protected following = undefined;\n        this.type = CameraType.EXPLORING;\n        this.trackingMode = CameraTrackingMode.DEFAULT;\n        this.projectionMode = CameraProjectionMode.PERSPECTIVE;\n        /**\n     * for culling use\n     */ this.frustum = new Frustum();\n        /**\n     * ortho matrix for Canvas2D & SVG\n     */ this.orthoMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create();\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Camera, [\n        {\n            key: \"isOrtho\",\n            value: // constructor(type = CameraType.EXPLORING, trackingMode = CameraTrackingMode.DEFAULT) {\n            //   this.setType(type, trackingMode);\n            // }\n            function isOrtho() {\n                return this.projectionMode === CameraProjectionMode.ORTHOGRAPHIC;\n            }\n        },\n        {\n            key: \"getProjectionMode\",\n            value: function getProjectionMode() {\n                return this.projectionMode;\n            }\n        },\n        {\n            key: \"getPerspective\",\n            value: function getPerspective() {\n                // account for TAA\n                return this.jitteredProjectionMatrix || this.projectionMatrix;\n            }\n        },\n        {\n            key: \"getPerspectiveInverse\",\n            value: function getPerspectiveInverse() {\n                return this.projectionMatrixInverse;\n            }\n        },\n        {\n            key: \"getFrustum\",\n            value: function getFrustum() {\n                return this.frustum;\n            }\n        },\n        {\n            key: \"getPosition\",\n            value: function getPosition() {\n                return this.position;\n            }\n        },\n        {\n            key: \"getFocalPoint\",\n            value: function getFocalPoint() {\n                return this.focalPoint;\n            }\n        },\n        {\n            key: \"getDollyingStep\",\n            value: function getDollyingStep() {\n                return this.dollyingStep;\n            }\n        },\n        {\n            key: \"getNear\",\n            value: function getNear() {\n                return this.near;\n            }\n        },\n        {\n            key: \"getFar\",\n            value: function getFar() {\n                return this.far;\n            }\n        },\n        {\n            key: \"getZoom\",\n            value: function getZoom() {\n                return this.zoom;\n            }\n        },\n        {\n            key: \"getOrthoMatrix\",\n            value: function getOrthoMatrix() {\n                return this.orthoMatrix;\n            }\n        },\n        {\n            key: \"getView\",\n            value: function getView() {\n                return this.view;\n            }\n        },\n        {\n            key: \"setEnableUpdate\",\n            value: function setEnableUpdate(enabled) {\n                this.enableUpdate = enabled;\n            }\n        },\n        {\n            key: \"setType\",\n            value: function setType(type, trackingMode) {\n                this.type = type;\n                if (this.type === CameraType.EXPLORING) {\n                    this.setWorldRotation(true);\n                } else {\n                    this.setWorldRotation(false);\n                }\n                this._getAngles();\n                if (this.type === CameraType.TRACKING && trackingMode !== undefined) {\n                    this.setTrackingMode(trackingMode);\n                }\n                return this;\n            }\n        },\n        {\n            key: \"setProjectionMode\",\n            value: function setProjectionMode(projectionMode) {\n                this.projectionMode = projectionMode;\n                return this;\n            }\n        },\n        {\n            key: \"setTrackingMode\",\n            value: function setTrackingMode(trackingMode) {\n                if (this.type !== CameraType.TRACKING) {\n                    throw new Error(\"Impossible to set a tracking mode if the camera is not of tracking type\");\n                }\n                this.trackingMode = trackingMode;\n                return this;\n            }\n        },\n        {\n            key: \"setWorldRotation\",\n            value: function setWorldRotation(flag) {\n                this.rotateWorld = flag;\n                this._getAngles();\n                return this;\n            }\n        },\n        {\n            key: \"getViewTransform\",\n            value: function getViewTransform() {\n                // mat4.scale(this.matrix, this.matrix, vec3.fromValues(1, -1, 1));\n                return gl_matrix__WEBPACK_IMPORTED_MODULE_19__.invert(gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create(), this.matrix);\n            }\n        },\n        {\n            key: \"getWorldTransform\",\n            value: function getWorldTransform() {\n                return this.matrix;\n            }\n        },\n        {\n            key: \"jitterProjectionMatrix\",\n            value: function jitterProjectionMatrix(x, y) {\n                var translation = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromTranslation(gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create(), [\n                    x,\n                    y,\n                    0\n                ]);\n                this.jitteredProjectionMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.multiply(gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create(), translation, this.projectionMatrix);\n            }\n        },\n        {\n            key: \"clearJitterProjectionMatrix\",\n            value: function clearJitterProjectionMatrix() {\n                this.jitteredProjectionMatrix = undefined;\n            }\n        },\n        {\n            key: \"setMatrix\",\n            value: function setMatrix(matrix) {\n                this.matrix = matrix;\n                this._update();\n                return this;\n            }\n        },\n        {\n            key: \"setProjectionMatrix\",\n            value: function setProjectionMatrix(matrix) {\n                this.projectionMatrix = matrix;\n            }\n        },\n        {\n            key: \"setFov\",\n            value: function setFov(fov) {\n                this.setPerspective(this.near, this.far, fov, this.aspect);\n                return this;\n            }\n        },\n        {\n            key: \"setAspect\",\n            value: function setAspect(aspect) {\n                this.setPerspective(this.near, this.far, this.fov, aspect);\n                return this;\n            }\n        },\n        {\n            key: \"setNear\",\n            value: function setNear(near) {\n                if (this.projectionMode === CameraProjectionMode.PERSPECTIVE) {\n                    this.setPerspective(near, this.far, this.fov, this.aspect);\n                } else {\n                    this.setOrthographic(this.left, this.rright, this.top, this.bottom, near, this.far);\n                }\n                return this;\n            }\n        },\n        {\n            key: \"setFar\",\n            value: function setFar(far) {\n                if (this.projectionMode === CameraProjectionMode.PERSPECTIVE) {\n                    this.setPerspective(this.near, far, this.fov, this.aspect);\n                } else {\n                    this.setOrthographic(this.left, this.rright, this.top, this.bottom, this.near, far);\n                }\n                return this;\n            }\n        },\n        {\n            key: \"setViewOffset\",\n            value: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n                this.aspect = fullWidth / fullHeight;\n                if (this.view === undefined) {\n                    this.view = {\n                        enabled: true,\n                        fullWidth: 1,\n                        fullHeight: 1,\n                        offsetX: 0,\n                        offsetY: 0,\n                        width: 1,\n                        height: 1\n                    };\n                }\n                this.view.enabled = true;\n                this.view.fullWidth = fullWidth;\n                this.view.fullHeight = fullHeight;\n                this.view.offsetX = x;\n                this.view.offsetY = y;\n                this.view.width = width;\n                this.view.height = height;\n                if (this.projectionMode === CameraProjectionMode.PERSPECTIVE) {\n                    this.setPerspective(this.near, this.far, this.fov, this.aspect);\n                } else {\n                    this.setOrthographic(this.left, this.rright, this.top, this.bottom, this.near, this.far);\n                }\n                return this;\n            }\n        },\n        {\n            key: \"clearViewOffset\",\n            value: function clearViewOffset() {\n                if (this.view !== undefined) {\n                    this.view.enabled = false;\n                }\n                if (this.projectionMode === CameraProjectionMode.PERSPECTIVE) {\n                    this.setPerspective(this.near, this.far, this.fov, this.aspect);\n                } else {\n                    this.setOrthographic(this.left, this.rright, this.top, this.bottom, this.near, this.far);\n                }\n                return this;\n            }\n        },\n        {\n            key: \"setZoom\",\n            value: function setZoom(zoom) {\n                this.zoom = zoom;\n                if (this.projectionMode === CameraProjectionMode.ORTHOGRAPHIC) {\n                    this.setOrthographic(this.left, this.rright, this.top, this.bottom, this.near, this.far);\n                } else if (this.projectionMode === CameraProjectionMode.PERSPECTIVE) {\n                    this.setPerspective(this.near, this.far, this.fov, this.aspect);\n                }\n                return this;\n            }\n        },\n        {\n            key: \"setZoomByViewportPoint\",\n            value: function setZoomByViewportPoint(zoom, viewportPoint) {\n                var _this$canvas$viewport = this.canvas.viewport2Canvas({\n                    x: viewportPoint[0],\n                    y: viewportPoint[1]\n                }), ox = _this$canvas$viewport.x, oy = _this$canvas$viewport.y;\n                var roll = this.roll;\n                this.rotate(0, 0, -roll);\n                this.setPosition(ox, oy);\n                this.setFocalPoint(ox, oy);\n                this.setZoom(zoom);\n                this.rotate(0, 0, roll);\n                var _this$canvas$viewport2 = this.canvas.viewport2Canvas({\n                    x: viewportPoint[0],\n                    y: viewportPoint[1]\n                }), cx = _this$canvas$viewport2.x, cy = _this$canvas$viewport2.y;\n                // project to rotated axis\n                var dvec = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(cx - ox, cy - oy, 0);\n                var dx = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.dot(dvec, this.right) / gl_matrix__WEBPACK_IMPORTED_MODULE_16__.length(this.right);\n                var dy = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.dot(dvec, this.up) / gl_matrix__WEBPACK_IMPORTED_MODULE_16__.length(this.up);\n                var _this$getPosition = this.getPosition(), _this$getPosition2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_this$getPosition, 2), px = _this$getPosition2[0], py = _this$getPosition2[1];\n                var _this$getFocalPoint = this.getFocalPoint(), _this$getFocalPoint2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_this$getFocalPoint, 2), fx = _this$getFocalPoint2[0], fy = _this$getFocalPoint2[1];\n                this.setPosition(px - dx, py - dy);\n                this.setFocalPoint(fx - dx, fy - dy);\n                return this;\n            }\n        },\n        {\n            key: \"setPerspective\",\n            value: function setPerspective(near, far, fov, aspect) {\n                var _this$view;\n                this.projectionMode = CameraProjectionMode.PERSPECTIVE;\n                this.fov = fov;\n                this.near = near;\n                this.far = far;\n                this.aspect = aspect;\n                var top = this.near * Math.tan(deg2rad(0.5 * this.fov)) / this.zoom;\n                var height = 2 * top;\n                var width = this.aspect * height;\n                var left = -0.5 * width;\n                if ((_this$view = this.view) !== null && _this$view !== void 0 && _this$view.enabled) {\n                    var fullWidth = this.view.fullWidth;\n                    var fullHeight = this.view.fullHeight;\n                    left += this.view.offsetX * width / fullWidth;\n                    top -= this.view.offsetY * height / fullHeight;\n                    width *= this.view.width / fullWidth;\n                    height *= this.view.height / fullHeight;\n                }\n                makePerspective(this.projectionMatrix, left, left + width, top - height, top, near, this.far, this.clipSpaceNearZ === ClipSpaceNearZ.ZERO);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_19__.invert(this.projectionMatrixInverse, this.projectionMatrix);\n                this.triggerUpdate();\n                return this;\n            }\n        },\n        {\n            key: \"setOrthographic\",\n            value: function setOrthographic(l, r, t, b, near, far) {\n                var _this$view2;\n                this.projectionMode = CameraProjectionMode.ORTHOGRAPHIC;\n                this.rright = r;\n                this.left = l;\n                this.top = t;\n                this.bottom = b;\n                this.near = near;\n                this.far = far;\n                var dx = (this.rright - this.left) / (2 * this.zoom);\n                var dy = (this.top - this.bottom) / (2 * this.zoom);\n                var cx = (this.rright + this.left) / 2;\n                var cy = (this.top + this.bottom) / 2;\n                var left = cx - dx;\n                var right = cx + dx;\n                var top = cy + dy;\n                var bottom = cy - dy;\n                if ((_this$view2 = this.view) !== null && _this$view2 !== void 0 && _this$view2.enabled) {\n                    var scaleW = (this.rright - this.left) / this.view.fullWidth / this.zoom;\n                    var scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n                    left += scaleW * this.view.offsetX;\n                    right = left + scaleW * this.view.width;\n                    top -= scaleH * this.view.offsetY;\n                    bottom = top - scaleH * this.view.height;\n                }\n                if (this.clipSpaceNearZ === ClipSpaceNearZ.NEGATIVE_ONE) {\n                    // FlipY with switching bottom & top.\n                    // @see https://stackoverflow.com/a/4886656\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_19__.ortho(this.projectionMatrix, left, right, top, bottom, near, far);\n                } else {\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_19__.orthoZO(this.projectionMatrix, left, right, top, bottom, near, far);\n                }\n                gl_matrix__WEBPACK_IMPORTED_MODULE_19__.invert(this.projectionMatrixInverse, this.projectionMatrix);\n                this._getOrthoMatrix();\n                this.triggerUpdate();\n                return this;\n            }\n        },\n        {\n            key: \"setPosition\",\n            value: function setPosition(x) {\n                var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.position[1];\n                var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.position[2];\n                var position = createVec3(x, y, z);\n                this._setPosition(position);\n                this.setFocalPoint(this.focalPoint);\n                this.triggerUpdate();\n                return this;\n            }\n        },\n        {\n            key: \"setFocalPoint\",\n            value: function setFocalPoint(x) {\n                var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.focalPoint[1];\n                var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.focalPoint[2];\n                var up = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(0, 1, 0);\n                this.focalPoint = createVec3(x, y, z);\n                if (this.trackingMode === CameraTrackingMode.CINEMATIC) {\n                    var d = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.subtract(gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create(), this.focalPoint, this.position);\n                    x = d[0];\n                    y = d[1];\n                    z = d[2];\n                    var r = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.length(d);\n                    var el = rad2deg(Math.asin(y / r));\n                    var az = 90 + rad2deg(Math.atan2(z, x));\n                    var m = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create();\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_19__.rotateY(m, m, deg2rad(az));\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_19__.rotateX(m, m, deg2rad(el));\n                    up = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create(), [\n                        0,\n                        1,\n                        0\n                    ], m);\n                }\n                gl_matrix__WEBPACK_IMPORTED_MODULE_19__.invert(this.matrix, gl_matrix__WEBPACK_IMPORTED_MODULE_19__.lookAt(gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create(), this.position, this.focalPoint, up));\n                this._getAxes();\n                this._getDistance();\n                this._getAngles();\n                this.triggerUpdate();\n                return this;\n            }\n        },\n        {\n            key: \"getDistance\",\n            value: function getDistance() {\n                return this.distance;\n            }\n        },\n        {\n            key: \"getDistanceVector\",\n            value: function getDistanceVector() {\n                return this.distanceVector;\n            }\n        },\n        {\n            key: \"setDistance\",\n            value: function setDistance(d) {\n                if (this.distance === d || d < 0) {\n                    return this;\n                }\n                this.distance = d;\n                if (this.distance < MIN_DISTANCE) {\n                    this.distance = MIN_DISTANCE;\n                }\n                this.dollyingStep = this.distance / 100;\n                var pos = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create();\n                d = this.distance;\n                var n = this.forward;\n                var f = this.focalPoint;\n                pos[0] = d * n[0] + f[0];\n                pos[1] = d * n[1] + f[1];\n                pos[2] = d * n[2] + f[2];\n                this._setPosition(pos);\n                this.triggerUpdate();\n                return this;\n            }\n        },\n        {\n            key: \"setMaxDistance\",\n            value: function setMaxDistance(d) {\n                this.maxDistance = d;\n                return this;\n            }\n        },\n        {\n            key: \"setMinDistance\",\n            value: function setMinDistance(d) {\n                this.minDistance = d;\n                return this;\n            }\n        },\n        {\n            key: \"setAzimuth\",\n            value: function setAzimuth(az) {\n                this.azimuth = getAngle(az);\n                this.computeMatrix();\n                this._getAxes();\n                if (this.type === CameraType.ORBITING || this.type === CameraType.EXPLORING) {\n                    this._getPosition();\n                } else if (this.type === CameraType.TRACKING) {\n                    this._getFocalPoint();\n                }\n                this.triggerUpdate();\n                return this;\n            }\n        },\n        {\n            key: \"getAzimuth\",\n            value: function getAzimuth() {\n                return this.azimuth;\n            }\n        },\n        {\n            key: \"setElevation\",\n            value: function setElevation(el) {\n                this.elevation = getAngle(el);\n                this.computeMatrix();\n                this._getAxes();\n                if (this.type === CameraType.ORBITING || this.type === CameraType.EXPLORING) {\n                    this._getPosition();\n                } else if (this.type === CameraType.TRACKING) {\n                    this._getFocalPoint();\n                }\n                this.triggerUpdate();\n                return this;\n            }\n        },\n        {\n            key: \"getElevation\",\n            value: function getElevation() {\n                return this.elevation;\n            }\n        },\n        {\n            key: \"setRoll\",\n            value: function setRoll(angle) {\n                this.roll = getAngle(angle);\n                this.computeMatrix();\n                this._getAxes();\n                if (this.type === CameraType.ORBITING || this.type === CameraType.EXPLORING) {\n                    this._getPosition();\n                } else if (this.type === CameraType.TRACKING) {\n                    this._getFocalPoint();\n                }\n                this.triggerUpdate();\n                return this;\n            }\n        },\n        {\n            key: \"getRoll\",\n            value: function getRoll() {\n                return this.roll;\n            }\n        },\n        {\n            key: \"_update\",\n            value: function _update() {\n                this._getAxes();\n                this._getPosition();\n                this._getDistance();\n                this._getAngles();\n                this._getOrthoMatrix();\n                this.triggerUpdate();\n            }\n        },\n        {\n            key: \"computeMatrix\",\n            value: function computeMatrix() {\n                // 使用四元数描述 3D 旋转\n                // @see https://xiaoiver.github.io/coding/2018/12/28/Camera-%E8%AE%BE%E8%AE%A1-%E4%B8%80.html\n                var rotZ = gl_matrix__WEBPACK_IMPORTED_MODULE_21__.setAxisAngle(gl_matrix__WEBPACK_IMPORTED_MODULE_21__.create(), [\n                    0,\n                    0,\n                    1\n                ], deg2rad(this.roll));\n                gl_matrix__WEBPACK_IMPORTED_MODULE_19__.identity(this.matrix);\n                // only consider HCS for EXPLORING and ORBITING cameras\n                var rotX = gl_matrix__WEBPACK_IMPORTED_MODULE_21__.setAxisAngle(gl_matrix__WEBPACK_IMPORTED_MODULE_21__.create(), [\n                    1,\n                    0,\n                    0\n                ], deg2rad((this.rotateWorld && this.type !== CameraType.TRACKING || this.type === CameraType.TRACKING ? 1 : -1) * this.elevation));\n                var rotY = gl_matrix__WEBPACK_IMPORTED_MODULE_21__.setAxisAngle(gl_matrix__WEBPACK_IMPORTED_MODULE_21__.create(), [\n                    0,\n                    1,\n                    0\n                ], deg2rad((this.rotateWorld && this.type !== CameraType.TRACKING || this.type === CameraType.TRACKING ? 1 : -1) * this.azimuth));\n                var rotQ = gl_matrix__WEBPACK_IMPORTED_MODULE_21__.multiply(gl_matrix__WEBPACK_IMPORTED_MODULE_21__.create(), rotY, rotX);\n                rotQ = gl_matrix__WEBPACK_IMPORTED_MODULE_21__.multiply(gl_matrix__WEBPACK_IMPORTED_MODULE_21__.create(), rotQ, rotZ);\n                var rotMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromQuat(gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create(), rotQ);\n                if (this.type === CameraType.ORBITING || this.type === CameraType.EXPLORING) {\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_19__.translate(this.matrix, this.matrix, this.focalPoint);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_19__.multiply(this.matrix, this.matrix, rotMatrix);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_19__.translate(this.matrix, this.matrix, [\n                        0,\n                        0,\n                        this.distance\n                    ]);\n                } else if (this.type === CameraType.TRACKING) {\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_19__.translate(this.matrix, this.matrix, this.position);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_19__.multiply(this.matrix, this.matrix, rotMatrix);\n                }\n            }\n        },\n        {\n            key: \"_setPosition\",\n            value: function _setPosition(x, y, z) {\n                this.position = createVec3(x, y, z);\n                var m = this.matrix;\n                m[12] = this.position[0];\n                m[13] = this.position[1];\n                m[14] = this.position[2];\n                m[15] = 1;\n                this._getOrthoMatrix();\n            }\n        },\n        {\n            key: \"_getAxes\",\n            value: function _getAxes() {\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.copy(this.right, createVec3(gl_matrix__WEBPACK_IMPORTED_MODULE_17__.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_17__.create(), [\n                    1,\n                    0,\n                    0,\n                    0\n                ], this.matrix)));\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.copy(this.up, createVec3(gl_matrix__WEBPACK_IMPORTED_MODULE_17__.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_17__.create(), [\n                    0,\n                    1,\n                    0,\n                    0\n                ], this.matrix)));\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.copy(this.forward, createVec3(gl_matrix__WEBPACK_IMPORTED_MODULE_17__.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_17__.create(), [\n                    0,\n                    0,\n                    1,\n                    0\n                ], this.matrix)));\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.normalize(this.right, this.right);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.normalize(this.up, this.up);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.normalize(this.forward, this.forward);\n            }\n        },\n        {\n            key: \"_getAngles\",\n            value: function _getAngles() {\n                // Recalculates angles\n                var x = this.distanceVector[0];\n                var y = this.distanceVector[1];\n                var z = this.distanceVector[2];\n                var r = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.length(this.distanceVector);\n                // FAST FAIL: If there is no distance we cannot compute angles\n                if (r === 0) {\n                    this.elevation = 0;\n                    this.azimuth = 0;\n                    return;\n                }\n                if (this.type === CameraType.TRACKING) {\n                    this.elevation = rad2deg(Math.asin(y / r));\n                    this.azimuth = rad2deg(Math.atan2(-x, -z));\n                } else if (this.rotateWorld) {\n                    this.elevation = rad2deg(Math.asin(y / r));\n                    this.azimuth = rad2deg(Math.atan2(-x, -z));\n                } else {\n                    this.elevation = -rad2deg(Math.asin(y / r));\n                    this.azimuth = -rad2deg(Math.atan2(-x, -z));\n                }\n            }\n        },\n        {\n            key: \"_getPosition\",\n            value: function _getPosition() {\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.copy(this.position, createVec3(gl_matrix__WEBPACK_IMPORTED_MODULE_17__.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_17__.create(), [\n                    0,\n                    0,\n                    0,\n                    1\n                ], this.matrix)));\n                // 相机位置变化，需要重新计算视距\n                this._getDistance();\n            }\n        },\n        {\n            key: \"_getFocalPoint\",\n            value: function _getFocalPoint() {\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.transformMat3(this.distanceVector, [\n                    0,\n                    0,\n                    -this.distance\n                ], gl_matrix__WEBPACK_IMPORTED_MODULE_20__.fromMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_20__.create(), this.matrix));\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.add(this.focalPoint, this.position, this.distanceVector);\n                // 视点变化，需要重新计算视距\n                this._getDistance();\n            }\n        },\n        {\n            key: \"_getDistance\",\n            value: function _getDistance() {\n                this.distanceVector = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.subtract(gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create(), this.focalPoint, this.position);\n                this.distance = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.length(this.distanceVector);\n                this.dollyingStep = this.distance / 100;\n            }\n        },\n        {\n            key: \"_getOrthoMatrix\",\n            value: function _getOrthoMatrix() {\n                if (this.projectionMode !== CameraProjectionMode.ORTHOGRAPHIC) {\n                    return;\n                }\n                var position = this.position;\n                var rotZ = gl_matrix__WEBPACK_IMPORTED_MODULE_21__.setAxisAngle(gl_matrix__WEBPACK_IMPORTED_MODULE_21__.create(), [\n                    0,\n                    0,\n                    1\n                ], -this.roll * Math.PI / 180);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromRotationTranslationScaleOrigin(this.orthoMatrix, rotZ, gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues((this.rright - this.left) / 2 - position[0], (this.top - this.bottom) / 2 - position[1], 0), gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(this.zoom, this.zoom, 1), position);\n            }\n        },\n        {\n            key: \"triggerUpdate\",\n            value: function triggerUpdate() {\n                if (this.enableUpdate) {\n                    // update frustum\n                    var viewMatrix = this.getViewTransform();\n                    var vpMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.multiply(gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create(), this.getPerspective(), viewMatrix);\n                    this.getFrustum().extractFromVPMatrix(vpMatrix);\n                    this.eventEmitter.emit(CameraEvent.UPDATED);\n                }\n            }\n        },\n        {\n            key: \"rotate\",\n            value: function rotate(azimuth, elevation, roll) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"pan\",\n            value: function pan(tx, ty) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"dolly\",\n            value: function dolly(value) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"createLandmark\",\n            value: function createLandmark(name, params) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"gotoLandmark\",\n            value: function gotoLandmark(name, options) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"cancelLandmarkAnimation\",\n            value: function cancelLandmarkAnimation() {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        }\n    ]);\n}();\n/**\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#changing-mesh-culling-strategy\n */ var Strategy = /*#__PURE__*/ function(Strategy) {\n    Strategy[Strategy[\"Standard\"] = 0] = \"Standard\";\n    return Strategy;\n}({});\nvar SortReason = /*#__PURE__*/ function(SortReason) {\n    SortReason[SortReason[\"ADDED\"] = 0] = \"ADDED\";\n    SortReason[SortReason[\"REMOVED\"] = 1] = \"REMOVED\";\n    SortReason[SortReason[\"Z_INDEX_CHANGED\"] = 2] = \"Z_INDEX_CHANGED\";\n    return SortReason;\n}({});\nvar EMPTY_PARSED_PATH = {\n    absolutePath: [],\n    hasArc: false,\n    segments: [],\n    polygons: [],\n    polylines: [],\n    curve: null,\n    totalLength: 0,\n    rect: new Rectangle(0, 0, 0, 0)\n};\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Content_type\n */ var PropertySyntax = /*#__PURE__*/ function(PropertySyntax) {\n    /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Content_type#coordinate\n   */ PropertySyntax[\"COORDINATE\"] = \"<coordinate>\";\n    /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Content_type#color\n   */ PropertySyntax[\"COLOR\"] = \"<color>\";\n    /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Content_type#paint\n   */ PropertySyntax[\"PAINT\"] = \"<paint>\";\n    /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Content_type#number\n   */ PropertySyntax[\"NUMBER\"] = \"<number>\";\n    /**\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/angle\n   */ PropertySyntax[\"ANGLE\"] = \"<angle>\";\n    /**\n   * <number> with range 0..1\n   * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Content_type#opacity_value\n   */ PropertySyntax[\"OPACITY_VALUE\"] = \"<opacity-value>\";\n    /**\n   * <number> with range 0..Infinity\n   */ PropertySyntax[\"SHADOW_BLUR\"] = \"<shadow-blur>\";\n    /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Content_type#length\n   */ PropertySyntax[\"LENGTH\"] = \"<length>\";\n    /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Content_type#percentage\n   */ PropertySyntax[\"PERCENTAGE\"] = \"<percentage>\";\n    PropertySyntax[\"LENGTH_PERCENTAGE\"] = \"<length> | <percentage>\";\n    PropertySyntax[\"LENGTH_PERCENTAGE_12\"] = \"[<length> | <percentage>]{1,2}\";\n    /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/margin#formal_syntax\n   */ PropertySyntax[\"LENGTH_PERCENTAGE_14\"] = \"[<length> | <percentage>]{1,4}\";\n    /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Content_type#list-of-ts\n   */ PropertySyntax[\"LIST_OF_POINTS\"] = \"<list-of-points>\";\n    PropertySyntax[\"PATH\"] = \"<path>\";\n    /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/filter#formal_syntax\n   */ PropertySyntax[\"FILTER\"] = \"<filter>\";\n    PropertySyntax[\"Z_INDEX\"] = \"<z-index>\";\n    PropertySyntax[\"OFFSET_DISTANCE\"] = \"<offset-distance>\";\n    PropertySyntax[\"DEFINED_PATH\"] = \"<defined-path>\";\n    PropertySyntax[\"MARKER\"] = \"<marker>\";\n    PropertySyntax[\"TRANSFORM\"] = \"<transform>\";\n    PropertySyntax[\"TRANSFORM_ORIGIN\"] = \"<transform-origin>\";\n    PropertySyntax[\"TEXT\"] = \"<text>\";\n    PropertySyntax[\"TEXT_TRANSFORM\"] = \"<text-transform>\";\n    return PropertySyntax;\n}({});\nfunction define(constructor, factory, prototype) {\n    constructor.prototype = factory.prototype = prototype;\n    prototype.constructor = constructor;\n}\nfunction extend(parent, definition) {\n    var prototype = Object.create(parent.prototype);\n    for(var key in definition)prototype[key] = definition[key];\n    return prototype;\n}\nfunction Color() {}\nvar darker = 0.7;\nvar brighter = 1 / darker;\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\", reN = \"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\", reP = \"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\", reHex = /^#([0-9a-f]{3,8})$/, reRgbInteger = new RegExp(`^rgb\\\\(${reI},${reI},${reI}\\\\)$`), reRgbPercent = new RegExp(`^rgb\\\\(${reP},${reP},${reP}\\\\)$`), reRgbaInteger = new RegExp(`^rgba\\\\(${reI},${reI},${reI},${reN}\\\\)$`), reRgbaPercent = new RegExp(`^rgba\\\\(${reP},${reP},${reP},${reN}\\\\)$`), reHslPercent = new RegExp(`^hsl\\\\(${reN},${reP},${reP}\\\\)$`), reHslaPercent = new RegExp(`^hsla\\\\(${reN},${reP},${reP},${reN}\\\\)$`);\nvar named = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32\n};\ndefine(Color, color, {\n    copy (channels) {\n        return Object.assign(new this.constructor, this, channels);\n    },\n    displayable () {\n        return this.rgb().displayable();\n    },\n    hex: color_formatHex,\n    formatHex: color_formatHex,\n    formatHex8: color_formatHex8,\n    formatHsl: color_formatHsl,\n    formatRgb: color_formatRgb,\n    toString: color_formatRgb\n});\nfunction color_formatHex() {\n    return this.rgb().formatHex();\n}\nfunction color_formatHex8() {\n    return this.rgb().formatHex8();\n}\nfunction color_formatHsl() {\n    return hslConvert(this).formatHsl();\n}\nfunction color_formatRgb() {\n    return this.rgb().formatRgb();\n}\nfunction color(format) {\n    var m, l;\n    format = (format + \"\").trim().toLowerCase();\n    return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n     : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00\n     : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n     : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000\n     : null // invalid hex\n    ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n     : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n     : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n     : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n     : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n     : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n     : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n     : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0) : null;\n}\nfunction rgbn(n) {\n    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\nfunction rgba(r, g, b, a) {\n    if (a <= 0) r = g = b = NaN;\n    return new Rgb(r, g, b, a);\n}\nfunction rgbConvert(o) {\n    if (!(o instanceof Color)) o = color(o);\n    if (!o) return new Rgb;\n    o = o.rgb();\n    return new Rgb(o.r, o.g, o.b, o.opacity);\n}\nfunction rgb(r, g, b, opacity) {\n    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\nfunction Rgb(r, g, b, opacity) {\n    this.r = +r;\n    this.g = +g;\n    this.b = +b;\n    this.opacity = +opacity;\n}\ndefine(Rgb, rgb, extend(Color, {\n    brighter (k) {\n        k = k == null ? brighter : Math.pow(brighter, k);\n        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    darker (k) {\n        k = k == null ? darker : Math.pow(darker, k);\n        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    rgb () {\n        return this;\n    },\n    clamp () {\n        return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));\n    },\n    displayable () {\n        return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;\n    },\n    hex: rgb_formatHex,\n    formatHex: rgb_formatHex,\n    formatHex8: rgb_formatHex8,\n    formatRgb: rgb_formatRgb,\n    toString: rgb_formatRgb\n}));\nfunction rgb_formatHex() {\n    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;\n}\nfunction rgb_formatHex8() {\n    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;\n}\nfunction rgb_formatRgb() {\n    const a = clampa(this.opacity);\n    return `${a === 1 ? \"rgb(\" : \"rgba(\"}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? \")\" : `, ${a})`}`;\n}\nfunction clampa(opacity) {\n    return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));\n}\nfunction clampi(value) {\n    return Math.max(0, Math.min(255, Math.round(value) || 0));\n}\nfunction hex(value) {\n    value = clampi(value);\n    return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\nfunction hsla(h, s, l, a) {\n    if (a <= 0) h = s = l = NaN;\n    else if (l <= 0 || l >= 1) h = s = NaN;\n    else if (s <= 0) h = NaN;\n    return new Hsl(h, s, l, a);\n}\nfunction hslConvert(o) {\n    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Color)) o = color(o);\n    if (!o) return new Hsl;\n    if (o instanceof Hsl) return o;\n    o = o.rgb();\n    var r = o.r / 255, g = o.g / 255, b = o.b / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), h = NaN, s = max - min, l = (max + min) / 2;\n    if (s) {\n        if (r === max) h = (g - b) / s + (g < b) * 6;\n        else if (g === max) h = (b - r) / s + 2;\n        else h = (r - g) / s + 4;\n        s /= l < 0.5 ? max + min : 2 - max - min;\n        h *= 60;\n    } else {\n        s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new Hsl(h, s, l, o.opacity);\n}\nfunction hsl(h, s, l, opacity) {\n    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\nfunction Hsl(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n}\ndefine(Hsl, hsl, extend(Color, {\n    brighter (k) {\n        k = k == null ? brighter : Math.pow(brighter, k);\n        return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker (k) {\n        k = k == null ? darker : Math.pow(darker, k);\n        return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb () {\n        var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;\n        return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);\n    },\n    clamp () {\n        return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));\n    },\n    displayable () {\n        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;\n    },\n    formatHsl () {\n        const a = clampa(this.opacity);\n        return `${a === 1 ? \"hsl(\" : \"hsla(\"}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? \")\" : `, ${a})`}`;\n    }\n}));\nfunction clamph(value) {\n    value = (value || 0) % 360;\n    return value < 0 ? value + 360 : value;\n}\nfunction clampt(value) {\n    return Math.max(0, Math.min(1, value || 0));\n}\n/* From FvD 13.37, CSS Color Module Level 3 */ function hsl2rgb(h, m1, m2) {\n    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;\n}\nfunction memoize(func, resolver) {\n    if (typeof func !== \"function\" || resolver != null && typeof resolver !== \"function\") {\n        throw new TypeError(\"Expected a function\");\n    }\n    var _memoized = function memoized() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        var key = resolver ? resolver.apply(this, args) : args[0];\n        var cache = _memoized.cache;\n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        _memoized.cache = cache.set(key, result) || cache;\n        return result;\n    };\n    _memoized.cache = new (memoize.Cache || Map)();\n    memoize.cacheList.push(_memoized.cache);\n    return _memoized;\n}\nmemoize.Cache = Map;\nmemoize.cacheList = [];\nmemoize.clearCache = function() {\n    memoize.cacheList.forEach(function(cache) {\n        return cache.clear();\n    });\n};\n// These units are iterated through, so be careful when adding or changing the\n// order.\nvar UnitType = /*#__PURE__*/ function(UnitType) {\n    UnitType[UnitType[\"kUnknown\"] = 0] = \"kUnknown\";\n    UnitType[UnitType[\"kNumber\"] = 1] = \"kNumber\";\n    UnitType[UnitType[\"kPercentage\"] = 2] = \"kPercentage\";\n    // Length units\n    UnitType[UnitType[\"kEms\"] = 3] = \"kEms\";\n    // kExs,\n    UnitType[UnitType[\"kPixels\"] = 4] = \"kPixels\";\n    // kCentimeters,\n    // kMillimeters,\n    // kInches,\n    // kPoints,\n    // kPicas,\n    // kQuarterMillimeters,\n    // https://drafts.csswg.org/css-values-4/#viewport-relative-lengths\n    //\n    // See also IsViewportPercentageLength.\n    // kViewportWidth,\n    // kViewportHeight,\n    // kViewportInlineSize,\n    // kViewportBlockSize,\n    // kViewportMin,\n    // kViewportMax,\n    // kSmallViewportWidth,\n    // kSmallViewportHeight,\n    // kSmallViewportInlineSize,\n    // kSmallViewportBlockSize,\n    // kSmallViewportMin,\n    // kSmallViewportMax,\n    // kLargeViewportWidth,\n    // kLargeViewportHeight,\n    // kLargeViewportInlineSize,\n    // kLargeViewportBlockSize,\n    // kLargeViewportMin,\n    // kLargeViewportMax,\n    // kDynamicViewportWidth,\n    // kDynamicViewportHeight,\n    // kDynamicViewportInlineSize,\n    // kDynamicViewportBlockSize,\n    // kDynamicViewportMin,\n    // kDynamicViewportMax,\n    // https://drafts.csswg.org/css-contain-3/#container-lengths\n    //\n    // See also IsContainerPercentageLength.\n    // kContainerWidth,\n    // kContainerHeight,\n    // kContainerInlineSize,\n    // kContainerBlockSize,\n    // kContainerMin,\n    // kContainerMax,\n    UnitType[UnitType[\"kRems\"] = 5] = \"kRems\";\n    // kChs,\n    // kUserUnits, // The SVG term for unitless lengths\n    // Angle units\n    UnitType[UnitType[\"kDegrees\"] = 6] = \"kDegrees\";\n    UnitType[UnitType[\"kRadians\"] = 7] = \"kRadians\";\n    UnitType[UnitType[\"kGradians\"] = 8] = \"kGradians\";\n    UnitType[UnitType[\"kTurns\"] = 9] = \"kTurns\";\n    // Time units\n    UnitType[UnitType[\"kMilliseconds\"] = 10] = \"kMilliseconds\";\n    UnitType[UnitType[\"kSeconds\"] = 11] = \"kSeconds\";\n    // kHertz,\n    // kKilohertz,\n    // Resolution\n    // kDotsPerPixel,\n    // kDotsPerInch,\n    // kDotsPerCentimeter,\n    // Other units\n    // kFraction,\n    UnitType[UnitType[\"kInteger\"] = 12] = \"kInteger\"; // This value is used to handle quirky margins in reflow roots (body, td,\n    // and th) like WinIE. The basic idea is that a stylesheet can use the value\n    // __qem (for quirky em) instead of em. When the quirky value is used, if\n    // you're in quirks mode, the margin will collapse away inside a table cell.\n    // This quirk is specified in the HTML spec but our impl is different.\n    // TODO: Remove this. crbug.com/443952\n    // kQuirkyEms,\n    return UnitType;\n}({});\nvar UnitCategory = /*#__PURE__*/ function(UnitCategory) {\n    UnitCategory[UnitCategory[\"kUNumber\"] = 0] = \"kUNumber\";\n    UnitCategory[UnitCategory[\"kUPercent\"] = 1] = \"kUPercent\";\n    UnitCategory[UnitCategory[\"kULength\"] = 2] = \"kULength\";\n    UnitCategory[UnitCategory[\"kUAngle\"] = 3] = \"kUAngle\";\n    UnitCategory[UnitCategory[\"kUTime\"] = 4] = \"kUTime\";\n    // kUFrequency,\n    // kUResolution,\n    UnitCategory[UnitCategory[\"kUOther\"] = 5] = \"kUOther\";\n    return UnitCategory;\n}({});\nvar Nested = /*#__PURE__*/ function(Nested) {\n    Nested[Nested[\"kYes\"] = 0] = \"kYes\";\n    Nested[Nested[\"kNo\"] = 1] = \"kNo\";\n    return Nested;\n}({});\nvar ParenLess = /*#__PURE__*/ function(ParenLess) {\n    ParenLess[ParenLess[\"kYes\"] = 0] = \"kYes\";\n    ParenLess[ParenLess[\"kNo\"] = 1] = \"kNo\";\n    return ParenLess;\n}({});\n// This file specifies the unit strings used in CSSPrimitiveValues.\nvar data = [\n    {\n        name: \"em\",\n        unit_type: UnitType.kEms\n    },\n    // {\n    //   name: 'ex',\n    //   unit_type: UnitType.kExs,\n    // },\n    {\n        name: \"px\",\n        unit_type: UnitType.kPixels\n    },\n    // {\n    //   name: \"cm\",\n    //   unit_type: UnitType.kCentimeters,\n    // },\n    // {\n    //   name: \"mm\",\n    //   unit_type: UnitType.kMillimeters,\n    // },\n    // {\n    //   name: \"q\",\n    //   unit_type: UnitType.kQuarterMillimeters,\n    // },\n    // {\n    //   name: \"in\",\n    //   unit_type: UnitType.kInches,\n    // },\n    // {\n    //   name: \"pt\",\n    //   unit_type: UnitType.kPoints,\n    // },\n    // {\n    //   name: \"pc\",\n    //   unit_type: UnitType.kPicas,\n    // },\n    {\n        name: \"deg\",\n        unit_type: UnitType.kDegrees\n    },\n    {\n        name: \"rad\",\n        unit_type: UnitType.kRadians\n    },\n    {\n        name: \"grad\",\n        unit_type: UnitType.kGradians\n    },\n    {\n        name: \"ms\",\n        unit_type: UnitType.kMilliseconds\n    },\n    {\n        name: \"s\",\n        unit_type: UnitType.kSeconds\n    },\n    // {\n    //   name: \"hz\",\n    //   unit_type: UnitType.kHertz,\n    // },\n    // {\n    //   name: \"khz\",\n    //   unit_type: UnitType.kKilohertz,\n    // },\n    // {\n    //   name: \"dpi\",\n    //   unit_type: \"kDotsPerInch\",\n    // },\n    // {\n    //   name: \"dpcm\",\n    //   unit_type: \"kDotsPerCentimeter\",\n    // },\n    // {\n    //   name: \"dppx\",\n    //   unit_type: \"kDotsPerPixel\",\n    // },\n    // {\n    //   name: \"x\",\n    //   unit_type: \"kDotsPerPixel\",\n    // },\n    // {\n    //   name: \"vw\",\n    //   unit_type: \"kViewportWidth\",\n    // },\n    // {\n    //   name: \"vh\",\n    //   unit_type: \"kViewportHeight\",\n    // },\n    // {\n    //   name: \"vi\",\n    //   unit_type: \"kViewportInlineSize\",\n    // },\n    // {\n    //   name: \"vb\",\n    //   unit_type: \"kViewportBlockSize\",\n    // },\n    // {\n    //   name: \"vmin\",\n    //   unit_type: UnitType.kViewportMin,\n    // },\n    // {\n    //   name: \"vmax\",\n    //   unit_type: UnitType.kViewportMax,\n    // },\n    // {\n    //   name: \"svw\",\n    //   unit_type: \"kSmallViewportWidth\",\n    // },\n    // {\n    //   name: \"svh\",\n    //   unit_type: \"kSmallViewportHeight\",\n    // },\n    // {\n    //   name: \"svi\",\n    //   unit_type: \"kSmallViewportInlineSize\",\n    // },\n    // {\n    //   name: \"svb\",\n    //   unit_type: \"kSmallViewportBlockSize\",\n    // },\n    // {\n    //   name: \"svmin\",\n    //   unit_type: \"kSmallViewportMin\",\n    // },\n    // {\n    //   name: \"svmax\",\n    //   unit_type: \"kSmallViewportMax\",\n    // },\n    // {\n    //   name: \"lvw\",\n    //   unit_type: \"kLargeViewportWidth\",\n    // },\n    // {\n    //   name: \"lvh\",\n    //   unit_type: \"kLargeViewportHeight\",\n    // },\n    // {\n    //   name: \"lvi\",\n    //   unit_type: \"kLargeViewportInlineSize\",\n    // },\n    // {\n    //   name: \"lvb\",\n    //   unit_type: \"kLargeViewportBlockSize\",\n    // },\n    // {\n    //   name: \"lvmin\",\n    //   unit_type: UnitType.kLargeViewportMin,\n    // },\n    // {\n    //   name: \"lvmax\",\n    //   unit_type: UnitType.kLargeViewportMax,\n    // },\n    // {\n    //   name: \"dvw\",\n    //   unit_type: UnitType.kDynamicViewportWidth,\n    // },\n    // {\n    //   name: \"dvh\",\n    //   unit_type: UnitType.kDynamicViewportHeight,\n    // },\n    // {\n    //   name: \"dvi\",\n    //   unit_type: UnitType.kDynamicViewportInlineSize,\n    // },\n    // {\n    //   name: \"dvb\",\n    //   unit_type: UnitType.kDynamicViewportBlockSize,\n    // },\n    // {\n    //   name: \"dvmin\",\n    //   unit_type: UnitType.kDynamicViewportMin,\n    // },\n    // {\n    //   name: \"dvmax\",\n    //   unit_type: UnitType.kDynamicViewportMax,\n    // },\n    // {\n    //   name: \"cqw\",\n    //   unit_type: UnitType.kContainerWidth,\n    // },\n    // {\n    //   name: \"cqh\",\n    //   unit_type: UnitType.kContainerHeight,\n    // },\n    // {\n    //   name: \"cqi\",\n    //   unit_type: UnitType.kContainerInlineSize,\n    // },\n    // {\n    //   name: \"cqb\",\n    //   unit_type: UnitType.kContainerBlockSize,\n    // },\n    // {\n    //   name: \"cqmin\",\n    //   unit_type: UnitType.kContainerMin,\n    // },\n    // {\n    //   name: \"cqmax\",\n    //   unit_type: UnitType.kContainerMax,\n    // },\n    {\n        name: \"rem\",\n        unit_type: UnitType.kRems\n    },\n    // {\n    //   name: 'fr',\n    //   unit_type: UnitType.kFraction,\n    // },\n    {\n        name: \"turn\",\n        unit_type: UnitType.kTurns\n    }\n];\nvar CSSStyleValueType = /*#__PURE__*/ function(CSSStyleValueType) {\n    CSSStyleValueType[CSSStyleValueType[\"kUnknownType\"] = 0] = \"kUnknownType\";\n    CSSStyleValueType[CSSStyleValueType[\"kUnparsedType\"] = 1] = \"kUnparsedType\";\n    CSSStyleValueType[CSSStyleValueType[\"kKeywordType\"] = 2] = \"kKeywordType\";\n    // Start of CSSNumericValue subclasses\n    CSSStyleValueType[CSSStyleValueType[\"kUnitType\"] = 3] = \"kUnitType\";\n    CSSStyleValueType[CSSStyleValueType[\"kSumType\"] = 4] = \"kSumType\";\n    CSSStyleValueType[CSSStyleValueType[\"kProductType\"] = 5] = \"kProductType\";\n    CSSStyleValueType[CSSStyleValueType[\"kNegateType\"] = 6] = \"kNegateType\";\n    CSSStyleValueType[CSSStyleValueType[\"kInvertType\"] = 7] = \"kInvertType\";\n    CSSStyleValueType[CSSStyleValueType[\"kMinType\"] = 8] = \"kMinType\";\n    CSSStyleValueType[CSSStyleValueType[\"kMaxType\"] = 9] = \"kMaxType\";\n    CSSStyleValueType[CSSStyleValueType[\"kClampType\"] = 10] = \"kClampType\";\n    // End of CSSNumericValue subclasses\n    CSSStyleValueType[CSSStyleValueType[\"kTransformType\"] = 11] = \"kTransformType\";\n    CSSStyleValueType[CSSStyleValueType[\"kPositionType\"] = 12] = \"kPositionType\";\n    CSSStyleValueType[CSSStyleValueType[\"kURLImageType\"] = 13] = \"kURLImageType\";\n    CSSStyleValueType[CSSStyleValueType[\"kColorType\"] = 14] = \"kColorType\";\n    CSSStyleValueType[CSSStyleValueType[\"kUnsupportedColorType\"] = 15] = \"kUnsupportedColorType\";\n    return CSSStyleValueType;\n}({});\n// function parseCSSStyleValue(propertyName: string, value: string): CSSStyleValue[] {\n//   // const propertyId = cssPropertyID(propertyName);\n//   // if (propertyId === CSSPropertyID.kInvalid) {\n//   //   return [];\n//   // }\n//   // const customPropertyName = propertyId === CSSPropertyID.kVariable ? propertyName : null;\n//   // return fromString(propertyId, customPropertyName, value);\n//   return [];\n// }\nvar stringToUnitType = function stringToUnitType(name) {\n    return data.find(function(item) {\n        return item.name === name;\n    }).unit_type;\n};\nvar unitFromName = function unitFromName(name) {\n    if (!name) {\n        return UnitType.kUnknown;\n    }\n    if (name === \"number\") {\n        return UnitType.kNumber;\n    }\n    if (name === \"percent\" || name === \"%\") {\n        return UnitType.kPercentage;\n    }\n    return stringToUnitType(name);\n};\nvar unitTypeToUnitCategory = function unitTypeToUnitCategory(type) {\n    switch(type){\n        case UnitType.kNumber:\n        case UnitType.kInteger:\n            return UnitCategory.kUNumber;\n        case UnitType.kPercentage:\n            return UnitCategory.kUPercent;\n        case UnitType.kPixels:\n            // case UnitType.kCentimeters:\n            // case UnitType.kMillimeters:\n            // case UnitType.kQuarterMillimeters:\n            // case UnitType.kInches:\n            // case UnitType.kPoints:\n            // case UnitType.kPicas:\n            // case UnitType.kUserUnits:\n            return UnitCategory.kULength;\n        case UnitType.kMilliseconds:\n        case UnitType.kSeconds:\n            return UnitCategory.kUTime;\n        case UnitType.kDegrees:\n        case UnitType.kRadians:\n        case UnitType.kGradians:\n        case UnitType.kTurns:\n            return UnitCategory.kUAngle;\n        // case UnitType.kHertz:\n        // case UnitType.kKilohertz:\n        //   return UnitCategory.kUFrequency;\n        // case UnitType.kDotsPerPixel:\n        // case UnitType.kDotsPerInch:\n        // case UnitType.kDotsPerCentimeter:\n        //   return UnitCategory.kUResolution;\n        default:\n            return UnitCategory.kUOther;\n    }\n};\nvar canonicalUnitTypeForCategory = function canonicalUnitTypeForCategory(category) {\n    // The canonical unit type is chosen according to the way\n    // CSSPropertyParser.ValidUnit() chooses the default unit in each category\n    // (based on unitflags).\n    switch(category){\n        case UnitCategory.kUNumber:\n            return UnitType.kNumber;\n        case UnitCategory.kULength:\n            return UnitType.kPixels;\n        case UnitCategory.kUPercent:\n            return UnitType.kPercentage;\n        // return UnitType.kUnknown; // Cannot convert between numbers and percent.\n        case UnitCategory.kUTime:\n            return UnitType.kSeconds;\n        case UnitCategory.kUAngle:\n            return UnitType.kDegrees;\n        // case UnitCategory.kUFrequency:\n        //   return UnitType.kHertz;\n        // case UnitCategory.kUResolution:\n        //   return UnitType.kDotsPerPixel;\n        default:\n            return UnitType.kUnknown;\n    }\n};\n/**\n * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/css_primitive_value.cc#353\n */ var conversionToCanonicalUnitsScaleFactor = function conversionToCanonicalUnitsScaleFactor(unit_type) {\n    var factor = 1.0;\n    // FIXME: the switch can be replaced by an array of scale factors.\n    switch(unit_type){\n        // These are \"canonical\" units in their respective categories.\n        case UnitType.kPixels:\n        // case UnitType.kUserUnits:\n        case UnitType.kDegrees:\n        case UnitType.kSeconds:\n            break;\n        case UnitType.kMilliseconds:\n            factor = 0.001;\n            break;\n        // case UnitType.kCentimeters:\n        //   // factor = kCssPixelsPerCentimeter;\n        //   break;\n        // case UnitType.kDotsPerCentimeter:\n        //   // factor = 1 / kCssPixelsPerCentimeter;\n        //   break;\n        // case UnitType.kMillimeters:\n        //   // factor = kCssPixelsPerMillimeter;\n        //   break;\n        // case UnitType.kQuarterMillimeters:\n        //   // factor = kCssPixelsPerQuarterMillimeter;\n        //   break;\n        // case UnitType.kInches:\n        //   // factor = kCssPixelsPerInch;\n        //   break;\n        // case UnitType.kDotsPerInch:\n        //   // factor = 1 / kCssPixelsPerInch;\n        //   break;\n        // case UnitType.kPoints:\n        //   // factor = kCssPixelsPerPoint;\n        //   break;\n        // case UnitType.kPicas:\n        //   // factor = kCssPixelsPerPica;\n        //   break;\n        case UnitType.kRadians:\n            factor = 180 / Math.PI;\n            break;\n        case UnitType.kGradians:\n            factor = 0.9;\n            break;\n        case UnitType.kTurns:\n            factor = 360;\n            break;\n    }\n    return factor;\n};\nvar unitTypeToString = function unitTypeToString(type) {\n    switch(type){\n        case UnitType.kNumber:\n        case UnitType.kInteger:\n            // case UnitType.kUserUnits:\n            return \"\";\n        case UnitType.kPercentage:\n            return \"%\";\n        case UnitType.kEms:\n            // case UnitType.kQuirkyEms:\n            return \"em\";\n        // case UnitType.kExs:\n        //   return 'ex';\n        case UnitType.kRems:\n            return \"rem\";\n        // case UnitType.kChs:\n        //   return 'ch';\n        case UnitType.kPixels:\n            return \"px\";\n        // case UnitType.kCentimeters:\n        //   return 'cm';\n        // case UnitType.kDotsPerPixel:\n        //   return 'dppx';\n        // case UnitType.kDotsPerInch:\n        //   return 'dpi';\n        // case UnitType.kDotsPerCentimeter:\n        //   return 'dpcm';\n        // case UnitType.kMillimeters:\n        //   return 'mm';\n        // case UnitType.kQuarterMillimeters:\n        //   return 'q';\n        // case UnitType.kInches:\n        //   return 'in';\n        // case UnitType.kPoints:\n        //   return 'pt';\n        // case UnitType.kPicas:\n        //   return 'pc';\n        case UnitType.kDegrees:\n            return \"deg\";\n        case UnitType.kRadians:\n            return \"rad\";\n        case UnitType.kGradians:\n            return \"grad\";\n        case UnitType.kMilliseconds:\n            return \"ms\";\n        case UnitType.kSeconds:\n            return \"s\";\n        // case UnitType.kHertz:\n        //   return 'hz';\n        // case UnitType.kKilohertz:\n        //   return 'khz';\n        case UnitType.kTurns:\n            return \"turn\";\n    }\n    return \"\";\n};\n/**\n * CSSStyleValue is the base class for all CSS values accessible from Typed OM.\n * Values that are not yet supported as specific types are also returned as base CSSStyleValues.\n *\n * Spec @see https://drafts.css-houdini.org/css-typed-om/#stylevalue-objects\n * Docs @see https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleValue\n */ var CSSStyleValue = /*#__PURE__*/ function() {\n    function CSSStyleValue() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSStyleValue);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSStyleValue, [\n        {\n            key: \"toString\",\n            value: // protected abstract toCSSValue(): CSSValue;\n            function toString() {\n                return this.buildCSSText(Nested.kNo, ParenLess.kNo, \"\");\n            }\n        },\n        {\n            key: \"isNumericValue\",\n            value: function isNumericValue() {\n                return this.getType() >= CSSStyleValueType.kUnitType && this.getType() <= CSSStyleValueType.kClampType;\n            }\n        }\n    ], [\n        {\n            key: \"isAngle\",\n            value: // static parse(propertyName: string, value: string): CSSStyleValue {\n            //   return parseCSSStyleValue(propertyName, value)[0];\n            // }\n            // static parseAll(propertyName: string, value: string): CSSStyleValue[] {\n            //   return parseCSSStyleValue(propertyName, value);\n            // }\n            function isAngle(unit) {\n                return unit === UnitType.kDegrees || unit === UnitType.kRadians || unit === UnitType.kGradians || unit === UnitType.kTurns;\n            }\n        },\n        {\n            key: \"isLength\",\n            value: function isLength(type) {\n                // return (type >= UnitType.kEms && type <= UnitType.kUserUnits) || type == UnitType.kQuirkyEms;\n                return type >= UnitType.kEms && type < UnitType.kDegrees;\n            }\n        },\n        {\n            key: \"isRelativeUnit\",\n            value: function isRelativeUnit(type) {\n                return type === UnitType.kPercentage || type === UnitType.kEms || // type === UnitType.kExs ||\n                type === UnitType.kRems;\n            }\n        },\n        {\n            key: \"isTime\",\n            value: function isTime(unit) {\n                return unit === UnitType.kSeconds || unit === UnitType.kMilliseconds;\n            }\n        }\n    ]);\n}();\n/**\n * @see https://drafts.css-houdini.org/css-typed-om-1/#dom-csscolorvalue-colorspace\n */ /**\n * CSSColorValue is the base class used for the various CSS color interfaces.\n *\n * @see https://drafts.css-houdini.org/css-typed-om-1/#colorvalue-objects\n */ var CSSColorValue = /*#__PURE__*/ function(_CSSStyleValue) {\n    function CSSColorValue(colorSpace) {\n        var _this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSColorValue);\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, CSSColorValue);\n        _this.colorSpace = colorSpace;\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(CSSColorValue, _CSSStyleValue);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSColorValue, [\n        {\n            key: \"getType\",\n            value: function getType() {\n                return CSSStyleValueType.kColorType;\n            }\n        },\n        {\n            key: \"to\",\n            value: function to(colorSpace) {\n                return this;\n            }\n        }\n    ]);\n}(CSSStyleValue);\nvar GradientType = /*#__PURE__*/ function(GradientType) {\n    GradientType[GradientType[\"Constant\"] = 0] = \"Constant\";\n    GradientType[GradientType[\"LinearGradient\"] = 1] = \"LinearGradient\";\n    GradientType[GradientType[\"RadialGradient\"] = 2] = \"RadialGradient\";\n    return GradientType;\n}({});\nvar CSSGradientValue = /*#__PURE__*/ function(_CSSStyleValue) {\n    function CSSGradientValue(type, value) {\n        var _this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSGradientValue);\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, CSSGradientValue);\n        _this.type = type;\n        _this.value = value;\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(CSSGradientValue, _CSSStyleValue);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSGradientValue, [\n        {\n            key: \"clone\",\n            value: function clone() {\n                return new CSSGradientValue(this.type, this.value);\n            }\n        },\n        {\n            key: \"buildCSSText\",\n            value: function buildCSSText(n, p, result) {\n                return result;\n            }\n        },\n        {\n            key: \"getType\",\n            value: function getType() {\n                return CSSStyleValueType.kColorType;\n            }\n        }\n    ]);\n}(CSSStyleValue);\n/**\n * CSSKeywordValue represents CSS Values that are specified as keywords\n * eg. 'initial'\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSKeywordValue\n * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_keyword_value.idl\n */ var CSSKeywordValue = /*#__PURE__*/ function(_CSSStyleValue) {\n    function CSSKeywordValue(value) {\n        var _this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSKeywordValue);\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, CSSKeywordValue);\n        _this.value = value;\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(CSSKeywordValue, _CSSStyleValue);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSKeywordValue, [\n        {\n            key: \"clone\",\n            value: function clone() {\n                return new CSSKeywordValue(this.value);\n            }\n        },\n        {\n            key: \"getType\",\n            value: function getType() {\n                return CSSStyleValueType.kKeywordType;\n            }\n        },\n        {\n            key: \"buildCSSText\",\n            value: function buildCSSText(n, p, result) {\n                return result + this.value;\n            }\n        }\n    ]);\n}(CSSStyleValue);\nvar formatInfinityOrNaN = function formatInfinityOrNaN(number) {\n    var suffix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    var result = \"\";\n    if (!Number.isFinite(number)) {\n        if (number > 0) result = \"infinity\";\n        else result = \"-infinity\";\n    } else {\n        result = \"NaN\";\n    }\n    return result += suffix;\n};\nvar toCanonicalUnit = function toCanonicalUnit(unit) {\n    return canonicalUnitTypeForCategory(unitTypeToUnitCategory(unit));\n};\n/**\n * CSSNumericValue is the base class for numeric and length typed CSS Values.\n * @see https://drafts.css-houdini.org/css-typed-om/#numeric-objects\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericValue\n * @see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/core/css/cssom/css_numeric_value.idl\n */ /**\n * Represents numeric values that can be expressed as a single number plus a\n * unit (or a naked number or percentage).\n * @see https://drafts.css-houdini.org/css-typed-om/#cssunitvalue\n */ var CSSUnitValue = /*#__PURE__*/ function(_CSSStyleValue) {\n    function CSSUnitValue(value) {\n        var _this;\n        var unitOrName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UnitType.kNumber;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSUnitValue);\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, CSSUnitValue);\n        var unit;\n        if (typeof unitOrName === \"string\") {\n            unit = unitFromName(unitOrName);\n        } else {\n            unit = unitOrName;\n        }\n        _this.unit = unit;\n        _this.value = value;\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(CSSUnitValue, _CSSStyleValue);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSUnitValue, [\n        {\n            key: \"clone\",\n            value: function clone() {\n                return new CSSUnitValue(this.value, this.unit);\n            }\n        },\n        {\n            key: \"equals\",\n            value: function equals(other) {\n                var other_unit_value = other;\n                return this.value === other_unit_value.value && this.unit === other_unit_value.unit;\n            }\n        },\n        {\n            key: \"getType\",\n            value: function getType() {\n                return CSSStyleValueType.kUnitType;\n            }\n        },\n        {\n            key: \"convertTo\",\n            value: function convertTo(target_unit) {\n                if (this.unit === target_unit) {\n                    return new CSSUnitValue(this.value, this.unit);\n                }\n                // Instead of defining the scale factors for every unit to every other unit,\n                // we simply convert to the canonical unit and back since we already have\n                // the scale factors for canonical units.\n                var canonical_unit = toCanonicalUnit(this.unit);\n                if (canonical_unit !== toCanonicalUnit(target_unit) || canonical_unit === UnitType.kUnknown) {\n                    return null;\n                }\n                var scale_factor = conversionToCanonicalUnitsScaleFactor(this.unit) / conversionToCanonicalUnitsScaleFactor(target_unit);\n                return new CSSUnitValue(this.value * scale_factor, target_unit);\n            }\n        },\n        {\n            key: \"buildCSSText\",\n            value: function buildCSSText(n, p, result) {\n                var text;\n                switch(this.unit){\n                    case UnitType.kUnknown:\n                        break;\n                    case UnitType.kInteger:\n                        text = Number(this.value).toFixed(0);\n                        break;\n                    case UnitType.kNumber:\n                    case UnitType.kPercentage:\n                    case UnitType.kEms:\n                    // case UnitType.kQuirkyEms:\n                    // case UnitType.kExs:\n                    case UnitType.kRems:\n                    // case UnitType.kChs:\n                    case UnitType.kPixels:\n                    // case UnitType.kCentimeters:\n                    // case UnitType.kDotsPerPixel:\n                    // case UnitType.kDotsPerInch:\n                    // case UnitType.kDotsPerCentimeter:\n                    // case UnitType.kMillimeters:\n                    // case UnitType.kQuarterMillimeters:\n                    // case UnitType.kInches:\n                    // case UnitType.kPoints:\n                    // case UnitType.kPicas:\n                    // case UnitType.kUserUnits:\n                    case UnitType.kDegrees:\n                    case UnitType.kRadians:\n                    case UnitType.kGradians:\n                    case UnitType.kMilliseconds:\n                    case UnitType.kSeconds:\n                    // case UnitType.kHertz:\n                    // case UnitType.kKilohertz:\n                    case UnitType.kTurns:\n                        {\n                            // case UnitType.kContainerMax: { // case UnitType.kContainerMin: // case UnitType.kContainerBlockSize: // case UnitType.kContainerInlineSize: // case UnitType.kContainerHeight: // case UnitType.kContainerWidth: // case UnitType.kDynamicViewportMax: // case UnitType.kDynamicViewportMin: // case UnitType.kDynamicViewportBlockSize: // case UnitType.kDynamicViewportInlineSize: // case UnitType.kDynamicViewportHeight: // case UnitType.kDynamicViewportWidth: // case UnitType.kLargeViewportMax: // case UnitType.kLargeViewportMin: // case UnitType.kLargeViewportBlockSize: // case UnitType.kLargeViewportInlineSize: // case UnitType.kLargeViewportHeight: // case UnitType.kLargeViewportWidth: // case UnitType.kSmallViewportMax: // case UnitType.kSmallViewportMin: // case UnitType.kSmallViewportBlockSize: // case UnitType.kSmallViewportInlineSize: // case UnitType.kSmallViewportHeight: // case UnitType.kSmallViewportWidth: // case UnitType.kViewportMax: // case UnitType.kViewportMin: // case UnitType.kViewportBlockSize: // case UnitType.kViewportInlineSize: // case UnitType.kViewportHeight: // case UnitType.kViewportWidth: // case UnitType.kFraction:\n                            var kMinInteger = -999999;\n                            var kMaxInteger = 999999;\n                            var value = this.value;\n                            var unit = unitTypeToString(this.unit);\n                            if (value < kMinInteger || value > kMaxInteger) {\n                                var _unit = unitTypeToString(this.unit);\n                                if (!Number.isFinite(value) || Number.isNaN(value)) {\n                                    text = formatInfinityOrNaN(value, _unit);\n                                } else {\n                                    text = value + (_unit || \"\");\n                                }\n                            } else {\n                                text = \"\".concat(value).concat(unit);\n                            }\n                        }\n                }\n                result += text;\n                return result;\n            }\n        }\n    ]);\n}(CSSStyleValue);\nvar Opx = new CSSUnitValue(0, \"px\");\nnew CSSUnitValue(1, \"px\");\nvar Odeg = new CSSUnitValue(0, \"deg\");\n/**\n * The CSSRGB class represents the CSS rgb()/rgba() functions.\n *\n * @see https://drafts.css-houdini.org/css-typed-om-1/#cssrgb\n */ var CSSRGB = /*#__PURE__*/ function(_CSSColorValue) {\n    function CSSRGB(r, g, b) {\n        var _this;\n        var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n        var isNone = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSRGB);\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, CSSRGB, [\n            \"rgb\"\n        ]);\n        _this.r = r;\n        _this.g = g;\n        _this.b = b;\n        _this.alpha = alpha;\n        _this.isNone = isNone;\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(CSSRGB, _CSSColorValue);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSRGB, [\n        {\n            key: \"clone\",\n            value: function clone() {\n                return new CSSRGB(this.r, this.g, this.b, this.alpha);\n            }\n        },\n        {\n            key: \"buildCSSText\",\n            value: function buildCSSText(n, p, result) {\n                return \"\".concat(result, \"rgba(\").concat(this.r, \",\").concat(this.g, \",\").concat(this.b, \",\").concat(this.alpha, \")\");\n            }\n        }\n    ]);\n}(CSSColorValue);\n/**\n * CSSKeywordValue\n */ var unsetKeywordValue = new CSSKeywordValue(\"unset\");\nvar initialKeywordValue = new CSSKeywordValue(\"initial\");\nvar inheritKeywordValue = new CSSKeywordValue(\"inherit\");\nvar keywordCache = {\n    \"\": unsetKeywordValue,\n    unset: unsetKeywordValue,\n    initial: initialKeywordValue,\n    inherit: inheritKeywordValue\n};\nvar getOrCreateKeyword = function getOrCreateKeyword(name) {\n    if (!keywordCache[name]) {\n        keywordCache[name] = new CSSKeywordValue(name);\n    }\n    return keywordCache[name];\n};\n/**\n * CSSColor\n */ var noneColor = new CSSRGB(0, 0, 0, 0, true);\nvar transparentColor = new CSSRGB(0, 0, 0, 0);\nvar getOrCreateRGBA = memoize(function(r, g, b, a) {\n    return new CSSRGB(r, g, b, a);\n}, function(r, g, b, a) {\n    return \"rgba(\".concat(r, \",\").concat(g, \",\").concat(b, \",\").concat(a, \")\");\n});\n// export const getOrCreateUnitValue = memoize(\n//   (value: number, unitOrName: UnitType | string = UnitType.kNumber) => {\n//     return new CSSUnitValue(value, unitOrName);\n//   },\n//   (value: number, unitOrName: UnitType | string = UnitType.kNumber) => {\n//     return `${value}${unitOrName}`;\n//   },\n// );\nvar getOrCreateUnitValue = function getOrCreateUnitValue(value) {\n    var unitOrName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UnitType.kNumber;\n    return new CSSUnitValue(value, unitOrName);\n};\nnew CSSUnitValue(50, \"%\");\n/**\n * borrow from gradient-parser, but we delete some browser compatible prefix such as `-webkit-`\n * @see https://github.com/rafaelcaricio/gradient-parser\n */ function colorStopToString(colorStop) {\n    var type = colorStop.type, value = colorStop.value;\n    if (type === \"hex\") {\n        return \"#\".concat(value);\n    }\n    if (type === \"literal\") {\n        return value;\n    }\n    if (type === \"rgb\") {\n        return \"rgb(\".concat(value.join(\",\"), \")\");\n    }\n    return \"rgba(\".concat(value.join(\",\"), \")\");\n}\nvar parseGradient$1 = function() {\n    var tokens = {\n        linearGradient: /^(linear\\-gradient)/i,\n        repeatingLinearGradient: /^(repeating\\-linear\\-gradient)/i,\n        radialGradient: /^(radial\\-gradient)/i,\n        repeatingRadialGradient: /^(repeating\\-radial\\-gradient)/i,\n        /**\n     * @see https://projects.verou.me/conic-gradient/\n     */ conicGradient: /^(conic\\-gradient)/i,\n        sideOrCorner: /^to (left (top|bottom)|right (top|bottom)|top (left|right)|bottom (left|right)|left|right|top|bottom)/i,\n        extentKeywords: /^(closest\\-side|closest\\-corner|farthest\\-side|farthest\\-corner|contain|cover)/,\n        positionKeywords: /^(left|center|right|top|bottom)/i,\n        pixelValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))px/,\n        percentageValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))\\%/,\n        emValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))em/,\n        angleValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))deg/,\n        startCall: /^\\(/,\n        endCall: /^\\)/,\n        comma: /^,/,\n        hexColor: /^\\#([0-9a-fA-F]+)/,\n        literalColor: /^([a-zA-Z]+)/,\n        rgbColor: /^rgb/i,\n        rgbaColor: /^rgba/i,\n        number: /^(([0-9]*\\.[0-9]+)|([0-9]+\\.?))/\n    };\n    var input = \"\";\n    function error(msg) {\n        throw new Error(\"\".concat(input, \": \").concat(msg));\n    }\n    function getAST() {\n        var ast = matchListDefinitions();\n        if (input.length > 0) {\n            error(\"Invalid input not EOF\");\n        }\n        return ast;\n    }\n    function matchListDefinitions() {\n        return matchListing(matchDefinition);\n    }\n    function matchDefinition() {\n        return matchGradient(\"linear-gradient\", tokens.linearGradient, matchLinearOrientation) || matchGradient(\"repeating-linear-gradient\", tokens.repeatingLinearGradient, matchLinearOrientation) || matchGradient(\"radial-gradient\", tokens.radialGradient, matchListRadialOrientations) || matchGradient(\"repeating-radial-gradient\", tokens.repeatingRadialGradient, matchListRadialOrientations) || matchGradient(\"conic-gradient\", tokens.conicGradient, matchListRadialOrientations);\n    }\n    function matchGradient(gradientType, pattern, orientationMatcher) {\n        return matchCall(pattern, function(captures) {\n            var orientation = orientationMatcher();\n            if (orientation) {\n                if (!scan(tokens.comma)) {\n                    error(\"Missing comma before color stops\");\n                }\n            }\n            return {\n                type: gradientType,\n                orientation: orientation,\n                colorStops: matchListing(matchColorStop)\n            };\n        });\n    }\n    function matchCall(pattern, callback) {\n        var captures = scan(pattern);\n        if (captures) {\n            if (!scan(tokens.startCall)) {\n                error(\"Missing (\");\n            }\n            var result = callback(captures);\n            if (!scan(tokens.endCall)) {\n                error(\"Missing )\");\n            }\n            return result;\n        }\n    }\n    function matchLinearOrientation() {\n        return matchSideOrCorner() || matchAngle();\n    }\n    function matchSideOrCorner() {\n        return match(\"directional\", tokens.sideOrCorner, 1);\n    }\n    function matchAngle() {\n        return match(\"angular\", tokens.angleValue, 1);\n    }\n    function matchListRadialOrientations() {\n        var radialOrientations;\n        var radialOrientation = matchRadialOrientation();\n        var lookaheadCache;\n        if (radialOrientation) {\n            radialOrientations = [];\n            radialOrientations.push(radialOrientation);\n            lookaheadCache = input;\n            if (scan(tokens.comma)) {\n                radialOrientation = matchRadialOrientation();\n                if (radialOrientation) {\n                    radialOrientations.push(radialOrientation);\n                } else {\n                    input = lookaheadCache;\n                }\n            }\n        }\n        return radialOrientations;\n    }\n    function matchRadialOrientation() {\n        var radialType = matchCircle() || matchEllipse();\n        if (radialType) {\n            // @ts-ignore\n            radialType.at = matchAtPosition();\n        } else {\n            var extent = matchExtentKeyword();\n            if (extent) {\n                radialType = extent;\n                var positionAt = matchAtPosition();\n                if (positionAt) {\n                    // @ts-ignore\n                    radialType.at = positionAt;\n                }\n            } else {\n                var defaultPosition = matchPositioning();\n                if (defaultPosition) {\n                    radialType = {\n                        type: \"default-radial\",\n                        // @ts-ignore\n                        at: defaultPosition\n                    };\n                }\n            }\n        }\n        return radialType;\n    }\n    function matchCircle() {\n        var circle = match(\"shape\", /^(circle)/i, 0);\n        if (circle) {\n            // @ts-ignore\n            circle.style = matchLength() || matchExtentKeyword();\n        }\n        return circle;\n    }\n    function matchEllipse() {\n        var ellipse = match(\"shape\", /^(ellipse)/i, 0);\n        if (ellipse) {\n            // @ts-ignore\n            ellipse.style = matchDistance() || matchExtentKeyword();\n        }\n        return ellipse;\n    }\n    function matchExtentKeyword() {\n        return match(\"extent-keyword\", tokens.extentKeywords, 1);\n    }\n    function matchAtPosition() {\n        if (match(\"position\", /^at/, 0)) {\n            var positioning = matchPositioning();\n            if (!positioning) {\n                error(\"Missing positioning value\");\n            }\n            return positioning;\n        }\n    }\n    function matchPositioning() {\n        var location = matchCoordinates();\n        if (location.x || location.y) {\n            return {\n                type: \"position\",\n                value: location\n            };\n        }\n    }\n    function matchCoordinates() {\n        return {\n            x: matchDistance(),\n            y: matchDistance()\n        };\n    }\n    function matchListing(matcher) {\n        var captures = matcher();\n        var result = [];\n        if (captures) {\n            result.push(captures);\n            while(scan(tokens.comma)){\n                captures = matcher();\n                if (captures) {\n                    result.push(captures);\n                } else {\n                    error(\"One extra comma\");\n                }\n            }\n        }\n        return result;\n    }\n    function matchColorStop() {\n        var color = matchColor();\n        if (!color) {\n            error(\"Expected color definition\");\n        }\n        color.length = matchDistance();\n        return color;\n    }\n    function matchColor() {\n        return matchHexColor() || matchRGBAColor() || matchRGBColor() || matchLiteralColor();\n    }\n    function matchLiteralColor() {\n        return match(\"literal\", tokens.literalColor, 0);\n    }\n    function matchHexColor() {\n        return match(\"hex\", tokens.hexColor, 1);\n    }\n    function matchRGBColor() {\n        return matchCall(tokens.rgbColor, function() {\n            return {\n                type: \"rgb\",\n                value: matchListing(matchNumber)\n            };\n        });\n    }\n    function matchRGBAColor() {\n        return matchCall(tokens.rgbaColor, function() {\n            return {\n                type: \"rgba\",\n                value: matchListing(matchNumber)\n            };\n        });\n    }\n    function matchNumber() {\n        return scan(tokens.number)[1];\n    }\n    function matchDistance() {\n        return match(\"%\", tokens.percentageValue, 1) || matchPositionKeyword() || matchLength();\n    }\n    function matchPositionKeyword() {\n        return match(\"position-keyword\", tokens.positionKeywords, 1);\n    }\n    function matchLength() {\n        return match(\"px\", tokens.pixelValue, 1) || match(\"em\", tokens.emValue, 1);\n    }\n    function match(type, pattern, captureIndex) {\n        var captures = scan(pattern);\n        if (captures) {\n            return {\n                type: type,\n                value: captures[captureIndex]\n            };\n        }\n    }\n    function scan(regexp) {\n        var blankCaptures = /^[\\n\\r\\t\\s]+/.exec(input);\n        if (blankCaptures) {\n            consume(blankCaptures[0].length);\n        }\n        var captures = regexp.exec(input);\n        if (captures) {\n            consume(captures[0].length);\n        }\n        return captures;\n    }\n    function consume(size) {\n        input = input.substring(size);\n    }\n    return function(code) {\n        input = code;\n        return getAST();\n    };\n}();\nfunction computeLinearGradient(min, width, height, angle) {\n    var rad = deg2rad(angle.value);\n    var rx = 0;\n    var ry = 0;\n    var rcx = rx + width / 2;\n    var rcy = ry + height / 2;\n    // get the length of gradient line\n    // @see https://observablehq.com/@danburzo/css-gradient-line\n    var length = Math.abs(width * Math.cos(rad)) + Math.abs(height * Math.sin(rad));\n    var x1 = min[0] + rcx - Math.cos(rad) * length / 2;\n    var y1 = min[1] + rcy - Math.sin(rad) * length / 2;\n    var x2 = min[0] + rcx + Math.cos(rad) * length / 2;\n    var y2 = min[1] + rcy + Math.sin(rad) * length / 2;\n    return {\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2\n    };\n}\nfunction computeRadialGradient(min, width, height, cx, cy, size) {\n    // 'px'\n    var x = cx.value;\n    var y = cy.value;\n    // TODO: 'em'\n    // '%'\n    if (cx.unit === UnitType.kPercentage) {\n        x = cx.value / 100 * width;\n    }\n    if (cy.unit === UnitType.kPercentage) {\n        y = cy.value / 100 * height;\n    }\n    // default to farthest-side\n    var r = Math.max((0,_antv_util__WEBPACK_IMPORTED_MODULE_22__.distanceSquareRoot)([\n        0,\n        0\n    ], [\n        x,\n        y\n    ]), (0,_antv_util__WEBPACK_IMPORTED_MODULE_22__.distanceSquareRoot)([\n        0,\n        height\n    ], [\n        x,\n        y\n    ]), (0,_antv_util__WEBPACK_IMPORTED_MODULE_22__.distanceSquareRoot)([\n        width,\n        height\n    ], [\n        x,\n        y\n    ]), (0,_antv_util__WEBPACK_IMPORTED_MODULE_22__.distanceSquareRoot)([\n        width,\n        0\n    ], [\n        x,\n        y\n    ]));\n    if (size) {\n        if (size instanceof CSSUnitValue) {\n            r = size.value;\n        } else if (size instanceof CSSKeywordValue) {\n            // @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Images/Using_CSS_gradients#example_closest-side_for_circles\n            if (size.value === \"closest-side\") {\n                r = Math.min(x, width - x, y, height - y);\n            } else if (size.value === \"farthest-side\") {\n                r = Math.max(x, width - x, y, height - y);\n            } else if (size.value === \"closest-corner\") {\n                r = Math.min((0,_antv_util__WEBPACK_IMPORTED_MODULE_22__.distanceSquareRoot)([\n                    0,\n                    0\n                ], [\n                    x,\n                    y\n                ]), (0,_antv_util__WEBPACK_IMPORTED_MODULE_22__.distanceSquareRoot)([\n                    0,\n                    height\n                ], [\n                    x,\n                    y\n                ]), (0,_antv_util__WEBPACK_IMPORTED_MODULE_22__.distanceSquareRoot)([\n                    width,\n                    height\n                ], [\n                    x,\n                    y\n                ]), (0,_antv_util__WEBPACK_IMPORTED_MODULE_22__.distanceSquareRoot)([\n                    width,\n                    0\n                ], [\n                    x,\n                    y\n                ]));\n            }\n        }\n    }\n    return {\n        x: x + min[0],\n        y: y + min[1],\n        r: r\n    };\n}\nvar regexLG = /^l\\s*\\(\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nvar regexRG = /^r\\s*\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nvar regexPR = /^p\\s*\\(\\s*([axyn])\\s*\\)\\s*(.*)/i;\nvar regexColorStop = /[\\d.]+:(#[^\\s]+|[^\\)]+\\))/gi;\nfunction spaceColorStops(colorStops) {\n    var _colorStops$length;\n    var length = colorStops.length;\n    colorStops[length - 1].length = (_colorStops$length = colorStops[length - 1].length) !== null && _colorStops$length !== void 0 ? _colorStops$length : {\n        type: \"%\",\n        value: \"100\"\n    };\n    if (length > 1) {\n        var _colorStops$0$length;\n        colorStops[0].length = (_colorStops$0$length = colorStops[0].length) !== null && _colorStops$0$length !== void 0 ? _colorStops$0$length : {\n            type: \"%\",\n            value: \"0\"\n        };\n    }\n    var previousIndex = 0;\n    var previousOffset = Number(colorStops[0].length.value);\n    for(var i = 1; i < length; i++){\n        var _colorStops$i$length;\n        // support '%' & 'px'\n        var offset = (_colorStops$i$length = colorStops[i].length) === null || _colorStops$i$length === void 0 ? void 0 : _colorStops$i$length.value;\n        if (!(0,_antv_util__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(offset) && !(0,_antv_util__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(previousOffset)) {\n            for(var j = 1; j < i - previousIndex; j++)colorStops[previousIndex + j].length = {\n                type: \"%\",\n                value: \"\".concat(previousOffset + (Number(offset) - previousOffset) * j / (i - previousIndex))\n            };\n            previousIndex = i;\n            previousOffset = Number(offset);\n        }\n    }\n}\n// The position of the gradient line's starting point.\n// different from CSS side(to top) @see https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient#values\nvar SideOrCornerToDegMap = {\n    left: 270 - 90,\n    top: 0 - 90,\n    bottom: 180 - 90,\n    right: 90 - 90,\n    \"left top\": 315 - 90,\n    \"top left\": 315 - 90,\n    \"left bottom\": 225 - 90,\n    \"bottom left\": 225 - 90,\n    \"right top\": 45 - 90,\n    \"top right\": 45 - 90,\n    \"right bottom\": 135 - 90,\n    \"bottom right\": 135 - 90\n};\nvar angleToDeg = memoize(function(orientation) {\n    var angle;\n    if (orientation.type === \"angular\") {\n        angle = Number(orientation.value);\n    } else {\n        angle = SideOrCornerToDegMap[orientation.value] || 0;\n    }\n    return getOrCreateUnitValue(angle, \"deg\");\n});\nvar positonToCSSUnitValue = memoize(function(position) {\n    var cx = 50;\n    var cy = 50;\n    var unitX = \"%\";\n    var unitY = \"%\";\n    if ((position === null || position === void 0 ? void 0 : position.type) === \"position\") {\n        var _position$value = position.value, x = _position$value.x, y = _position$value.y;\n        if ((x === null || x === void 0 ? void 0 : x.type) === \"position-keyword\") {\n            if (x.value === \"left\") {\n                cx = 0;\n            } else if (x.value === \"center\") {\n                cx = 50;\n            } else if (x.value === \"right\") {\n                cx = 100;\n            } else if (x.value === \"top\") {\n                cy = 0;\n            } else if (x.value === \"bottom\") {\n                cy = 100;\n            }\n        }\n        if ((y === null || y === void 0 ? void 0 : y.type) === \"position-keyword\") {\n            if (y.value === \"left\") {\n                cx = 0;\n            } else if (y.value === \"center\") {\n                cy = 50;\n            } else if (y.value === \"right\") {\n                cx = 100;\n            } else if (y.value === \"top\") {\n                cy = 0;\n            } else if (y.value === \"bottom\") {\n                cy = 100;\n            }\n        }\n        if ((x === null || x === void 0 ? void 0 : x.type) === \"px\" || (x === null || x === void 0 ? void 0 : x.type) === \"%\" || (x === null || x === void 0 ? void 0 : x.type) === \"em\") {\n            unitX = x === null || x === void 0 ? void 0 : x.type;\n            cx = Number(x.value);\n        }\n        if ((y === null || y === void 0 ? void 0 : y.type) === \"px\" || (y === null || y === void 0 ? void 0 : y.type) === \"%\" || (y === null || y === void 0 ? void 0 : y.type) === \"em\") {\n            unitY = y === null || y === void 0 ? void 0 : y.type;\n            cy = Number(y.value);\n        }\n    }\n    return {\n        cx: getOrCreateUnitValue(cx, unitX),\n        cy: getOrCreateUnitValue(cy, unitY)\n    };\n});\nvar parseGradient = memoize(function(colorStr) {\n    if (colorStr.indexOf(\"linear\") > -1 || colorStr.indexOf(\"radial\") > -1) {\n        var ast = parseGradient$1(colorStr);\n        return ast.map(function(_ref) {\n            var type = _ref.type, orientation = _ref.orientation, colorStops = _ref.colorStops;\n            spaceColorStops(colorStops);\n            var steps = colorStops.map(function(colorStop) {\n                // TODO: only support % for now, should calc percentage of axis length when using px/em\n                return {\n                    offset: getOrCreateUnitValue(Number(colorStop.length.value), \"%\"),\n                    color: colorStopToString(colorStop)\n                };\n            });\n            if (type === \"linear-gradient\") {\n                return new CSSGradientValue(GradientType.LinearGradient, {\n                    angle: orientation ? angleToDeg(orientation) : Odeg,\n                    steps: steps\n                });\n            }\n            if (type === \"radial-gradient\") {\n                if (!orientation) {\n                    orientation = [\n                        {\n                            type: \"shape\",\n                            value: \"circle\"\n                        }\n                    ];\n                }\n                if (orientation[0].type === \"shape\" && orientation[0].value === \"circle\") {\n                    var _positonToCSSUnitValu = positonToCSSUnitValue(orientation[0].at), cx = _positonToCSSUnitValu.cx, cy = _positonToCSSUnitValu.cy;\n                    var size;\n                    if (orientation[0].style) {\n                        var _orientation$0$style = orientation[0].style, _type = _orientation$0$style.type, value = _orientation$0$style.value;\n                        if (_type === \"extent-keyword\") {\n                            size = getOrCreateKeyword(value);\n                        } else {\n                            size = getOrCreateUnitValue(value, _type);\n                        }\n                    }\n                    return new CSSGradientValue(GradientType.RadialGradient, {\n                        cx: cx,\n                        cy: cy,\n                        size: size,\n                        steps: steps\n                    });\n                }\n            // TODO: support ellipse shape\n            // TODO: repeating-linear-gradient & repeating-radial-gradient\n            // } else if (type === 'repeating-linear-gradient') {\n            // } else if (type === 'repeating-radial-gradient') {\n            }\n            return undefined;\n        });\n    }\n    // legacy format, should be deprecated later\n    var type = colorStr[0];\n    if (colorStr[1] === \"(\" || colorStr[2] === \"(\") {\n        if (type === \"l\") {\n            var arr = regexLG.exec(colorStr);\n            if (arr) {\n                var _arr$2$match;\n                var steps = ((_arr$2$match = arr[2].match(regexColorStop)) === null || _arr$2$match === void 0 ? void 0 : _arr$2$match.map(function(stop) {\n                    return stop.split(\":\");\n                })) || [];\n                return [\n                    new CSSGradientValue(GradientType.LinearGradient, {\n                        angle: getOrCreateUnitValue(parseFloat(arr[1]), \"deg\"),\n                        steps: steps.map(function(_ref2) {\n                            var _ref3 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_ref2, 2), offset = _ref3[0], color = _ref3[1];\n                            return {\n                                offset: getOrCreateUnitValue(Number(offset) * 100, \"%\"),\n                                color: color\n                            };\n                        })\n                    })\n                ];\n            }\n        } else if (type === \"r\") {\n            var parsedRadialGradient = parseRadialGradient(colorStr);\n            if (parsedRadialGradient) {\n                if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_24__[\"default\"])(parsedRadialGradient)) {\n                    colorStr = parsedRadialGradient;\n                } else {\n                    return [\n                        new CSSGradientValue(GradientType.RadialGradient, parsedRadialGradient)\n                    ];\n                }\n            }\n        } else if (type === \"p\") {\n            return parsePattern(colorStr);\n        }\n    }\n});\nfunction parseRadialGradient(gradientStr) {\n    var arr = regexRG.exec(gradientStr);\n    if (arr) {\n        var _arr$4$match;\n        var steps = ((_arr$4$match = arr[4].match(regexColorStop)) === null || _arr$4$match === void 0 ? void 0 : _arr$4$match.map(function(stop) {\n            return stop.split(\":\");\n        })) || [];\n        return {\n            cx: getOrCreateUnitValue(50, \"%\"),\n            cy: getOrCreateUnitValue(50, \"%\"),\n            steps: steps.map(function(_ref4) {\n                var _ref5 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_ref4, 2), offset = _ref5[0], color = _ref5[1];\n                return {\n                    offset: getOrCreateUnitValue(Number(offset) * 100, \"%\"),\n                    color: color\n                };\n            })\n        };\n    }\n    return null;\n}\nfunction parsePattern(patternStr) {\n    var arr = regexPR.exec(patternStr);\n    if (arr) {\n        var repetition = arr[1];\n        var src = arr[2];\n        switch(repetition){\n            case \"a\":\n                repetition = \"repeat\";\n                break;\n            case \"x\":\n                repetition = \"repeat-x\";\n                break;\n            case \"y\":\n                repetition = \"repeat-y\";\n                break;\n            case \"n\":\n                repetition = \"no-repeat\";\n                break;\n            default:\n                repetition = \"no-repeat\";\n        }\n        return {\n            image: src,\n            // @ts-ignore\n            repetition: repetition\n        };\n    }\n    return null;\n}\n/**\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/createPattern\n */ function isCSSGradientValue(object) {\n    return !!object.type && !!object.value;\n}\nfunction isPattern(object) {\n    return object && !!object.image;\n}\nfunction isCSSRGB(object) {\n    return object && !(0,_antv_util__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(object.r) && !(0,_antv_util__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(object.g) && !(0,_antv_util__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(object.b);\n}\n/**\n * @see https://github.com/WebKit/WebKit/blob/main/Source/WebCore/css/parser/CSSParser.cpp#L97\n */ var parseColor = memoize(function(colorStr) {\n    if (isPattern(colorStr)) {\n        return _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n            repetition: \"repeat\"\n        }, colorStr);\n    }\n    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(colorStr)) {\n        colorStr = \"\";\n    }\n    if (colorStr === \"transparent\") {\n        // transparent black\n        return transparentColor;\n    }\n    if (colorStr === \"currentColor\") {\n        // @see https://github.com/adobe-webplatform/Snap.svg/issues/526\n        colorStr = \"black\";\n    } else if (colorStr === \"none\") {\n        return noneColor;\n    }\n    // support CSS gradient syntax\n    var g = parseGradient(colorStr);\n    if (g) {\n        return g;\n    }\n    // constants\n    var color$1 = color(colorStr);\n    var rgba = [\n        0,\n        0,\n        0,\n        0\n    ];\n    if (color$1 !== null) {\n        rgba[0] = color$1.r || 0;\n        rgba[1] = color$1.g || 0;\n        rgba[2] = color$1.b || 0;\n        rgba[3] = color$1.opacity;\n    }\n    // return new CSSRGB(...rgba);\n    return getOrCreateRGBA.apply(void 0, rgba);\n});\nfunction mergeColors(left, right) {\n    // only support constant value, exclude gradient & pattern\n    if (!isCSSRGB(left) || !isCSSRGB(right)) {\n        return;\n    }\n    return [\n        [\n            Number(left.r),\n            Number(left.g),\n            Number(left.b),\n            Number(left.alpha)\n        ],\n        [\n            Number(right.r),\n            Number(right.g),\n            Number(right.b),\n            Number(right.alpha)\n        ],\n        function(color) {\n            var rgba = color.slice();\n            if (rgba[3]) {\n                for(var i = 0; i < 3; i++)rgba[i] = Math.round((0,_antv_util__WEBPACK_IMPORTED_MODULE_25__[\"default\"])(rgba[i], 0, 255));\n            }\n            rgba[3] = (0,_antv_util__WEBPACK_IMPORTED_MODULE_25__[\"default\"])(rgba[3], 0, 1);\n            return \"rgba(\".concat(rgba.join(\",\"), \")\");\n        }\n    ];\n}\nfunction parseDimension(unitRegExp, string) {\n    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(string)) {\n        return getOrCreateUnitValue(0, \"px\");\n    }\n    string = \"\".concat(string).trim().toLowerCase();\n    if (isFinite(Number(string))) {\n        if (\"px\".search(unitRegExp) >= 0) {\n            return getOrCreateUnitValue(Number(string), \"px\");\n        }\n        if (\"deg\".search(unitRegExp) >= 0) {\n            return getOrCreateUnitValue(Number(string), \"deg\");\n        }\n    }\n    var matchedUnits = [];\n    string = string.replace(unitRegExp, function(match) {\n        matchedUnits.push(match);\n        return \"U\".concat(match);\n    });\n    var taggedUnitRegExp = \"U(\".concat(unitRegExp.source, \")\");\n    return matchedUnits.map(function(unit) {\n        return getOrCreateUnitValue(Number(string.replace(new RegExp(\"U\".concat(unit), \"g\"), \"\").replace(new RegExp(taggedUnitRegExp, \"g\"), \"*0\")), unit);\n    })[0];\n}\n/**\n * <length>\n * @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/length\n * length with only absolute unit, eg. 1px\n */ var parseLengthUnmemoize = function parseLengthUnmemoize(css) {\n    return parseDimension(new RegExp(\"px\", \"g\"), css);\n};\nvar parseLength = memoize(parseLengthUnmemoize);\n/**\n * <percentage>\n * @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/percentage\n */ var parserPercentageUnmemoize = function parserPercentageUnmemoize(css) {\n    return parseDimension(new RegExp(\"%\", \"g\"), css);\n};\nmemoize(parserPercentageUnmemoize);\n/**\n * length with absolute or relative unit,\n * eg. 1px, 0.7em, 50%, calc(100% - 200px);\n *\n * @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/length-percentage\n */ var parseLengthOrPercentageUnmemoize = function parseLengthOrPercentageUnmemoize(css) {\n    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(css) || isFinite(Number(css))) {\n        // Number(css) is NaN\n        return getOrCreateUnitValue(Number(css) || 0, \"px\");\n    // return Number(css);\n    }\n    return parseDimension(new RegExp(\"px|%|em|rem\", \"g\"), css);\n};\nvar parseLengthOrPercentage = memoize(parseLengthOrPercentageUnmemoize);\nvar parseAngleUnmemoize = function parseAngleUnmemoize(css) {\n    return parseDimension(new RegExp(\"deg|rad|grad|turn\", \"g\"), css);\n};\nvar parseAngle = memoize(parseAngleUnmemoize);\n/**\n * merge CSSUnitValue\n *\n * @example\n * 10px + 20px = 30px\n * 10deg + 10rad\n * 10% + 20% = 30%\n */ function mergeDimensions(left, right, target, nonNegative) {\n    var index = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    var unit = \"\";\n    var leftValue = left.value || 0;\n    var rightValue = right.value || 0;\n    var canonicalUnit = toCanonicalUnit(left.unit);\n    var leftCanonicalUnitValue = left.convertTo(canonicalUnit);\n    var rightCanonicalUnitValue = right.convertTo(canonicalUnit);\n    if (leftCanonicalUnitValue && rightCanonicalUnitValue) {\n        leftValue = leftCanonicalUnitValue.value;\n        rightValue = rightCanonicalUnitValue.value;\n        unit = unitTypeToString(left.unit);\n    } else if (CSSUnitValue.isLength(left.unit) || CSSUnitValue.isLength(right.unit)) {\n        leftValue = convertPercentUnit(left, index, target);\n        rightValue = convertPercentUnit(right, index, target);\n        unit = \"px\";\n    }\n    return [\n        leftValue,\n        rightValue,\n        function(value) {\n            if (nonNegative) {\n                value = Math.max(value, 0);\n            }\n            return value + unit;\n        }\n    ];\n}\nfunction convertAngleUnit(value) {\n    var deg = 0;\n    if (value.unit === UnitType.kDegrees) {\n        deg = value.value;\n    } else if (value.unit === UnitType.kRadians) {\n        deg = rad2deg(Number(value.value));\n    } else if (value.unit === UnitType.kTurns) {\n        deg = turn2deg(Number(value.value));\n    } else if (value.value) {\n        deg = value.value;\n    }\n    return deg;\n}\nfunction parseDimensionArrayFormat(string, size) {\n    var parsed;\n    if (Array.isArray(string)) {\n        // [1, '2px', 3]\n        parsed = string.map(function(segment) {\n            return Number(segment);\n        });\n    } else if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_24__[\"default\"])(string)) {\n        parsed = string.split(\" \").map(function(segment) {\n            return Number(segment);\n        });\n    } else if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(string)) {\n        parsed = [\n            string\n        ];\n    }\n    if (size === 2) {\n        if (parsed.length === 1) {\n            return [\n                parsed[0],\n                parsed[0]\n            ];\n        }\n        return [\n            parsed[0],\n            parsed[1]\n        ];\n    }\n    if (size === 4) {\n        if (parsed.length === 1) {\n            return [\n                parsed[0],\n                parsed[0],\n                parsed[0],\n                parsed[0]\n            ];\n        }\n        if (parsed.length === 2) {\n            return [\n                parsed[0],\n                parsed[1],\n                parsed[0],\n                parsed[1]\n            ];\n        }\n        if (parsed.length === 3) {\n            return [\n                parsed[0],\n                parsed[1],\n                parsed[2],\n                parsed[1]\n            ];\n        }\n        return [\n            parsed[0],\n            parsed[1],\n            parsed[2],\n            parsed[3]\n        ];\n    }\n    if (size === \"even\" && parsed.length % 2 === 1) {\n        return [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(parsed), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(parsed));\n    }\n    return parsed;\n}\n// export function mergeDimensionList(\n//   left: CSSUnitValue[],\n//   right: CSSUnitValue[],\n//   target: IElement | null,\n// ): [number[], number[], (list: number[]) => string] | undefined {\n//   if (left.length !== right.length) {\n//     return;\n//   }\n//   const unit = left[0].unit;\n//   return [\n//     left.map((l) => l.value),\n//     right.map((l) => l.value),\n//     (values: number[]) => {\n//       return values.map((n) => new CSSUnitValue(n, unit)).join(' ');\n//     },\n//   ];\n// }\nfunction convertPercentUnit(valueWithUnit, vec3Index, target) {\n    var useMin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    if (valueWithUnit.unit === UnitType.kPixels) {\n        return Number(valueWithUnit.value);\n    }\n    if (valueWithUnit.unit === UnitType.kPercentage && target) {\n        var bounds = target.nodeName === Shape.GROUP ? target.getLocalBounds() : target.getGeometryBounds();\n        return (useMin ? bounds.min[vec3Index] : 0) + valueWithUnit.value / 100 * bounds.halfExtents[vec3Index] * 2;\n    }\n    return 0;\n}\nvar parseParam = function parseParam(css) {\n    return parseDimension(/deg|rad|grad|turn|px|%/g, css);\n};\nvar supportedFilters = [\n    \"blur\",\n    \"brightness\",\n    \"drop-shadow\",\n    \"contrast\",\n    \"grayscale\",\n    \"sepia\",\n    \"saturate\",\n    \"hue-rotate\",\n    \"invert\"\n];\nfunction parseFilter() {\n    var filterStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    filterStr = filterStr.toLowerCase().trim();\n    if (filterStr === \"none\") {\n        return [];\n    }\n    var filterRegExp = /\\s*([\\w-]+)\\(([^)]*)\\)/g;\n    var result = [];\n    var match;\n    var prevLastIndex = 0;\n    while(match = filterRegExp.exec(filterStr)){\n        if (match.index !== prevLastIndex) {\n            return [];\n        }\n        prevLastIndex = match.index + match[0].length;\n        if (supportedFilters.indexOf(match[1]) > -1) {\n            result.push({\n                name: match[1],\n                params: match[2].split(\" \").map(function(p) {\n                    return parseParam(p) || parseColor(p);\n                })\n            });\n        }\n        if (filterRegExp.lastIndex === filterStr.length) {\n            return result;\n        }\n    }\n    return [];\n}\nfunction numberToString(x) {\n    // scale(0.00000001) -> scale(0)\n    // return x.toFixed(6).replace(/0+$/, '').replace(/\\.$/, '');\n    return x.toString();\n}\n/**\n * parse string or number to CSSUnitValue(numeric)\n *\n * eg.\n * * 0 -> CSSUnitValue(0)\n * * '2' -> CSSUnitValue(2)\n */ var parseNumberUnmemoize = function parseNumberUnmemoize(string) {\n    if (typeof string === \"number\") {\n        return getOrCreateUnitValue(string);\n    }\n    if (/^\\s*[-+]?(\\d*\\.)?\\d+\\s*$/.test(string)) {\n        return getOrCreateUnitValue(Number(string));\n    }\n    return getOrCreateUnitValue(0);\n};\nvar parseNumber = memoize(parseNumberUnmemoize);\nmemoize(function(string) {\n    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_24__[\"default\"])(string)) {\n        return string.split(\" \").map(parseNumber);\n    }\n    return string.map(parseNumber);\n});\nfunction mergeNumbers(left, right) {\n    return [\n        left,\n        right,\n        numberToString\n    ];\n}\nfunction clampedMergeNumbers(min, max) {\n    return function(left, right) {\n        return [\n            left,\n            right,\n            function(x) {\n                return numberToString((0,_antv_util__WEBPACK_IMPORTED_MODULE_25__[\"default\"])(x, min, max));\n            }\n        ];\n    };\n}\nfunction mergeNumberLists(left, right) {\n    if (left.length !== right.length) {\n        return;\n    }\n    return [\n        left,\n        right,\n        function(numberList) {\n            return numberList;\n        }\n    ];\n}\nfunction getOrCalculatePathTotalLength(path) {\n    if (path.parsedStyle.d.totalLength === 0) {\n        path.parsedStyle.d.totalLength = (0,_antv_util__WEBPACK_IMPORTED_MODULE_26__.getTotalLength)(path.parsedStyle.d.absolutePath);\n    }\n    return path.parsedStyle.d.totalLength;\n}\nfunction getOrCalculatePolylineTotalLength(polyline) {\n    if (polyline.parsedStyle.points.totalLength === 0) {\n        polyline.parsedStyle.points.totalLength = (0,_antv_g_math__WEBPACK_IMPORTED_MODULE_11__.polylineLength)(polyline.parsedStyle.points.points);\n    }\n    return polyline.parsedStyle.points.totalLength;\n}\nfunction removeRedundantMCommand(path) {\n    for(var i = 0; i < path.length; i++){\n        var prevSegment = path[i - 1];\n        var segment = path[i];\n        var cmd = segment[0];\n        if (cmd === \"M\") {\n            if (prevSegment) {\n                var prevCmd = prevSegment[0];\n                var srcPoint = [\n                    segment[1],\n                    segment[2]\n                ];\n                var destPoint = void 0;\n                if (prevCmd === \"L\" || prevCmd === \"M\") {\n                    destPoint = [\n                        prevSegment[1],\n                        prevSegment[2]\n                    ];\n                } else if (prevCmd === \"C\" || prevCmd === \"A\" || prevCmd === \"Q\") {\n                    destPoint = [\n                        prevSegment[prevSegment.length - 2],\n                        prevSegment[prevSegment.length - 1]\n                    ];\n                }\n                if (destPoint && isSamePoint(srcPoint, destPoint)) {\n                    path.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n    }\n}\nfunction hasArcOrBezier(path) {\n    var hasArc = false;\n    var count = path.length;\n    for(var i = 0; i < count; i++){\n        var params = path[i];\n        var cmd = params[0];\n        if (cmd === \"C\" || cmd === \"A\" || cmd === \"Q\") {\n            hasArc = true;\n            break;\n        }\n    }\n    return hasArc;\n}\nfunction extractPolygons(pathArray) {\n    var polygons = [];\n    var polylines = [];\n    var points = []; // 防止第一个命令不是 'M'\n    for(var i = 0; i < pathArray.length; i++){\n        var params = pathArray[i];\n        var cmd = params[0];\n        if (cmd === \"M\") {\n            // 遇到 'M' 判定是否是新数组，新数组中没有点\n            if (points.length) {\n                // 如果存在点，则说明没有遇到 'Z'，开始了一个新的多边形\n                polylines.push(points);\n                points = []; // 创建新的点\n            }\n            points.push([\n                params[1],\n                params[2]\n            ]);\n        } else if (cmd === \"Z\") {\n            if (points.length) {\n                // 存在点\n                polygons.push(points);\n                points = []; // 开始新的点集合\n            }\n        // 如果不存在点，同时 'Z'，则说明是错误，不处理\n        } else {\n            points.push([\n                params[1],\n                params[2]\n            ]);\n        }\n    }\n    // 说明 points 未放入 polygons 或者 polyline\n    // 仅当只有一个 M，没有 Z 时会发生这种情况\n    if (points.length > 0) {\n        polylines.push(points);\n    }\n    return {\n        polygons: polygons,\n        polylines: polylines\n    };\n}\nfunction isSamePoint(point1, point2) {\n    return point1[0] === point2[0] && point1[1] === point2[1];\n}\nfunction getPathBBox(segments, lineWidth) {\n    var xArr = [];\n    var yArr = [];\n    var segmentsWithAngle = [];\n    for(var i = 0; i < segments.length; i++){\n        var segment = segments[i];\n        var currentPoint = segment.currentPoint, params = segment.params, prePoint = segment.prePoint;\n        var box = void 0;\n        switch(segment.command){\n            case \"Q\":\n                box = (0,_antv_g_math__WEBPACK_IMPORTED_MODULE_11__.quadBox)(prePoint[0], prePoint[1], params[1], params[2], params[3], params[4]);\n                break;\n            case \"C\":\n                box = (0,_antv_g_math__WEBPACK_IMPORTED_MODULE_11__.cubicBox)(prePoint[0], prePoint[1], params[1], params[2], params[3], params[4], params[5], params[6]);\n                break;\n            case \"A\":\n                var arcParams = segment.arcParams;\n                box = (0,_antv_g_math__WEBPACK_IMPORTED_MODULE_11__.arcBox)(arcParams.cx, arcParams.cy, arcParams.rx, arcParams.ry, arcParams.xRotation, arcParams.startAngle, arcParams.endAngle);\n                break;\n            default:\n                xArr.push(currentPoint[0]);\n                yArr.push(currentPoint[1]);\n                break;\n        }\n        if (box) {\n            segment.box = box;\n            xArr.push(box.x, box.x + box.width);\n            yArr.push(box.y, box.y + box.height);\n        }\n        if (lineWidth && (segment.command === \"L\" || segment.command === \"M\") && segment.prePoint && segment.nextPoint) {\n            segmentsWithAngle.push(segment);\n        }\n    }\n    // bbox calculation should ignore NaN for path attribute\n    // ref: https://github.com/antvis/g/issues/210\n    // ref: https://github.com/antvis/G2/issues/3109\n    xArr = xArr.filter(function(item) {\n        return !Number.isNaN(item) && item !== Infinity && item !== -Infinity;\n    });\n    yArr = yArr.filter(function(item) {\n        return !Number.isNaN(item) && item !== Infinity && item !== -Infinity;\n    });\n    var minX = (0,_antv_util__WEBPACK_IMPORTED_MODULE_27__[\"default\"])(xArr);\n    var minY = (0,_antv_util__WEBPACK_IMPORTED_MODULE_27__[\"default\"])(yArr);\n    var maxX = (0,_antv_util__WEBPACK_IMPORTED_MODULE_28__[\"default\"])(xArr);\n    var maxY = (0,_antv_util__WEBPACK_IMPORTED_MODULE_28__[\"default\"])(yArr);\n    if (segmentsWithAngle.length === 0) {\n        return {\n            x: minX,\n            y: minY,\n            width: maxX - minX,\n            height: maxY - minY\n        };\n    }\n    for(var _i = 0; _i < segmentsWithAngle.length; _i++){\n        var _segment = segmentsWithAngle[_i];\n        var _currentPoint = _segment.currentPoint;\n        var extra = void 0;\n        if (_currentPoint[0] === minX) {\n            extra = getExtraFromSegmentWithAngle(_segment, lineWidth);\n            minX -= extra.xExtra;\n        } else if (_currentPoint[0] === maxX) {\n            extra = getExtraFromSegmentWithAngle(_segment, lineWidth);\n            maxX += extra.xExtra;\n        }\n        if (_currentPoint[1] === minY) {\n            extra = getExtraFromSegmentWithAngle(_segment, lineWidth);\n            minY -= extra.yExtra;\n        } else if (_currentPoint[1] === maxY) {\n            extra = getExtraFromSegmentWithAngle(_segment, lineWidth);\n            maxY += extra.yExtra;\n        }\n    }\n    return {\n        x: minX,\n        y: minY,\n        width: maxX - minX,\n        height: maxY - minY\n    };\n}\nfunction getExtraFromSegmentWithAngle(segment, lineWidth) {\n    var prePoint = segment.prePoint, currentPoint = segment.currentPoint, nextPoint = segment.nextPoint;\n    var currentAndPre = Math.pow(currentPoint[0] - prePoint[0], 2) + Math.pow(currentPoint[1] - prePoint[1], 2);\n    var currentAndNext = Math.pow(currentPoint[0] - nextPoint[0], 2) + Math.pow(currentPoint[1] - nextPoint[1], 2);\n    var preAndNext = Math.pow(prePoint[0] - nextPoint[0], 2) + Math.pow(prePoint[1] - nextPoint[1], 2);\n    // 以 currentPoint 为顶点的夹角\n    var currentAngle = Math.acos((currentAndPre + currentAndNext - preAndNext) / (2 * Math.sqrt(currentAndPre) * Math.sqrt(currentAndNext)));\n    // 夹角为空、 0 或 PI 时，不需要计算夹角处的额外宽度\n    // 注意: 由于计算精度问题，夹角为 0 的情况计算出来的角度可能是一个很小的值，还需要判断其与 0 是否近似相等\n    if (!currentAngle || Math.sin(currentAngle) === 0 || (0,_antv_util__WEBPACK_IMPORTED_MODULE_29__[\"default\"])(currentAngle, 0)) {\n        return {\n            xExtra: 0,\n            yExtra: 0\n        };\n    }\n    var xAngle = Math.abs(Math.atan2(nextPoint[1] - currentPoint[1], nextPoint[0] - currentPoint[0]));\n    var yAngle = Math.abs(Math.atan2(nextPoint[0] - currentPoint[0], nextPoint[1] - currentPoint[1]));\n    // 将夹角转为锐角\n    xAngle = xAngle > Math.PI / 2 ? Math.PI - xAngle : xAngle;\n    yAngle = yAngle > Math.PI / 2 ? Math.PI - yAngle : yAngle;\n    // 这里不考虑在水平和垂直方向的投影，直接使用最大差值\n    // 由于上层统一加减了二分之一线宽，这里需要进行弥补\n    var extra = {\n        // 水平方向投影\n        xExtra: Math.cos(currentAngle / 2 - xAngle) * (lineWidth / 2 * (1 / Math.sin(currentAngle / 2))) - lineWidth / 2 || 0,\n        // 垂直方向投影\n        yExtra: Math.cos(yAngle - currentAngle / 2) * (lineWidth / 2 * (1 / Math.sin(currentAngle / 2))) - lineWidth / 2 || 0\n    };\n    return extra;\n}\n// 点对称\nfunction toSymmetry(point, center) {\n    return [\n        center[0] + (center[0] - point[0]),\n        center[1] + (center[1] - point[1])\n    ];\n}\nvar angleBetween = function angleBetween(v0, v1) {\n    var p = v0.x * v1.x + v0.y * v1.y;\n    var n = Math.sqrt((Math.pow(v0.x, 2) + Math.pow(v0.y, 2)) * (Math.pow(v1.x, 2) + Math.pow(v1.y, 2)));\n    var sign = v0.x * v1.y - v0.y * v1.x < 0 ? -1 : 1;\n    var angle = sign * Math.acos(p / n);\n    return angle;\n};\n/**\n * @see https://github.com/rveciana/svg-path-properties/blob/b6bd9a322966f6ef7a311872d80c56e3718de861/src/arc.ts#L121\n */ var pointOnEllipticalArc = function pointOnEllipticalArc(p0, rx, ry, xAxisRotation, largeArcFlag, sweepFlag, p1, t) {\n    // In accordance to: http://www.w3.org/TR/SVG/implnote.html#ArcOutOfRangeParameters\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n    xAxisRotation = (0,_antv_util__WEBPACK_IMPORTED_MODULE_30__[\"default\"])(xAxisRotation, 360);\n    var xAxisRotationRadians = deg2rad(xAxisRotation);\n    // If the endpoints are identical, then this is equivalent to omitting the elliptical arc segment entirely.\n    if (p0.x === p1.x && p0.y === p1.y) {\n        return {\n            x: p0.x,\n            y: p0.y,\n            ellipticalArcAngle: 0\n        }; // Check if angle is correct\n    }\n    // If rx = 0 or ry = 0 then this arc is treated as a straight line segment joining the endpoints.\n    if (rx === 0 || ry === 0) {\n        // return this.pointOnLine(p0, p1, t);\n        return {\n            x: 0,\n            y: 0,\n            ellipticalArcAngle: 0\n        }; // Check if angle is correct\n    }\n    // Following \"Conversion from endpoint to center parameterization\"\n    // http://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter\n    // Step #1: Compute transformedPoint\n    var dx = (p0.x - p1.x) / 2;\n    var dy = (p0.y - p1.y) / 2;\n    var transformedPoint = {\n        x: Math.cos(xAxisRotationRadians) * dx + Math.sin(xAxisRotationRadians) * dy,\n        y: -Math.sin(xAxisRotationRadians) * dx + Math.cos(xAxisRotationRadians) * dy\n    };\n    // Ensure radii are large enough\n    var radiiCheck = Math.pow(transformedPoint.x, 2) / Math.pow(rx, 2) + Math.pow(transformedPoint.y, 2) / Math.pow(ry, 2);\n    if (radiiCheck > 1) {\n        rx *= Math.sqrt(radiiCheck);\n        ry *= Math.sqrt(radiiCheck);\n    }\n    // Step #2: Compute transformedCenter\n    var cSquareNumerator = Math.pow(rx, 2) * Math.pow(ry, 2) - Math.pow(rx, 2) * Math.pow(transformedPoint.y, 2) - Math.pow(ry, 2) * Math.pow(transformedPoint.x, 2);\n    var cSquareRootDenom = Math.pow(rx, 2) * Math.pow(transformedPoint.y, 2) + Math.pow(ry, 2) * Math.pow(transformedPoint.x, 2);\n    var cRadicand = cSquareNumerator / cSquareRootDenom;\n    // Make sure this never drops below zero because of precision\n    cRadicand = cRadicand < 0 ? 0 : cRadicand;\n    var cCoef = (largeArcFlag !== sweepFlag ? 1 : -1) * Math.sqrt(cRadicand);\n    var transformedCenter = {\n        x: cCoef * (rx * transformedPoint.y / ry),\n        y: cCoef * (-(ry * transformedPoint.x) / rx)\n    };\n    // Step #3: Compute center\n    var center = {\n        x: Math.cos(xAxisRotationRadians) * transformedCenter.x - Math.sin(xAxisRotationRadians) * transformedCenter.y + (p0.x + p1.x) / 2,\n        y: Math.sin(xAxisRotationRadians) * transformedCenter.x + Math.cos(xAxisRotationRadians) * transformedCenter.y + (p0.y + p1.y) / 2\n    };\n    // Step #4: Compute start/sweep angles\n    // Start angle of the elliptical arc prior to the stretch and rotate operations.\n    // Difference between the start and end angles\n    var startVector = {\n        x: (transformedPoint.x - transformedCenter.x) / rx,\n        y: (transformedPoint.y - transformedCenter.y) / ry\n    };\n    var startAngle = angleBetween({\n        x: 1,\n        y: 0\n    }, startVector);\n    var endVector = {\n        x: (-transformedPoint.x - transformedCenter.x) / rx,\n        y: (-transformedPoint.y - transformedCenter.y) / ry\n    };\n    var sweepAngle = angleBetween(startVector, endVector);\n    if (!sweepFlag && sweepAngle > 0) {\n        sweepAngle -= 2 * Math.PI;\n    } else if (sweepFlag && sweepAngle < 0) {\n        sweepAngle += 2 * Math.PI;\n    }\n    // We use % instead of `mod(..)` because we want it to be -360deg to 360deg(but actually in radians)\n    sweepAngle %= 2 * Math.PI;\n    // From http://www.w3.org/TR/SVG/implnote.html#ArcParameterizationAlternatives\n    var angle = startAngle + sweepAngle * t;\n    var ellipseComponentX = rx * Math.cos(angle);\n    var ellipseComponentY = ry * Math.sin(angle);\n    var point = {\n        x: Math.cos(xAxisRotationRadians) * ellipseComponentX - Math.sin(xAxisRotationRadians) * ellipseComponentY + center.x,\n        y: Math.sin(xAxisRotationRadians) * ellipseComponentX + Math.cos(xAxisRotationRadians) * ellipseComponentY + center.y,\n        ellipticalArcStartAngle: startAngle,\n        ellipticalArcEndAngle: startAngle + sweepAngle,\n        ellipticalArcAngle: angle,\n        ellipticalArcCenter: center,\n        resultantRx: rx,\n        resultantRy: ry\n    };\n    return point;\n};\nfunction path2Segments(path) {\n    var segments = [];\n    var currentPoint = null; // 当前图形\n    var nextParams = null; // 下一节点的 path 参数\n    var startMovePoint = null; // 开始 M 的点，可能会有多个\n    var lastStartMovePointIndex = 0; // 最近一个开始点 M 的索引\n    var count = path.length;\n    for(var i = 0; i < count; i++){\n        var params = path[i];\n        nextParams = path[i + 1];\n        var command = params[0];\n        // 数学定义上的参数，便于后面的计算\n        var segment = {\n            command: command,\n            prePoint: currentPoint,\n            params: params,\n            startTangent: null,\n            endTangent: null,\n            currentPoint: null,\n            nextPoint: null,\n            arcParams: null,\n            box: null,\n            cubicParams: null\n        };\n        switch(command){\n            case \"M\":\n                startMovePoint = [\n                    params[1],\n                    params[2]\n                ];\n                lastStartMovePointIndex = i;\n                break;\n            case \"A\":\n                var arcParams = getArcParams(currentPoint, params);\n                segment.arcParams = arcParams;\n                break;\n        }\n        if (command === \"Z\") {\n            // 有了 Z 后，当前节点从开始 M 的点开始\n            currentPoint = startMovePoint;\n            // 如果当前点的命令为 Z，相当于当前点为最近一个 M 点，则下一个点直接指向最近一个 M 点的下一个点\n            nextParams = path[lastStartMovePointIndex + 1];\n        } else {\n            var len = params.length;\n            currentPoint = [\n                params[len - 2],\n                params[len - 1]\n            ];\n        }\n        if (nextParams && nextParams[0] === \"Z\") {\n            // 如果下一个点的命令为 Z，则下一个点直接指向最近一个 M 点\n            nextParams = path[lastStartMovePointIndex];\n            if (segments[lastStartMovePointIndex]) {\n                // 如果下一个点的命令为 Z，则最近一个 M 点的前一个点为当前点\n                segments[lastStartMovePointIndex].prePoint = currentPoint;\n            }\n        }\n        segment.currentPoint = currentPoint;\n        // 如果当前点与最近一个 M 点相同，则最近一个 M 点的前一个点为当前点的前一个点\n        if (segments[lastStartMovePointIndex] && isSamePoint(currentPoint, segments[lastStartMovePointIndex].currentPoint)) {\n            segments[lastStartMovePointIndex].prePoint = segment.prePoint;\n        }\n        var nextPoint = nextParams ? [\n            nextParams[nextParams.length - 2],\n            nextParams[nextParams.length - 1]\n        ] : null;\n        segment.nextPoint = nextPoint;\n        // Add startTangent and endTangent\n        var prePoint = segment.prePoint;\n        if ([\n            \"L\",\n            \"H\",\n            \"V\"\n        ].includes(command)) {\n            segment.startTangent = [\n                prePoint[0] - currentPoint[0],\n                prePoint[1] - currentPoint[1]\n            ];\n            segment.endTangent = [\n                currentPoint[0] - prePoint[0],\n                currentPoint[1] - prePoint[1]\n            ];\n        } else if (command === \"Q\") {\n            // 二次贝塞尔曲线只有一个控制点\n            var cp = [\n                params[1],\n                params[2]\n            ];\n            // 二次贝塞尔曲线的终点为 currentPoint\n            segment.startTangent = [\n                prePoint[0] - cp[0],\n                prePoint[1] - cp[1]\n            ];\n            segment.endTangent = [\n                currentPoint[0] - cp[0],\n                currentPoint[1] - cp[1]\n            ];\n        } else if (command === \"T\") {\n            var preSegment = segments[i - 1];\n            var _cp = toSymmetry(preSegment.currentPoint, prePoint);\n            if (preSegment.command === \"Q\") {\n                segment.command = \"Q\";\n                segment.startTangent = [\n                    prePoint[0] - _cp[0],\n                    prePoint[1] - _cp[1]\n                ];\n                segment.endTangent = [\n                    currentPoint[0] - _cp[0],\n                    currentPoint[1] - _cp[1]\n                ];\n            } else {\n                // @ts-ignore\n                segment.command = \"TL\";\n                segment.startTangent = [\n                    prePoint[0] - currentPoint[0],\n                    prePoint[1] - currentPoint[1]\n                ];\n                segment.endTangent = [\n                    currentPoint[0] - prePoint[0],\n                    currentPoint[1] - prePoint[1]\n                ];\n            }\n        } else if (command === \"C\") {\n            // 三次贝塞尔曲线有两个控制点\n            var cp1 = [\n                params[1],\n                params[2]\n            ];\n            var cp2 = [\n                params[3],\n                params[4]\n            ];\n            segment.startTangent = [\n                prePoint[0] - cp1[0],\n                prePoint[1] - cp1[1]\n            ];\n            segment.endTangent = [\n                currentPoint[0] - cp2[0],\n                currentPoint[1] - cp2[1]\n            ];\n            // horizontal line, eg. ['C', 100, 100, 100, 100, 200, 200]\n            if (segment.startTangent[0] === 0 && segment.startTangent[1] === 0) {\n                segment.startTangent = [\n                    cp1[0] - cp2[0],\n                    cp1[1] - cp2[1]\n                ];\n            }\n            if (segment.endTangent[0] === 0 && segment.endTangent[1] === 0) {\n                segment.endTangent = [\n                    cp2[0] - cp1[0],\n                    cp2[1] - cp1[1]\n                ];\n            }\n        } else if (command === \"S\") {\n            var _preSegment = segments[i - 1];\n            var _cp2 = toSymmetry(_preSegment.currentPoint, prePoint);\n            var _cp3 = [\n                params[1],\n                params[2]\n            ];\n            if (_preSegment.command === \"C\") {\n                segment.command = \"C\"; // 将 S 命令变换为 C 命令\n                segment.startTangent = [\n                    prePoint[0] - _cp2[0],\n                    prePoint[1] - _cp2[1]\n                ];\n                segment.endTangent = [\n                    currentPoint[0] - _cp3[0],\n                    currentPoint[1] - _cp3[1]\n                ];\n            } else {\n                // @ts-ignore\n                segment.command = \"SQ\"; // 将 S 命令变换为 SQ 命令\n                segment.startTangent = [\n                    prePoint[0] - _cp3[0],\n                    prePoint[1] - _cp3[1]\n                ];\n                segment.endTangent = [\n                    currentPoint[0] - _cp3[0],\n                    currentPoint[1] - _cp3[1]\n                ];\n            }\n        } else if (command === \"A\") {\n            var _getTangentAtRatio = getTangentAtRatio(segment, 0), dx1 = _getTangentAtRatio.x, dy1 = _getTangentAtRatio.y;\n            var _getTangentAtRatio2 = getTangentAtRatio(segment, 1, false), dx2 = _getTangentAtRatio2.x, dy2 = _getTangentAtRatio2.y;\n            segment.startTangent = [\n                dx1,\n                dy1\n            ];\n            segment.endTangent = [\n                dx2,\n                dy2\n            ];\n        }\n        segments.push(segment);\n    }\n    return segments;\n}\n/**\n * Use length instead of ratio\n */ function getTangentAtRatio(segment, ratio) {\n    var sign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var _segment$arcParams = segment.arcParams, _segment$arcParams$rx = _segment$arcParams.rx, rx = _segment$arcParams$rx === void 0 ? 0 : _segment$arcParams$rx, _segment$arcParams$ry = _segment$arcParams.ry, ry = _segment$arcParams$ry === void 0 ? 0 : _segment$arcParams$ry, xRotation = _segment$arcParams.xRotation, arcFlag = _segment$arcParams.arcFlag, sweepFlag = _segment$arcParams.sweepFlag;\n    var p1 = pointOnEllipticalArc({\n        x: segment.prePoint[0],\n        y: segment.prePoint[1]\n    }, rx, ry, xRotation, !!arcFlag, !!sweepFlag, {\n        x: segment.currentPoint[0],\n        y: segment.currentPoint[1]\n    }, ratio);\n    var p2 = pointOnEllipticalArc({\n        x: segment.prePoint[0],\n        y: segment.prePoint[1]\n    }, rx, ry, xRotation, !!arcFlag, !!sweepFlag, {\n        x: segment.currentPoint[0],\n        y: segment.currentPoint[1]\n    }, sign ? ratio + 0.005 : ratio - 0.005);\n    var xDist = p2.x - p1.x;\n    var yDist = p2.y - p1.y;\n    var dist = Math.sqrt(xDist * xDist + yDist * yDist);\n    return {\n        x: -xDist / dist,\n        y: -yDist / dist\n    };\n}\n// 向量长度\nfunction vMag(v) {\n    return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n}\n// u.v/|u||v|，计算夹角的余弦值\nfunction vRatio(u, v) {\n    // 当存在一个向量的长度为 0 时，夹角也为 0，即夹角的余弦值为 1\n    return vMag(u) * vMag(v) ? (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v)) : 1;\n}\n// 向量角度\nfunction vAngle(u, v) {\n    return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));\n}\nfunction getArcParams(startPoint, params) {\n    var rx = params[1];\n    var ry = params[2];\n    var xRotation = (0,_antv_util__WEBPACK_IMPORTED_MODULE_30__[\"default\"])(deg2rad(params[3]), Math.PI * 2);\n    var arcFlag = params[4];\n    var sweepFlag = params[5];\n    // 弧形起点坐标\n    var x1 = startPoint[0];\n    var y1 = startPoint[1];\n    // 弧形终点坐标\n    var x2 = params[6];\n    var y2 = params[7];\n    var xp = Math.cos(xRotation) * (x1 - x2) / 2.0 + Math.sin(xRotation) * (y1 - y2) / 2.0;\n    var yp = -1 * Math.sin(xRotation) * (x1 - x2) / 2.0 + Math.cos(xRotation) * (y1 - y2) / 2.0;\n    var lambda = xp * xp / (rx * rx) + yp * yp / (ry * ry);\n    if (lambda > 1) {\n        rx *= Math.sqrt(lambda);\n        ry *= Math.sqrt(lambda);\n    }\n    var diff = rx * rx * (yp * yp) + ry * ry * (xp * xp);\n    var f = diff ? Math.sqrt((rx * rx * (ry * ry) - diff) / diff) : 1;\n    if (arcFlag === sweepFlag) {\n        f *= -1;\n    }\n    if (isNaN(f)) {\n        f = 0;\n    }\n    // 旋转前的起点坐标，且当长半轴和短半轴的长度为 0 时，坐标按 (0, 0) 处理\n    var cxp = ry ? f * rx * yp / ry : 0;\n    var cyp = rx ? f * -ry * xp / rx : 0;\n    // 椭圆圆心坐标\n    var cx = (x1 + x2) / 2.0 + Math.cos(xRotation) * cxp - Math.sin(xRotation) * cyp;\n    var cy = (y1 + y2) / 2.0 + Math.sin(xRotation) * cxp + Math.cos(xRotation) * cyp;\n    // 起始点的单位向量\n    var u = [\n        (xp - cxp) / rx,\n        (yp - cyp) / ry\n    ];\n    // 终止点的单位向量\n    var v = [\n        (-1 * xp - cxp) / rx,\n        (-1 * yp - cyp) / ry\n    ];\n    // 计算起始点和圆心的连线，与 x 轴正方向的夹角\n    var theta = vAngle([\n        1,\n        0\n    ], u);\n    // 计算圆弧起始点和终止点与椭圆圆心连线的夹角\n    var dTheta = vAngle(u, v);\n    if (vRatio(u, v) <= -1) {\n        dTheta = Math.PI;\n    }\n    if (vRatio(u, v) >= 1) {\n        dTheta = 0;\n    }\n    if (sweepFlag === 0 && dTheta > 0) {\n        dTheta -= 2 * Math.PI;\n    }\n    if (sweepFlag === 1 && dTheta < 0) {\n        dTheta += 2 * Math.PI;\n    }\n    return {\n        cx: cx,\n        cy: cy,\n        // 弧形的起点和终点相同时，长轴和短轴的长度按 0 处理\n        rx: isSamePoint(startPoint, [\n            x2,\n            y2\n        ]) ? 0 : rx,\n        ry: isSamePoint(startPoint, [\n            x2,\n            y2\n        ]) ? 0 : ry,\n        startAngle: theta,\n        endAngle: theta + dTheta,\n        xRotation: xRotation,\n        arcFlag: arcFlag,\n        sweepFlag: sweepFlag\n    };\n}\nfunction commandsToPathString(commands, object, transform) {\n    return commands.reduce(function(prev, cur) {\n        var path = \"\";\n        if (cur[0] === \"M\" || cur[0] === \"L\") {\n            var p = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(cur[1], cur[2], 0);\n            if (transform) {\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.transformMat4(p, p, transform);\n            }\n            path = \"\".concat(cur[0]).concat(p[0], \",\").concat(p[1]);\n        } else if (cur[0] === \"Z\") {\n            path = cur[0];\n        } else if (cur[0] === \"C\") {\n            var p1 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(cur[1], cur[2], 0);\n            var p2 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(cur[3], cur[4], 0);\n            var p3 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(cur[5], cur[6], 0);\n            if (transform) {\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.transformMat4(p1, p1, transform);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.transformMat4(p2, p2, transform);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.transformMat4(p3, p3, transform);\n            }\n            path = \"\".concat(cur[0]).concat(p1[0], \",\").concat(p1[1], \",\").concat(p2[0], \",\").concat(p2[1], \",\").concat(p3[0], \",\").concat(p3[1]);\n        } else if (cur[0] === \"A\") {\n            var c = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(cur[6], cur[7], 0);\n            if (transform) {\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.transformMat4(c, c, transform);\n            }\n            path = \"\".concat(cur[0]).concat(cur[1], \",\").concat(cur[2], \",\").concat(cur[3], \",\").concat(cur[4], \",\").concat(cur[5], \",\").concat(c[0], \",\").concat(c[1]);\n        } else if (cur[0] === \"Q\") {\n            var _p = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(cur[1], cur[2], 0);\n            var _p2 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(cur[3], cur[4], 0);\n            if (transform) {\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.transformMat4(_p, _p, transform);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.transformMat4(_p2, _p2, transform);\n            }\n            path = \"\".concat(cur[0]).concat(cur[1], \",\").concat(cur[2], \",\").concat(cur[3], \",\").concat(cur[4], \"}\");\n        }\n        return prev += path;\n    }, \"\");\n}\nfunction lineToCommands(x1, y1, x2, y2) {\n    return [\n        [\n            \"M\",\n            x1,\n            y1\n        ],\n        [\n            \"L\",\n            x2,\n            y2\n        ]\n    ];\n}\nfunction ellipseToCommands(rx, ry, cx, cy) {\n    var factor = (-1 + Math.sqrt(2)) / 3 * 4;\n    var dx = rx * factor;\n    var dy = ry * factor;\n    var left = cx - rx;\n    var right = cx + rx;\n    var top = cy - ry;\n    var bottom = cy + ry;\n    return [\n        [\n            \"M\",\n            left,\n            cy\n        ],\n        [\n            \"C\",\n            left,\n            cy - dy,\n            cx - dx,\n            top,\n            cx,\n            top\n        ],\n        [\n            \"C\",\n            cx + dx,\n            top,\n            right,\n            cy - dy,\n            right,\n            cy\n        ],\n        [\n            \"C\",\n            right,\n            cy + dy,\n            cx + dx,\n            bottom,\n            cx,\n            bottom\n        ],\n        [\n            \"C\",\n            cx - dx,\n            bottom,\n            left,\n            cy + dy,\n            left,\n            cy\n        ],\n        [\n            \"Z\"\n        ]\n    ];\n}\nfunction polygonToCommands(points, closed) {\n    var result = points.map(function(point, i) {\n        return [\n            i === 0 ? \"M\" : \"L\",\n            point[0],\n            point[1]\n        ];\n    });\n    if (closed) {\n        result.push([\n            \"Z\"\n        ]);\n    }\n    return result;\n}\nfunction rectToCommands(width, height, x, y, radius) {\n    // @see https://gist.github.com/danielpquinn/dd966af424030d47e476\n    if (radius) {\n        var _radius = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(radius, 4), tlr = _radius[0], trr = _radius[1], brr = _radius[2], blr = _radius[3];\n        var signX = width > 0 ? 1 : -1;\n        var signY = height > 0 ? 1 : -1;\n        // sweep-flag @see https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Paths#arcs\n        var sweepFlag = signX + signY !== 0 ? 1 : 0;\n        return [\n            [\n                \"M\",\n                signX * tlr + x,\n                y\n            ],\n            [\n                \"L\",\n                width - signX * trr + x,\n                y\n            ],\n            trr ? [\n                \"A\",\n                trr,\n                trr,\n                0,\n                0,\n                sweepFlag,\n                width + x,\n                signY * trr + y\n            ] : null,\n            [\n                \"L\",\n                width + x,\n                height - signY * brr + y\n            ],\n            brr ? [\n                \"A\",\n                brr,\n                brr,\n                0,\n                0,\n                sweepFlag,\n                width + x - signX * brr,\n                height + y\n            ] : null,\n            [\n                \"L\",\n                x + signX * blr,\n                height + y\n            ],\n            blr ? [\n                \"A\",\n                blr,\n                blr,\n                0,\n                0,\n                sweepFlag,\n                x,\n                height + y - signY * blr\n            ] : null,\n            [\n                \"L\",\n                x,\n                signY * tlr + y\n            ],\n            tlr ? [\n                \"A\",\n                tlr,\n                tlr,\n                0,\n                0,\n                sweepFlag,\n                signX * tlr + x,\n                y\n            ] : null,\n            [\n                \"Z\"\n            ]\n        ].filter(function(command) {\n            return command;\n        });\n    }\n    return [\n        [\n            \"M\",\n            x,\n            y\n        ],\n        [\n            \"L\",\n            x + width,\n            y\n        ],\n        [\n            \"L\",\n            x + width,\n            y + height\n        ],\n        [\n            \"L\",\n            x,\n            y + height\n        ],\n        [\n            \"Z\"\n        ]\n    ];\n}\n/**\n * convert object to path, should account for:\n * * transform & origin\n * * lineWidth\n */ function convertToPath(object) {\n    var transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : object.getLocalTransform();\n    var commands = [];\n    switch(object.nodeName){\n        case Shape.LINE:\n            var _parsedStyle = object.parsedStyle, _parsedStyle$x = _parsedStyle.x1, x1 = _parsedStyle$x === void 0 ? 0 : _parsedStyle$x, _parsedStyle$y = _parsedStyle.y1, y1 = _parsedStyle$y === void 0 ? 0 : _parsedStyle$y, _parsedStyle$x2 = _parsedStyle.x2, x2 = _parsedStyle$x2 === void 0 ? 0 : _parsedStyle$x2, _parsedStyle$y2 = _parsedStyle.y2, y2 = _parsedStyle$y2 === void 0 ? 0 : _parsedStyle$y2;\n            commands = lineToCommands(x1, y1, x2, y2);\n            break;\n        case Shape.CIRCLE:\n            {\n                var _parsedStyle2 = object.parsedStyle, _parsedStyle2$r = _parsedStyle2.r, r = _parsedStyle2$r === void 0 ? 0 : _parsedStyle2$r, _parsedStyle2$cx = _parsedStyle2.cx, cx = _parsedStyle2$cx === void 0 ? 0 : _parsedStyle2$cx, _parsedStyle2$cy = _parsedStyle2.cy, cy = _parsedStyle2$cy === void 0 ? 0 : _parsedStyle2$cy;\n                commands = ellipseToCommands(r, r, cx, cy);\n                break;\n            }\n        case Shape.ELLIPSE:\n            {\n                var _parsedStyle3 = object.parsedStyle, _parsedStyle3$rx = _parsedStyle3.rx, rx = _parsedStyle3$rx === void 0 ? 0 : _parsedStyle3$rx, _parsedStyle3$ry = _parsedStyle3.ry, ry = _parsedStyle3$ry === void 0 ? 0 : _parsedStyle3$ry, _parsedStyle3$cx = _parsedStyle3.cx, _cx = _parsedStyle3$cx === void 0 ? 0 : _parsedStyle3$cx, _parsedStyle3$cy = _parsedStyle3.cy, _cy = _parsedStyle3$cy === void 0 ? 0 : _parsedStyle3$cy;\n                commands = ellipseToCommands(rx, ry, _cx, _cy);\n                break;\n            }\n        case Shape.POLYLINE:\n        case Shape.POLYGON:\n            var points = object.parsedStyle.points;\n            commands = polygonToCommands(points.points, object.nodeName === Shape.POLYGON);\n            break;\n        case Shape.RECT:\n            var _parsedStyle4 = object.parsedStyle, _parsedStyle4$width = _parsedStyle4.width, width = _parsedStyle4$width === void 0 ? 0 : _parsedStyle4$width, _parsedStyle4$height = _parsedStyle4.height, height = _parsedStyle4$height === void 0 ? 0 : _parsedStyle4$height, _parsedStyle4$x = _parsedStyle4.x, x = _parsedStyle4$x === void 0 ? 0 : _parsedStyle4$x, _parsedStyle4$y = _parsedStyle4.y, y = _parsedStyle4$y === void 0 ? 0 : _parsedStyle4$y, radius = _parsedStyle4.radius;\n            var hasRadius = radius && radius.some(function(r) {\n                return r !== 0;\n            });\n            commands = rectToCommands(width, height, x, y, hasRadius && radius.map(function(r) {\n                return (0,_antv_util__WEBPACK_IMPORTED_MODULE_25__[\"default\"])(r, 0, Math.min(Math.abs(width) / 2, Math.abs(height) / 2));\n            }));\n            break;\n        case Shape.PATH:\n            var absolutePath = object.parsedStyle.d.absolutePath;\n            commands = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(absolutePath);\n            break;\n    }\n    if (commands.length) {\n        return commandsToPathString(commands, object, transform);\n    }\n}\nfunction translatePathToString(absolutePath) {\n    var startOffsetX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var startOffsetY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var endOffsetX = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    var endOffsetY = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    var newValue = absolutePath.map(function(params, i) {\n        var command = params[0];\n        var nextSegment = absolutePath[i + 1];\n        var useStartOffset = i === 0 && (startOffsetX !== 0 || startOffsetY !== 0);\n        var useEndOffset = (i === absolutePath.length - 1 || nextSegment && (nextSegment[0] === \"M\" || nextSegment[0] === \"Z\")) && endOffsetX !== 0 && endOffsetY !== 0;\n        var _ref = useStartOffset ? [\n            startOffsetX,\n            startOffsetY\n        ] : [\n            0,\n            0\n        ], _ref2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_ref, 2), startOffsetXTemp = _ref2[0], startOffsetYTemp = _ref2[1];\n        var _ref3 = useEndOffset ? [\n            endOffsetX,\n            endOffsetY\n        ] : [\n            0,\n            0\n        ], _ref4 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_ref3, 2), endOffsetXTemp = _ref4[0], endOffsetYTemp = _ref4[1];\n        switch(command){\n            case \"M\":\n                return \"M \".concat(params[1] + startOffsetXTemp, \",\").concat(params[2] + startOffsetYTemp);\n            case \"L\":\n                return \"L \".concat(params[1] + endOffsetXTemp, \",\").concat(params[2] + endOffsetYTemp);\n            case \"Q\":\n                return \"Q \".concat(params[1], \" \").concat(params[2], \",\").concat(params[3] + endOffsetXTemp, \" \").concat(params[4] + endOffsetYTemp);\n            case \"C\":\n                return \"C \".concat(params[1], \" \").concat(params[2], \",\").concat(params[3], \" \").concat(params[4], \",\").concat(params[5] + endOffsetXTemp, \" \").concat(params[6] + endOffsetYTemp);\n            case \"A\":\n                return \"A \".concat(params[1], \" \").concat(params[2], \" \").concat(params[3], \" \").concat(params[4], \" \").concat(params[5], \" \").concat(params[6], \" \").concat(params[7]).concat(useEndOffset ? \" L \".concat(params[6] + endOffsetX, \",\").concat(params[7] + endOffsetY) : \"\");\n            case \"Z\":\n                return \"Z\";\n            default:\n                return null;\n        }\n    }).filter(function(item) {\n        return item !== null;\n    }).join(\" \");\n    if (~newValue.indexOf(\"NaN\")) {\n        return \"\";\n    }\n    return newValue;\n}\nvar internalParsePath = function internalParsePath(path) {\n    // empty path\n    if (path === \"\" || Array.isArray(path) && path.length === 0) {\n        return {\n            absolutePath: [],\n            hasArc: false,\n            segments: [],\n            polygons: [],\n            polylines: [],\n            curve: null,\n            totalLength: 0,\n            rect: {\n                x: 0,\n                y: 0,\n                width: 0,\n                height: 0\n            }\n        };\n    }\n    var absolutePath;\n    try {\n        absolutePath = (0,_antv_util__WEBPACK_IMPORTED_MODULE_31__.normalizePath)(path);\n    } catch (_unused) {\n        absolutePath = (0,_antv_util__WEBPACK_IMPORTED_MODULE_31__.normalizePath)(\"\");\n        console.error(\"[g]: Invalid SVG Path definition: \".concat(path));\n    }\n    removeRedundantMCommand(absolutePath);\n    var hasArc = hasArcOrBezier(absolutePath);\n    var _extractPolygons = extractPolygons(absolutePath), polygons = _extractPolygons.polygons, polylines = _extractPolygons.polylines;\n    // for later use\n    var segments = path2Segments(absolutePath);\n    // Only calculate bbox here since we don't need length now.\n    var _getPathBBox = getPathBBox(segments, 0), x = _getPathBBox.x, y = _getPathBBox.y, width = _getPathBBox.width, height = _getPathBBox.height;\n    return {\n        absolutePath: absolutePath,\n        hasArc: hasArc,\n        segments: segments,\n        polygons: polygons,\n        polylines: polylines,\n        // curve,\n        // Delay the calculation of length.\n        totalLength: 0,\n        rect: {\n            x: Number.isFinite(x) ? x : 0,\n            y: Number.isFinite(y) ? y : 0,\n            width: Number.isFinite(width) ? width : 0,\n            height: Number.isFinite(height) ? height : 0\n        }\n    };\n};\nvar memoizedParsePath = memoize(internalParsePath);\nfunction parsePath(path) {\n    return (0,_antv_util__WEBPACK_IMPORTED_MODULE_24__[\"default\"])(path) ? memoizedParsePath(path) : internalParsePath(path);\n}\nfunction mergePaths(left, right, object) {\n    var curve1 = left.curve;\n    var curve2 = right.curve;\n    if (!curve1 || curve1.length === 0) {\n        // convert to curves to do morphing & picking later\n        // @see http://thednp.github.io/kute.js/svgCubicMorph.html\n        curve1 = (0,_antv_util__WEBPACK_IMPORTED_MODULE_32__.path2Curve)(left.absolutePath, false);\n        left.curve = curve1;\n    }\n    if (!curve2 || curve2.length === 0) {\n        curve2 = (0,_antv_util__WEBPACK_IMPORTED_MODULE_32__.path2Curve)(right.absolutePath, false);\n        right.curve = curve2;\n    }\n    var curves = [\n        curve1,\n        curve2\n    ];\n    if (curve1.length !== curve2.length) {\n        curves = (0,_antv_util__WEBPACK_IMPORTED_MODULE_33__.equalizeSegments)(curve1, curve2);\n    }\n    var curve0 = (0,_antv_util__WEBPACK_IMPORTED_MODULE_34__.getDrawDirection)(curves[0]) !== (0,_antv_util__WEBPACK_IMPORTED_MODULE_34__.getDrawDirection)(curves[1]) ? (0,_antv_util__WEBPACK_IMPORTED_MODULE_35__.reverseCurve)(curves[0]) : (0,_antv_util__WEBPACK_IMPORTED_MODULE_36__.clonePath)(curves[0]);\n    return [\n        curve0,\n        (0,_antv_util__WEBPACK_IMPORTED_MODULE_37__.getRotatedCurve)(curves[1], curve0),\n        function(pathArray) {\n            // need converting to path string?\n            return pathArray;\n        }\n    ];\n}\n/**\n * @see https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute/points\n *\n * @example\n * points=\"100,10 250,150 200,110\"\n */ function parsePoints(pointsOrStr, object) {\n    var points;\n    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_24__[\"default\"])(pointsOrStr)) {\n        points = pointsOrStr.split(\" \").map(function(pointStr) {\n            var _pointStr$split = pointStr.split(\",\"), _pointStr$split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_pointStr$split, 2), x = _pointStr$split2[0], y = _pointStr$split2[1];\n            return [\n                Number(x),\n                Number(y)\n            ];\n        });\n    } else {\n        points = pointsOrStr;\n    }\n    return {\n        points: points,\n        totalLength: 0,\n        segments: []\n    };\n}\nfunction mergePoints(left, right) {\n    return [\n        left.points,\n        right.points,\n        function(points) {\n            return points;\n        }\n    ];\n}\n// eg. { t: 'scale', d: [CSSUnitValue(1), CSSUnitValue(2)] }\nvar _ = null;\nvar TRANSFORM_REGEXP = /\\s*(\\w+)\\(([^)]*)\\)/g;\nfunction cast(pattern) {\n    return function(contents) {\n        var i = 0;\n        return pattern.map(function(x) {\n            return x === _ ? contents[i++] : x;\n        });\n    };\n}\nfunction id(x) {\n    return x;\n}\n// type: [argTypes, convertTo3D, convertTo2D]\n// In the argument types string, lowercase characters represent optional arguments\nvar transformFunctions = {\n    // @ts-ignore\n    matrix: [\n        \"NNNNNN\",\n        [\n            _,\n            _,\n            0,\n            0,\n            _,\n            _,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            _,\n            _,\n            0,\n            1\n        ],\n        id\n    ],\n    matrix3d: [\n        \"NNNNNNNNNNNNNNNN\",\n        id\n    ],\n    rotate: [\n        \"A\"\n    ],\n    rotateX: [\n        \"A\"\n    ],\n    rotateY: [\n        \"A\"\n    ],\n    rotateZ: [\n        \"A\"\n    ],\n    rotate3d: [\n        \"NNNA\"\n    ],\n    perspective: [\n        \"L\"\n    ],\n    scale: [\n        \"Nn\",\n        cast([\n            _,\n            _,\n            new CSSUnitValue(1)\n        ]),\n        id\n    ],\n    scaleX: [\n        \"N\",\n        cast([\n            _,\n            new CSSUnitValue(1),\n            new CSSUnitValue(1)\n        ]),\n        cast([\n            _,\n            new CSSUnitValue(1)\n        ])\n    ],\n    scaleY: [\n        \"N\",\n        cast([\n            new CSSUnitValue(1),\n            _,\n            new CSSUnitValue(1)\n        ]),\n        cast([\n            new CSSUnitValue(1),\n            _\n        ])\n    ],\n    scaleZ: [\n        \"N\",\n        cast([\n            new CSSUnitValue(1),\n            new CSSUnitValue(1),\n            _\n        ])\n    ],\n    scale3d: [\n        \"NNN\",\n        id\n    ],\n    skew: [\n        \"Aa\",\n        null,\n        id\n    ],\n    skewX: [\n        \"A\",\n        null,\n        cast([\n            _,\n            Odeg\n        ])\n    ],\n    skewY: [\n        \"A\",\n        null,\n        cast([\n            Odeg,\n            _\n        ])\n    ],\n    translate: [\n        \"Tt\",\n        cast([\n            _,\n            _,\n            Opx\n        ]),\n        id\n    ],\n    translateX: [\n        \"T\",\n        cast([\n            _,\n            Opx,\n            Opx\n        ]),\n        cast([\n            _,\n            Opx\n        ])\n    ],\n    translateY: [\n        \"T\",\n        cast([\n            Opx,\n            _,\n            Opx\n        ]),\n        cast([\n            Opx,\n            _\n        ])\n    ],\n    translateZ: [\n        \"L\",\n        cast([\n            Opx,\n            Opx,\n            _\n        ])\n    ],\n    translate3d: [\n        \"TTL\",\n        id\n    ]\n};\nfunction parseArrayTransform(transform) {\n    var result = [];\n    var length = transform.length;\n    for(var i = 0; i < length; i++){\n        var item = transform[i];\n        var name = item[0];\n        var args = item.slice(1);\n        // infer default value\n        if (name === \"translate\" || name === \"skew\") {\n            if (args.length === 1) args.push(0);\n        } else if (name === \"scale\") {\n            if (args.length === 1) args.push(args[0]);\n        }\n        var functionData = transformFunctions[name];\n        if (!functionData) return [];\n        var parsedArgs = args.map(function(value) {\n            return getOrCreateUnitValue(value);\n        });\n        result.push({\n            t: name,\n            d: parsedArgs\n        });\n    }\n    return result;\n}\n/**\n * none\n * scale(1) scale(1, 2)\n * scaleX(1)\n */ function parseTransform(transform) {\n    if (Array.isArray(transform)) {\n        return parseArrayTransform(transform);\n    }\n    transform = (transform || \"none\").trim();\n    if (transform === \"none\") {\n        return [];\n    }\n    var result = [];\n    var match;\n    var prevLastIndex = 0;\n    TRANSFORM_REGEXP.lastIndex = 0;\n    while(match = TRANSFORM_REGEXP.exec(transform)){\n        if (match.index !== prevLastIndex) {\n            return [];\n        }\n        prevLastIndex = match.index + match[0].length;\n        var functionName = match[1]; // scale\n        var functionData = transformFunctions[functionName]; // scale(1, 2)\n        if (!functionData) {\n            // invalid, eg. scale()\n            return [];\n        }\n        var args = match[2].split(\",\"); // 1,2\n        var argTypes = functionData[0]; // Nn\n        if (argTypes.length < args.length) {\n            // scale(N, n)\n            return [];\n        }\n        var parsedArgs = [];\n        for(var i = 0; i < argTypes.length; i++){\n            var arg = args[i];\n            var type = argTypes[i];\n            var parsedArg = void 0;\n            if (!arg) {\n                // @ts-ignore\n                parsedArg = ({\n                    a: Odeg,\n                    n: parsedArgs[0],\n                    t: Opx\n                })[type];\n            } else {\n                // @ts-ignore\n                parsedArg = ({\n                    A: function A(s) {\n                        return s.trim() === \"0\" ? Odeg : parseAngle(s);\n                    },\n                    N: parseNumber,\n                    T: parseLengthOrPercentage,\n                    L: parseLength\n                })[type.toUpperCase()](arg);\n            }\n            if (parsedArg === undefined) {\n                return [];\n            }\n            parsedArgs.push(parsedArg);\n        }\n        result.push({\n            t: functionName,\n            d: parsedArgs\n        }); // { t: scale, d: [1, 2] }\n        if (TRANSFORM_REGEXP.lastIndex === transform.length) {\n            return result;\n        }\n    }\n    return [];\n}\nfunction parseTransformUnmemoize(transform) {\n    if (Array.isArray(transform)) {\n        return parseArrayTransform(transform);\n    }\n    transform = (transform || \"none\").trim();\n    if (transform === \"none\") {\n        return [];\n    }\n    var result = [];\n    var match;\n    var prevLastIndex = 0;\n    TRANSFORM_REGEXP.lastIndex = 0;\n    while(match = TRANSFORM_REGEXP.exec(transform)){\n        if (match.index !== prevLastIndex) {\n            return [];\n        }\n        prevLastIndex = match.index + match[0].length;\n        var functionName = match[1]; // scale\n        var functionData = transformFunctions[functionName]; // scale(1, 2)\n        if (!functionData) {\n            // invalid, eg. scale()\n            return [];\n        }\n        var args = match[2].split(\",\"); // 1,2\n        var argTypes = functionData[0]; // Nn\n        if (argTypes.length < args.length) {\n            // scale(N, n)\n            return [];\n        }\n        var parsedArgs = [];\n        for(var i = 0; i < argTypes.length; i++){\n            var arg = args[i];\n            var type = argTypes[i];\n            var parsedArg = void 0;\n            if (!arg) {\n                // @ts-ignore\n                parsedArg = ({\n                    a: Odeg,\n                    n: parsedArgs[0],\n                    t: Opx\n                })[type];\n            } else {\n                // @ts-ignore\n                parsedArg = ({\n                    A: function A(s) {\n                        return s.trim() === \"0\" ? Odeg : parseAngleUnmemoize(s);\n                    },\n                    N: parseNumberUnmemoize,\n                    T: parseLengthOrPercentageUnmemoize,\n                    L: parseLengthUnmemoize\n                })[type.toUpperCase()](arg);\n            }\n            if (parsedArg === undefined) {\n                return [];\n            }\n            parsedArgs.push(parsedArg);\n        }\n        result.push({\n            t: functionName,\n            d: parsedArgs\n        }); // { t: scale, d: [1, 2] }\n        if (TRANSFORM_REGEXP.lastIndex === transform.length) {\n            return result;\n        }\n    }\n    return [];\n}\nfunction convertItemToMatrix(item) {\n    var x;\n    var y;\n    var z;\n    var angle;\n    switch(item.t){\n        case \"rotateX\":\n            angle = deg2rad(convertAngleUnit(item.d[0]));\n            return [\n                1,\n                0,\n                0,\n                0,\n                0,\n                Math.cos(angle),\n                Math.sin(angle),\n                0,\n                0,\n                -Math.sin(angle),\n                Math.cos(angle),\n                0,\n                0,\n                0,\n                0,\n                1\n            ];\n        case \"rotateY\":\n            angle = deg2rad(convertAngleUnit(item.d[0]));\n            return [\n                Math.cos(angle),\n                0,\n                -Math.sin(angle),\n                0,\n                0,\n                1,\n                0,\n                0,\n                Math.sin(angle),\n                0,\n                Math.cos(angle),\n                0,\n                0,\n                0,\n                0,\n                1\n            ];\n        case \"rotate\":\n        case \"rotateZ\":\n            angle = deg2rad(convertAngleUnit(item.d[0]));\n            return [\n                Math.cos(angle),\n                Math.sin(angle),\n                0,\n                0,\n                -Math.sin(angle),\n                Math.cos(angle),\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1\n            ];\n        case \"rotate3d\":\n            x = item.d[0].value;\n            y = item.d[1].value;\n            z = item.d[2].value;\n            angle = deg2rad(convertAngleUnit(item.d[3]));\n            var sqrLength = x * x + y * y + z * z;\n            if (sqrLength === 0) {\n                x = 1;\n                y = 0;\n                z = 0;\n            } else if (sqrLength !== 1) {\n                var length = Math.sqrt(sqrLength);\n                x /= length;\n                y /= length;\n                z /= length;\n            }\n            var s = Math.sin(angle / 2);\n            var sc = s * Math.cos(angle / 2);\n            var sq = s * s;\n            return [\n                1 - 2 * (y * y + z * z) * sq,\n                2 * (x * y * sq + z * sc),\n                2 * (x * z * sq - y * sc),\n                0,\n                2 * (x * y * sq - z * sc),\n                1 - 2 * (x * x + z * z) * sq,\n                2 * (y * z * sq + x * sc),\n                0,\n                2 * (x * z * sq + y * sc),\n                2 * (y * z * sq - x * sc),\n                1 - 2 * (x * x + y * y) * sq,\n                0,\n                0,\n                0,\n                0,\n                1\n            ];\n        case \"scale\":\n            return [\n                item.d[0].value,\n                0,\n                0,\n                0,\n                0,\n                item.d[1].value,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1\n            ];\n        case \"scaleX\":\n            return [\n                item.d[0].value,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1\n            ];\n        case \"scaleY\":\n            return [\n                1,\n                0,\n                0,\n                0,\n                0,\n                item.d[0].value,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1\n            ];\n        case \"scaleZ\":\n            return [\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                item.d[0].value,\n                0,\n                0,\n                0,\n                0,\n                1\n            ];\n        case \"scale3d\":\n            return [\n                item.d[0].value,\n                0,\n                0,\n                0,\n                0,\n                item.d[1].value,\n                0,\n                0,\n                0,\n                0,\n                item.d[2].value,\n                0,\n                0,\n                0,\n                0,\n                1\n            ];\n        case \"skew\":\n            var xAngle = deg2rad(convertAngleUnit(item.d[0]));\n            var yAngle = deg2rad(convertAngleUnit(item.d[1]));\n            return [\n                1,\n                Math.tan(yAngle),\n                0,\n                0,\n                Math.tan(xAngle),\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1\n            ];\n        case \"skewX\":\n            angle = deg2rad(convertAngleUnit(item.d[0]));\n            return [\n                1,\n                0,\n                0,\n                0,\n                Math.tan(angle),\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1\n            ];\n        case \"skewY\":\n            angle = deg2rad(convertAngleUnit(item.d[0]));\n            return [\n                1,\n                Math.tan(angle),\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1\n            ];\n        case \"translate\":\n            // TODO: pass target\n            x = convertPercentUnit(item.d[0], 0, null) || 0;\n            y = convertPercentUnit(item.d[1], 0, null) || 0;\n            return [\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                x,\n                y,\n                0,\n                1\n            ];\n        case \"translateX\":\n            x = convertPercentUnit(item.d[0], 0, null) || 0;\n            return [\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                x,\n                0,\n                0,\n                1\n            ];\n        case \"translateY\":\n            y = convertPercentUnit(item.d[0], 0, null) || 0;\n            return [\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                y,\n                0,\n                1\n            ];\n        case \"translateZ\":\n            z = convertPercentUnit(item.d[0], 0, null) || 0;\n            return [\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                z,\n                1\n            ];\n        case \"translate3d\":\n            x = convertPercentUnit(item.d[0], 0, null) || 0;\n            y = convertPercentUnit(item.d[1], 0, null) || 0;\n            z = convertPercentUnit(item.d[2], 0, null) || 0;\n            return [\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                x,\n                y,\n                z,\n                1\n            ];\n        case \"perspective\":\n            var t = convertPercentUnit(item.d[0], 0, null) || 0;\n            var p = t ? -1 / t : 0;\n            return [\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                p,\n                0,\n                0,\n                0,\n                1\n            ];\n        case \"matrix\":\n            return [\n                item.d[0].value,\n                item.d[1].value,\n                0,\n                0,\n                item.d[2].value,\n                item.d[3].value,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                item.d[4].value,\n                item.d[5].value,\n                0,\n                1\n            ];\n        case \"matrix3d\":\n            return item.d.map(function(d) {\n                return d.value;\n            });\n    }\n}\nfunction multiplyMatrices(a, b) {\n    return [\n        a[0] * b[0] + a[4] * b[1] + a[8] * b[2] + a[12] * b[3],\n        a[1] * b[0] + a[5] * b[1] + a[9] * b[2] + a[13] * b[3],\n        a[2] * b[0] + a[6] * b[1] + a[10] * b[2] + a[14] * b[3],\n        a[3] * b[0] + a[7] * b[1] + a[11] * b[2] + a[15] * b[3],\n        a[0] * b[4] + a[4] * b[5] + a[8] * b[6] + a[12] * b[7],\n        a[1] * b[4] + a[5] * b[5] + a[9] * b[6] + a[13] * b[7],\n        a[2] * b[4] + a[6] * b[5] + a[10] * b[6] + a[14] * b[7],\n        a[3] * b[4] + a[7] * b[5] + a[11] * b[6] + a[15] * b[7],\n        a[0] * b[8] + a[4] * b[9] + a[8] * b[10] + a[12] * b[11],\n        a[1] * b[8] + a[5] * b[9] + a[9] * b[10] + a[13] * b[11],\n        a[2] * b[8] + a[6] * b[9] + a[10] * b[10] + a[14] * b[11],\n        a[3] * b[8] + a[7] * b[9] + a[11] * b[10] + a[15] * b[11],\n        a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12] * b[15],\n        a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13] * b[15],\n        a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14] * b[15],\n        a[3] * b[12] + a[7] * b[13] + a[11] * b[14] + a[15] * b[15]\n    ];\n}\nfunction convertToMatrix(transformList) {\n    if (transformList.length === 0) {\n        return [\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1\n        ];\n    }\n    return transformList.map(convertItemToMatrix).reduce(multiplyMatrices);\n}\nfunction makeMatrixDecomposition(transformList) {\n    var translate = [\n        0,\n        0,\n        0\n    ];\n    var scale = [\n        1,\n        1,\n        1\n    ];\n    var skew = [\n        0,\n        0,\n        0\n    ];\n    var perspective = [\n        0,\n        0,\n        0,\n        1\n    ];\n    var quaternion = [\n        0,\n        0,\n        0,\n        1\n    ];\n    decomposeMat4(// @ts-ignore\n    convertToMatrix(transformList), translate, scale, skew, perspective, quaternion);\n    return [\n        [\n            translate,\n            scale,\n            skew,\n            quaternion,\n            perspective\n        ]\n    ];\n}\nvar composeMatrix = function() {\n    function multiply(a, b) {\n        var result = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        for(var i = 0; i < 4; i++){\n            for(var j = 0; j < 4; j++){\n                for(var k = 0; k < 4; k++){\n                    result[i][j] += b[i][k] * a[k][j];\n                }\n            }\n        }\n        return result;\n    }\n    function is2D(m) {\n        return m[0][2] === 0 && m[0][3] === 0 && m[1][2] === 0 && m[1][3] === 0 && m[2][0] === 0 && m[2][1] === 0 && m[2][2] === 1 && m[2][3] === 0 && m[3][2] === 0 && m[3][3] === 1;\n    }\n    function composeMatrix(translate, scale, skew, quat, perspective) {\n        var matrix = [\n            [\n                1,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                1,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                1,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                1\n            ]\n        ];\n        for(var i = 0; i < 4; i++){\n            matrix[i][3] = perspective[i];\n        }\n        for(var _i = 0; _i < 3; _i++){\n            for(var j = 0; j < 3; j++){\n                matrix[3][_i] += translate[j] * matrix[j][_i];\n            }\n        }\n        var x = quat[0];\n        var y = quat[1];\n        var z = quat[2];\n        var w = quat[3];\n        var rotMatrix = [\n            [\n                1,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                1,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                1,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                1\n            ]\n        ];\n        rotMatrix[0][0] = 1 - 2 * (y * y + z * z);\n        rotMatrix[0][1] = 2 * (x * y - z * w);\n        rotMatrix[0][2] = 2 * (x * z + y * w);\n        rotMatrix[1][0] = 2 * (x * y + z * w);\n        rotMatrix[1][1] = 1 - 2 * (x * x + z * z);\n        rotMatrix[1][2] = 2 * (y * z - x * w);\n        rotMatrix[2][0] = 2 * (x * z - y * w);\n        rotMatrix[2][1] = 2 * (y * z + x * w);\n        rotMatrix[2][2] = 1 - 2 * (x * x + y * y);\n        matrix = multiply(matrix, rotMatrix);\n        var temp = [\n            [\n                1,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                1,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                1,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                1\n            ]\n        ];\n        if (skew[2]) {\n            temp[2][1] = skew[2];\n            matrix = multiply(matrix, temp);\n        }\n        if (skew[1]) {\n            temp[2][1] = 0;\n            temp[2][0] = skew[0];\n            matrix = multiply(matrix, temp);\n        }\n        if (skew[0]) {\n            temp[2][0] = 0;\n            temp[1][0] = skew[0];\n            matrix = multiply(matrix, temp);\n        }\n        for(var _i2 = 0; _i2 < 3; _i2++){\n            for(var _j = 0; _j < 3; _j++){\n                matrix[_i2][_j] *= scale[_i2];\n            }\n        }\n        if (is2D(matrix)) {\n            return [\n                matrix[0][0],\n                matrix[0][1],\n                matrix[1][0],\n                matrix[1][1],\n                matrix[3][0],\n                matrix[3][1]\n            ];\n        }\n        return matrix[0].concat(matrix[1], matrix[2], matrix[3]);\n    }\n    return composeMatrix;\n}();\nfunction numberToLongString(x) {\n    return x.toFixed(6).replace(\".000000\", \"\");\n}\nfunction mergeMatrices(left, right) {\n    var leftArgs;\n    var rightArgs;\n    // @ts-ignore\n    if (left.decompositionPair !== right) {\n        // @ts-ignore\n        left.decompositionPair = right;\n        // @ts-ignore\n        leftArgs = makeMatrixDecomposition(left);\n    }\n    // @ts-ignore\n    if (right.decompositionPair !== left) {\n        // @ts-ignore\n        right.decompositionPair = left;\n        // @ts-ignore\n        rightArgs = makeMatrixDecomposition(right);\n    }\n    if (leftArgs[0] === null || rightArgs[0] === null) return [\n        // @ts-ignore\n        [\n            false\n        ],\n        // @ts-ignore\n        [\n            true\n        ],\n        // @ts-ignore\n        function(x) {\n            return x ? right[0].d : left[0].d;\n        }\n    ];\n    leftArgs[0].push(0);\n    rightArgs[0].push(1);\n    return [\n        leftArgs,\n        rightArgs,\n        // @ts-ignore\n        function(list) {\n            // @ts-ignore\n            var q = quat(leftArgs[0][3], rightArgs[0][3], list[5]);\n            var mat = composeMatrix(list[0], list[1], list[2], q, list[4]);\n            var stringifiedArgs = mat.map(numberToLongString).join(\",\");\n            return stringifiedArgs;\n        }\n    ];\n}\nfunction dot(v1, v2) {\n    var result = 0;\n    for(var i = 0; i < v1.length; i++){\n        result += v1[i] * v2[i];\n    }\n    return result;\n}\nfunction quat(fromQ, toQ, f) {\n    var product = dot(fromQ, toQ);\n    product = (0,_antv_util__WEBPACK_IMPORTED_MODULE_25__[\"default\"])(product, -1.0, 1.0);\n    var quat = [];\n    if (product === 1.0) {\n        quat = fromQ;\n    } else {\n        var theta = Math.acos(product);\n        var w = Math.sin(f * theta) * 1 / Math.sqrt(1 - product * product);\n        for(var i = 0; i < 4; i++){\n            quat.push(fromQ[i] * (Math.cos(f * theta) - product * w) + toQ[i] * w);\n        }\n    }\n    return quat;\n}\n// scaleX/Y/Z -> scale\nfunction typeTo2D(type) {\n    return type.replace(/[XY]/, \"\");\n}\n// scaleX/Y/Z -> scale3d\nfunction typeTo3D(type) {\n    return type.replace(/(X|Y|Z|3d)?$/, \"3d\");\n}\nvar isMatrixOrPerspective = function isMatrixOrPerspective(lt, rt) {\n    return lt === \"perspective\" && rt === \"perspective\" || (lt === \"matrix\" || lt === \"matrix3d\") && (rt === \"matrix\" || rt === \"matrix3d\");\n};\nfunction mergeTransforms(left, right, target) {\n    var flipResults = false;\n    // padding empty transform, eg. merge 'scale(10)' with 'none' -> scale(1)\n    if (!left.length || !right.length) {\n        if (!left.length) {\n            flipResults = true;\n            left = right;\n            right = [];\n        }\n        var _loop = function _loop() {\n            var _left$i = left[i], type = _left$i.t, args = _left$i.d;\n            // none -> scale(1)/translateX(0)\n            var defaultValue = type.substring(0, 5) === \"scale\" ? 1 : 0;\n            right.push({\n                t: type,\n                d: args.map(function(arg) {\n                    if (typeof arg === \"number\") {\n                        return getOrCreateUnitValue(defaultValue);\n                    }\n                    return getOrCreateUnitValue(defaultValue, arg.unit);\n                //   {\n                //     unit: arg.unit,\n                //     value: defaultValue,\n                //   };\n                })\n            });\n        };\n        for(var i = 0; i < left.length; i++){\n            _loop();\n        }\n    }\n    var leftResult = [];\n    var rightResult = [];\n    var types = [];\n    // merge matrix() with matrix3d()\n    if (left.length !== right.length) {\n        var merged = mergeMatrices(left, right);\n        // @ts-ignore\n        leftResult = [\n            merged[0]\n        ];\n        // @ts-ignore\n        rightResult = [\n            merged[1]\n        ];\n        types = [\n            [\n                \"matrix\",\n                [\n                    merged[2]\n                ]\n            ]\n        ];\n    } else {\n        for(var _i3 = 0; _i3 < left.length; _i3++){\n            var leftType = left[_i3].t;\n            var rightType = right[_i3].t;\n            var leftArgs = left[_i3].d;\n            var rightArgs = right[_i3].d;\n            var leftFunctionData = transformFunctions[leftType];\n            var rightFunctionData = transformFunctions[rightType];\n            var type = void 0;\n            if (isMatrixOrPerspective(leftType, rightType)) {\n                var _merged = mergeMatrices([\n                    left[_i3]\n                ], [\n                    right[_i3]\n                ]);\n                // @ts-ignore\n                leftResult.push(_merged[0]);\n                // @ts-ignore\n                rightResult.push(_merged[1]);\n                types.push([\n                    \"matrix\",\n                    [\n                        _merged[2]\n                    ]\n                ]);\n                continue;\n            } else if (leftType === rightType) {\n                type = leftType;\n            } else if (leftFunctionData[2] && rightFunctionData[2] && typeTo2D(leftType) === typeTo2D(rightType)) {\n                type = typeTo2D(leftType);\n                // @ts-ignore\n                leftArgs = leftFunctionData[2](leftArgs);\n                // @ts-ignore\n                rightArgs = rightFunctionData[2](rightArgs);\n            } else if (leftFunctionData[1] && rightFunctionData[1] && typeTo3D(leftType) === typeTo3D(rightType)) {\n                type = typeTo3D(leftType);\n                // @ts-ignore\n                leftArgs = leftFunctionData[1](leftArgs);\n                // @ts-ignore\n                rightArgs = rightFunctionData[1](rightArgs);\n            } else {\n                var _merged2 = mergeMatrices(left, right);\n                // @ts-ignore\n                leftResult = [\n                    _merged2[0]\n                ];\n                // @ts-ignore\n                rightResult = [\n                    _merged2[1]\n                ];\n                types = [\n                    [\n                        \"matrix\",\n                        [\n                            _merged2[2]\n                        ]\n                    ]\n                ];\n                break;\n            }\n            var leftArgsCopy = [];\n            var rightArgsCopy = [];\n            var stringConversions = [];\n            for(var j = 0; j < leftArgs.length; j++){\n                // const merge = leftArgs[j].unit === UnitType.kNumber ? mergeDimensions : mergeDimensions;\n                var _merged3 = mergeDimensions(leftArgs[j], rightArgs[j], target, false, j);\n                leftArgsCopy[j] = _merged3[0];\n                rightArgsCopy[j] = _merged3[1];\n                stringConversions.push(_merged3[2]);\n            }\n            leftResult.push(leftArgsCopy);\n            rightResult.push(rightArgsCopy);\n            types.push([\n                type,\n                stringConversions\n            ]);\n        }\n    }\n    if (flipResults) {\n        var tmp = leftResult;\n        leftResult = rightResult;\n        rightResult = tmp;\n    }\n    return [\n        leftResult,\n        rightResult,\n        function(list) {\n            return list.map(function(args, i) {\n                var stringifiedArgs = args.map(function(arg, j) {\n                    return types[i][1][j](arg);\n                }).join(\",\");\n                if (types[i][0] === \"matrix\" && stringifiedArgs.split(\",\").length === 16) {\n                    types[i][0] = \"matrix3d\";\n                }\n                if (types[i][0] === \"matrix3d\" && stringifiedArgs.split(\",\").length === 6) {\n                    types[i][0] = \"matrix\";\n                }\n                return \"\".concat(types[i][0], \"(\").concat(stringifiedArgs, \")\");\n            }).join(\" \");\n        }\n    ];\n}\n/**\n * @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-origin\n * eg. 'center' 'top left' '50px 50px'\n */ var parseTransformOrigin = memoize(function(value) {\n    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_24__[\"default\"])(value)) {\n        if (value === \"text-anchor\") {\n            return [\n                getOrCreateUnitValue(0, \"px\"),\n                getOrCreateUnitValue(0, \"px\")\n            ];\n        }\n        var values = value.split(\" \");\n        if (values.length === 1) {\n            if (values[0] === \"top\" || values[0] === \"bottom\") {\n                // 'top' -> 'center top'\n                values[1] = values[0];\n                values[0] = \"center\";\n            } else {\n                // '50px' -> '50px center'\n                values[1] = \"center\";\n            }\n        }\n        if (values.length !== 2) {\n            return null;\n        }\n        // eg. center bottom\n        return [\n            parseLengthOrPercentage(convertKeyword2Percent(values[0])),\n            parseLengthOrPercentage(convertKeyword2Percent(values[1]))\n        ];\n    }\n    return [\n        getOrCreateUnitValue(value[0] || 0, \"px\"),\n        getOrCreateUnitValue(value[1] || 0, \"px\")\n    ];\n});\nfunction convertKeyword2Percent(keyword) {\n    if (keyword === \"center\") {\n        return \"50%\";\n    }\n    if (keyword === \"left\" || keyword === \"top\") {\n        return \"0%\";\n    }\n    if (keyword === \"right\" || keyword === \"bottom\") {\n        return \"100%\";\n    }\n    return keyword;\n}\n/**\n * Blink used them in code generation(css_properties.json5)\n */ var BUILT_IN_PROPERTIES = [\n    {\n        /**\n   * used in CSS Layout API\n   * eg. `display: 'flex'`\n   */ n: \"display\",\n        k: [\n            \"none\"\n        ]\n    },\n    {\n        /**\n   * range [0.0, 1.0]\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/opacity\n   */ n: \"opacity\",\n        \"int\": true,\n        inh: true,\n        d: \"1\",\n        syntax: PropertySyntax.OPACITY_VALUE\n    },\n    {\n        /**\n   * inheritable, range [0.0, 1.0]\n   * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-opacity\n   * @see https://svgwg.org/svg2-draft/painting.html#FillOpacity\n   */ n: \"fillOpacity\",\n        \"int\": true,\n        inh: true,\n        d: \"1\",\n        syntax: PropertySyntax.OPACITY_VALUE\n    },\n    {\n        /**\n   * inheritable, range [0.0, 1.0]\n   * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-opacity\n   * @see https://svgwg.org/svg2-draft/painting.html#StrokeOpacity\n   */ n: \"strokeOpacity\",\n        \"int\": true,\n        inh: true,\n        d: \"1\",\n        syntax: PropertySyntax.OPACITY_VALUE\n    },\n    {\n        /**\n   * background-color is not inheritable\n   * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes\n   */ n: \"fill\",\n        \"int\": true,\n        k: [\n            \"none\"\n        ],\n        d: \"none\",\n        syntax: PropertySyntax.PAINT\n    },\n    {\n        n: \"fillRule\",\n        k: [\n            \"nonzero\",\n            \"evenodd\"\n        ],\n        d: \"nonzero\"\n    },\n    /**\n * default to none\n * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke#usage_notes\n */ {\n        n: \"stroke\",\n        \"int\": true,\n        k: [\n            \"none\"\n        ],\n        d: \"none\",\n        syntax: PropertySyntax.PAINT,\n        /**\n   * Stroke 'none' won't affect geometry but others will.\n   */ l: true\n    },\n    {\n        n: \"shadowType\",\n        k: [\n            \"inner\",\n            \"outer\",\n            \"both\"\n        ],\n        d: \"outer\",\n        l: true\n    },\n    {\n        n: \"shadowColor\",\n        \"int\": true,\n        syntax: PropertySyntax.COLOR\n    },\n    {\n        n: \"shadowOffsetX\",\n        \"int\": true,\n        l: true,\n        d: \"0\",\n        syntax: PropertySyntax.LENGTH_PERCENTAGE\n    },\n    {\n        n: \"shadowOffsetY\",\n        \"int\": true,\n        l: true,\n        d: \"0\",\n        syntax: PropertySyntax.LENGTH_PERCENTAGE\n    },\n    {\n        n: \"shadowBlur\",\n        \"int\": true,\n        l: true,\n        d: \"0\",\n        syntax: PropertySyntax.SHADOW_BLUR\n    },\n    {\n        /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-width\n   */ n: \"lineWidth\",\n        \"int\": true,\n        inh: true,\n        d: \"1\",\n        l: true,\n        a: [\n            \"strokeWidth\"\n        ],\n        syntax: PropertySyntax.LENGTH_PERCENTAGE\n    },\n    {\n        n: \"increasedLineWidthForHitTesting\",\n        inh: true,\n        d: \"0\",\n        l: true,\n        syntax: PropertySyntax.LENGTH_PERCENTAGE\n    },\n    {\n        n: \"lineJoin\",\n        inh: true,\n        l: true,\n        a: [\n            \"strokeLinejoin\"\n        ],\n        k: [\n            \"miter\",\n            \"bevel\",\n            \"round\"\n        ],\n        d: \"miter\"\n    },\n    {\n        n: \"lineCap\",\n        inh: true,\n        l: true,\n        a: [\n            \"strokeLinecap\"\n        ],\n        k: [\n            \"butt\",\n            \"round\",\n            \"square\"\n        ],\n        d: \"butt\"\n    },\n    {\n        n: \"lineDash\",\n        \"int\": true,\n        inh: true,\n        k: [\n            \"none\"\n        ],\n        a: [\n            \"strokeDasharray\"\n        ],\n        syntax: PropertySyntax.LENGTH_PERCENTAGE_12\n    },\n    {\n        n: \"lineDashOffset\",\n        \"int\": true,\n        inh: true,\n        d: \"0\",\n        a: [\n            \"strokeDashoffset\"\n        ],\n        syntax: PropertySyntax.LENGTH_PERCENTAGE\n    },\n    {\n        n: \"offsetPath\",\n        syntax: PropertySyntax.DEFINED_PATH\n    },\n    {\n        n: \"offsetDistance\",\n        \"int\": true,\n        syntax: PropertySyntax.OFFSET_DISTANCE\n    },\n    {\n        n: \"dx\",\n        \"int\": true,\n        l: true,\n        d: \"0\",\n        syntax: PropertySyntax.LENGTH_PERCENTAGE\n    },\n    {\n        n: \"dy\",\n        \"int\": true,\n        l: true,\n        d: \"0\",\n        syntax: PropertySyntax.LENGTH_PERCENTAGE\n    },\n    {\n        n: \"zIndex\",\n        ind: true,\n        \"int\": true,\n        d: \"0\",\n        k: [\n            \"auto\"\n        ],\n        syntax: PropertySyntax.Z_INDEX\n    },\n    {\n        n: \"visibility\",\n        k: [\n            \"visible\",\n            \"hidden\"\n        ],\n        ind: true,\n        inh: true,\n        /**\n   * support interpolation\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/visibility#interpolation\n   */ \"int\": true,\n        d: \"visible\"\n    },\n    {\n        n: \"pointerEvents\",\n        inh: true,\n        k: [\n            \"none\",\n            \"auto\",\n            \"stroke\",\n            \"fill\",\n            \"painted\",\n            \"visible\",\n            \"visiblestroke\",\n            \"visiblefill\",\n            \"visiblepainted\",\n            // 'bounding-box',\n            \"all\"\n        ],\n        d: \"auto\"\n    },\n    {\n        n: \"filter\",\n        ind: true,\n        l: true,\n        k: [\n            \"none\"\n        ],\n        d: \"none\",\n        syntax: PropertySyntax.FILTER\n    },\n    {\n        n: \"clipPath\",\n        syntax: PropertySyntax.DEFINED_PATH\n    },\n    {\n        n: \"textPath\",\n        syntax: PropertySyntax.DEFINED_PATH\n    },\n    {\n        n: \"textPathSide\",\n        k: [\n            \"left\",\n            \"right\"\n        ],\n        d: \"left\"\n    },\n    {\n        n: \"textPathStartOffset\",\n        l: true,\n        d: \"0\",\n        syntax: PropertySyntax.LENGTH_PERCENTAGE\n    },\n    {\n        n: \"transform\",\n        p: 100,\n        \"int\": true,\n        k: [\n            \"none\"\n        ],\n        d: \"none\",\n        syntax: PropertySyntax.TRANSFORM\n    },\n    {\n        n: \"transformOrigin\",\n        p: 100,\n        d: \"0 0\",\n        // // int: true,\n        // d: (nodeName: string) => {\n        //   if (nodeName === Shape.CIRCLE || nodeName === Shape.ELLIPSE) {\n        //     return 'center';\n        //   }\n        //   if (nodeName === Shape.TEXT) {\n        //     return 'text-anchor';\n        //   }\n        //   return 'left top';\n        // },\n        l: true,\n        syntax: PropertySyntax.TRANSFORM_ORIGIN\n    },\n    {\n        n: \"cx\",\n        \"int\": true,\n        l: true,\n        d: \"0\",\n        syntax: PropertySyntax.COORDINATE\n    },\n    {\n        n: \"cy\",\n        \"int\": true,\n        l: true,\n        d: \"0\",\n        syntax: PropertySyntax.COORDINATE\n    },\n    {\n        n: \"cz\",\n        \"int\": true,\n        l: true,\n        d: \"0\",\n        syntax: PropertySyntax.COORDINATE\n    },\n    {\n        n: \"r\",\n        \"int\": true,\n        l: true,\n        d: \"0\",\n        syntax: PropertySyntax.LENGTH_PERCENTAGE\n    },\n    {\n        n: \"rx\",\n        \"int\": true,\n        l: true,\n        d: \"0\",\n        syntax: PropertySyntax.LENGTH_PERCENTAGE\n    },\n    {\n        n: \"ry\",\n        \"int\": true,\n        l: true,\n        d: \"0\",\n        syntax: PropertySyntax.LENGTH_PERCENTAGE\n    },\n    // Rect Image Group\n    {\n        // x in local space\n        n: \"x\",\n        \"int\": true,\n        l: true,\n        d: \"0\",\n        syntax: PropertySyntax.COORDINATE\n    },\n    {\n        // y in local space\n        n: \"y\",\n        \"int\": true,\n        l: true,\n        d: \"0\",\n        syntax: PropertySyntax.COORDINATE\n    },\n    {\n        // z in local space\n        n: \"z\",\n        \"int\": true,\n        l: true,\n        d: \"0\",\n        syntax: PropertySyntax.COORDINATE\n    },\n    {\n        n: \"width\",\n        \"int\": true,\n        l: true,\n        /**\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/width\n   */ k: [\n            \"auto\",\n            \"fit-content\",\n            \"min-content\",\n            \"max-content\"\n        ],\n        d: \"0\",\n        syntax: PropertySyntax.LENGTH_PERCENTAGE\n    },\n    {\n        n: \"height\",\n        \"int\": true,\n        l: true,\n        /**\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/height\n   */ k: [\n            \"auto\",\n            \"fit-content\",\n            \"min-content\",\n            \"max-content\"\n        ],\n        d: \"0\",\n        syntax: PropertySyntax.LENGTH_PERCENTAGE\n    },\n    {\n        n: \"radius\",\n        \"int\": true,\n        l: true,\n        d: \"0\",\n        syntax: PropertySyntax.LENGTH_PERCENTAGE_14\n    },\n    // Line\n    {\n        n: \"x1\",\n        \"int\": true,\n        l: true,\n        syntax: PropertySyntax.COORDINATE\n    },\n    {\n        n: \"y1\",\n        \"int\": true,\n        l: true,\n        syntax: PropertySyntax.COORDINATE\n    },\n    {\n        n: \"z1\",\n        \"int\": true,\n        l: true,\n        syntax: PropertySyntax.COORDINATE\n    },\n    {\n        n: \"x2\",\n        \"int\": true,\n        l: true,\n        syntax: PropertySyntax.COORDINATE\n    },\n    {\n        n: \"y2\",\n        \"int\": true,\n        l: true,\n        syntax: PropertySyntax.COORDINATE\n    },\n    {\n        n: \"z2\",\n        \"int\": true,\n        l: true,\n        syntax: PropertySyntax.COORDINATE\n    },\n    // Path\n    {\n        n: \"d\",\n        \"int\": true,\n        l: true,\n        d: \"\",\n        syntax: PropertySyntax.PATH,\n        p: 50\n    },\n    // Polyline & Polygon\n    {\n        n: \"points\",\n        /**\n   * support interpolation\n   */ \"int\": true,\n        l: true,\n        syntax: PropertySyntax.LIST_OF_POINTS,\n        p: 50\n    },\n    // Text\n    {\n        n: \"text\",\n        l: true,\n        d: \"\",\n        syntax: PropertySyntax.TEXT,\n        p: 50\n    },\n    {\n        n: \"textTransform\",\n        l: true,\n        inh: true,\n        k: [\n            \"capitalize\",\n            \"uppercase\",\n            \"lowercase\",\n            \"none\"\n        ],\n        d: \"none\",\n        syntax: PropertySyntax.TEXT_TRANSFORM,\n        p: 51 // it must get parsed after text\n    },\n    {\n        n: \"font\",\n        l: true\n    },\n    {\n        n: \"fontSize\",\n        \"int\": true,\n        inh: true,\n        /**\n   * @see https://www.w3schools.com/css/css_font_size.asp\n   */ d: \"16px\",\n        l: true,\n        syntax: PropertySyntax.LENGTH_PERCENTAGE\n    },\n    {\n        n: \"fontFamily\",\n        l: true,\n        inh: true,\n        d: \"sans-serif\"\n    },\n    {\n        n: \"fontStyle\",\n        l: true,\n        inh: true,\n        k: [\n            \"normal\",\n            \"italic\",\n            \"oblique\"\n        ],\n        d: \"normal\"\n    },\n    {\n        n: \"fontWeight\",\n        l: true,\n        inh: true,\n        k: [\n            \"normal\",\n            \"bold\",\n            \"bolder\",\n            \"lighter\"\n        ],\n        d: \"normal\"\n    },\n    {\n        n: \"fontVariant\",\n        l: true,\n        inh: true,\n        k: [\n            \"normal\",\n            \"small-caps\"\n        ],\n        d: \"normal\"\n    },\n    {\n        n: \"lineHeight\",\n        l: true,\n        syntax: PropertySyntax.LENGTH,\n        \"int\": true,\n        d: \"0\"\n    },\n    {\n        n: \"letterSpacing\",\n        l: true,\n        syntax: PropertySyntax.LENGTH,\n        \"int\": true,\n        d: \"0\"\n    },\n    {\n        n: \"miterLimit\",\n        l: true,\n        syntax: PropertySyntax.NUMBER,\n        d: function d(nodeName) {\n            if (nodeName === Shape.PATH || nodeName === Shape.POLYGON || nodeName === Shape.POLYLINE) {\n                return \"4\";\n            }\n            return \"10\";\n        }\n    },\n    {\n        n: \"wordWrap\",\n        l: true\n    },\n    {\n        n: \"wordWrapWidth\",\n        l: true\n    },\n    {\n        n: \"maxLines\",\n        l: true\n    },\n    {\n        n: \"textOverflow\",\n        l: true,\n        d: \"clip\"\n    },\n    {\n        n: \"leading\",\n        l: true\n    },\n    {\n        n: \"textBaseline\",\n        l: true,\n        inh: true,\n        k: [\n            \"top\",\n            \"hanging\",\n            \"middle\",\n            \"alphabetic\",\n            \"ideographic\",\n            \"bottom\"\n        ],\n        d: \"alphabetic\"\n    },\n    {\n        n: \"textAlign\",\n        l: true,\n        inh: true,\n        k: [\n            \"start\",\n            \"center\",\n            \"middle\",\n            \"end\",\n            \"left\",\n            \"right\"\n        ],\n        d: \"start\"\n    },\n    // {\n    //   n: 'whiteSpace',\n    //   l: true,\n    // },\n    {\n        n: \"markerStart\",\n        syntax: PropertySyntax.MARKER\n    },\n    {\n        n: \"markerEnd\",\n        syntax: PropertySyntax.MARKER\n    },\n    {\n        n: \"markerMid\",\n        syntax: PropertySyntax.MARKER\n    },\n    {\n        n: \"markerStartOffset\",\n        syntax: PropertySyntax.LENGTH,\n        l: true,\n        \"int\": true,\n        d: \"0\"\n    },\n    {\n        n: \"markerEndOffset\",\n        syntax: PropertySyntax.LENGTH,\n        l: true,\n        \"int\": true,\n        d: \"0\"\n    }\n];\nvar GEOMETRY_ATTRIBUTE_NAMES = new Set(BUILT_IN_PROPERTIES.filter(function(n) {\n    return !!n.l;\n}).map(function(n) {\n    return n.n;\n}));\nvar propertyMetadataCache = {};\nvar DefaultStyleValueRegistry = /*#__PURE__*/ function() {\n    function DefaultStyleValueRegistry(runtime) {\n        var _this = this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, DefaultStyleValueRegistry);\n        this.runtime = runtime;\n        BUILT_IN_PROPERTIES.forEach(function(property) {\n            _this.registerMetadata(property);\n        });\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(DefaultStyleValueRegistry, [\n        {\n            key: \"registerMetadata\",\n            value: function registerMetadata(metadata) {\n                [\n                    metadata.n\n                ].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(metadata.a || [])).forEach(function(name) {\n                    propertyMetadataCache[name] = metadata;\n                });\n            }\n        },\n        {\n            key: \"getPropertySyntax\",\n            value: function getPropertySyntax(syntax) {\n                return this.runtime.CSSPropertySyntaxFactory[syntax];\n            }\n        },\n        {\n            key: \"processProperties\",\n            value: function processProperties(object, attributes) {\n                var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n                    skipUpdateAttribute: false,\n                    skipParse: false,\n                    forceUpdateGeometry: false,\n                    usedAttributes: [],\n                    memoize: true\n                };\n                Object.assign(object.attributes, attributes);\n                // clipPath\n                var oldClipPath = object.parsedStyle.clipPath;\n                var oldOffsetPath = object.parsedStyle.offsetPath;\n                assignParsedStyle(object, attributes);\n                var needUpdateGeometry = !!options.forceUpdateGeometry;\n                if (!needUpdateGeometry) {\n                    for(var i in attributes){\n                        if (GEOMETRY_ATTRIBUTE_NAMES.has(i)) {\n                            needUpdateGeometry = true;\n                            break;\n                        }\n                    }\n                }\n                var list = getParsedStyleListOf(object);\n                if (list.has(\"fill\") && attributes.fill) {\n                    object.parsedStyle.fill = parseColor(attributes.fill);\n                }\n                if (list.has(\"stroke\") && attributes.stroke) {\n                    object.parsedStyle.stroke = parseColor(attributes.stroke);\n                }\n                if (list.has(\"shadowColor\") && attributes.shadowColor) {\n                    object.parsedStyle.shadowColor = parseColor(attributes.shadowColor);\n                }\n                if (list.has(\"filter\") && attributes.filter) {\n                    object.parsedStyle.filter = parseFilter(attributes.filter);\n                }\n                // Rect\n                // @ts-ignore\n                if (list.has(\"radius\") && !(0,_antv_util__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(attributes.radius)) {\n                    // @ts-ignore\n                    object.parsedStyle.radius = parseDimensionArrayFormat(// @ts-ignore\n                    attributes.radius, 4);\n                }\n                // Polyline\n                if (list.has(\"lineDash\") && !(0,_antv_util__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(attributes.lineDash)) {\n                    // dom标准自动转化奇数长度数组,webgl需要手动处理\n                    object.parsedStyle.lineDash = parseDimensionArrayFormat(attributes.lineDash, \"even\");\n                }\n                // @ts-ignore\n                if (list.has(\"points\") && attributes.points) {\n                    // @ts-ignore\n                    object.parsedStyle.points = parsePoints(attributes.points);\n                }\n                // Path\n                // @ts-ignore\n                if (list.has(\"d\") && attributes.d === \"\") {\n                    object.parsedStyle.d = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, EMPTY_PARSED_PATH);\n                }\n                // @ts-ignore\n                if (list.has(\"d\") && attributes.d) {\n                    object.parsedStyle.d = parsePath(// @ts-ignore\n                    attributes.d);\n                }\n                // Text\n                if (list.has(\"textTransform\") && attributes.textTransform) {\n                    this.runtime.CSSPropertySyntaxFactory[PropertySyntax.TEXT_TRANSFORM].calculator(null, null, {\n                        value: attributes.textTransform\n                    }, object, null);\n                }\n                if (list.has(\"clipPath\") && !(0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(attributes.clipPath)) {\n                    this.runtime.CSSPropertySyntaxFactory[PropertySyntax.DEFINED_PATH].calculator(\"clipPath\", oldClipPath, attributes.clipPath, object, this.runtime);\n                }\n                if (list.has(\"offsetPath\") && attributes.offsetPath) {\n                    this.runtime.CSSPropertySyntaxFactory[PropertySyntax.DEFINED_PATH].calculator(\"offsetPath\", oldOffsetPath, attributes.offsetPath, object, this.runtime);\n                }\n                if (list.has(\"transform\") && attributes.transform) {\n                    object.parsedStyle.transform = parseTransform(attributes.transform);\n                }\n                if (list.has(\"transformOrigin\") && attributes.transformOrigin) {\n                    object.parsedStyle.transformOrigin = parseTransformOrigin(attributes.transformOrigin);\n                }\n                // Marker\n                // @ts-ignore\n                if (list.has(\"markerStart\") && attributes.markerStart) {\n                    object.parsedStyle.markerStart = this.runtime.CSSPropertySyntaxFactory[PropertySyntax.MARKER].calculator(null, // @ts-ignore\n                    attributes.markerStart, // @ts-ignore\n                    attributes.markerStart, null, null);\n                }\n                // @ts-ignore\n                if (list.has(\"markerEnd\") && attributes.markerEnd) {\n                    object.parsedStyle.markerEnd = this.runtime.CSSPropertySyntaxFactory[PropertySyntax.MARKER].calculator(null, // @ts-ignore\n                    attributes.markerEnd, // @ts-ignore\n                    attributes.markerEnd, null, null);\n                }\n                // @ts-ignore\n                if (list.has(\"markerMid\") && attributes.markerMid) {\n                    object.parsedStyle.markerMid = this.runtime.CSSPropertySyntaxFactory[PropertySyntax.MARKER].calculator(\"\", // @ts-ignore\n                    attributes.markerMid, // @ts-ignore\n                    attributes.markerMid, null, null);\n                }\n                if (list.has(\"zIndex\") && !(0,_antv_util__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(attributes.zIndex)) {\n                    this.runtime.CSSPropertySyntaxFactory[PropertySyntax.Z_INDEX].postProcessor(object);\n                }\n                if (list.has(\"offsetDistance\") && !(0,_antv_util__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(attributes.offsetDistance)) {\n                    this.runtime.CSSPropertySyntaxFactory[PropertySyntax.OFFSET_DISTANCE].postProcessor(object);\n                }\n                if (list.has(\"transform\") && attributes.transform) {\n                    this.runtime.CSSPropertySyntaxFactory[PropertySyntax.TRANSFORM].postProcessor(object);\n                }\n                if (list.has(\"transformOrigin\") && attributes.transformOrigin) {\n                    this.runtime.CSSPropertySyntaxFactory[PropertySyntax.TRANSFORM_ORIGIN].postProcessor(object);\n                }\n                if (needUpdateGeometry) {\n                    object.geometry.dirty = true;\n                    object.renderable.boundsDirty = true;\n                    object.renderable.renderBoundsDirty = true;\n                    if (!options.forceUpdateGeometry) {\n                        this.runtime.sceneGraphService.dirtifyToRoot(object);\n                    }\n                }\n            }\n        },\n        {\n            key: \"updateGeometry\",\n            value: function updateGeometry(object) {\n                var nodeName = object.nodeName;\n                var geometryUpdater = this.runtime.geometryUpdaterFactory[nodeName];\n                if (geometryUpdater) {\n                    var geometry = object.geometry;\n                    if (!geometry.contentBounds) {\n                        geometry.contentBounds = new AABB();\n                    }\n                    if (!geometry.renderBounds) {\n                        geometry.renderBounds = new AABB();\n                    }\n                    var parsedStyle = object.parsedStyle;\n                    var _geometryUpdater$upda = geometryUpdater.update(parsedStyle, object), _geometryUpdater$upda2 = _geometryUpdater$upda.cx, cx = _geometryUpdater$upda2 === void 0 ? 0 : _geometryUpdater$upda2, _geometryUpdater$upda3 = _geometryUpdater$upda.cy, cy = _geometryUpdater$upda3 === void 0 ? 0 : _geometryUpdater$upda3, _geometryUpdater$upda4 = _geometryUpdater$upda.cz, cz = _geometryUpdater$upda4 === void 0 ? 0 : _geometryUpdater$upda4, _geometryUpdater$upda5 = _geometryUpdater$upda.hwidth, hwidth = _geometryUpdater$upda5 === void 0 ? 0 : _geometryUpdater$upda5, _geometryUpdater$upda6 = _geometryUpdater$upda.hheight, hheight = _geometryUpdater$upda6 === void 0 ? 0 : _geometryUpdater$upda6, _geometryUpdater$upda7 = _geometryUpdater$upda.hdepth, hdepth = _geometryUpdater$upda7 === void 0 ? 0 : _geometryUpdater$upda7;\n                    // init with content box\n                    var halfExtents = [\n                        Math.abs(hwidth),\n                        Math.abs(hheight),\n                        hdepth\n                    ];\n                    // anchor is center by default, don't account for lineWidth here\n                    var stroke = parsedStyle.stroke, _parsedStyle$lineWidt = parsedStyle.lineWidth, lineWidth = _parsedStyle$lineWidt === void 0 ? 1 : _parsedStyle$lineWidt, _parsedStyle$increase = parsedStyle.increasedLineWidthForHitTesting, increasedLineWidthForHitTesting = _parsedStyle$increase === void 0 ? 0 : _parsedStyle$increase, _parsedStyle$shadowTy = parsedStyle.shadowType, shadowType = _parsedStyle$shadowTy === void 0 ? \"outer\" : _parsedStyle$shadowTy, shadowColor = parsedStyle.shadowColor, _parsedStyle$filter = parsedStyle.filter, filter = _parsedStyle$filter === void 0 ? [] : _parsedStyle$filter, transformOrigin = parsedStyle.transformOrigin;\n                    var center = [\n                        cx,\n                        cy,\n                        cz\n                    ];\n                    // update geometry's AABB\n                    geometry.contentBounds.update(center, halfExtents);\n                    // @see https://github.molgen.mpg.de/git-mirror/cairo/blob/master/src/cairo-stroke-style.c#L97..L128\n                    var expansion = nodeName === Shape.POLYLINE || nodeName === Shape.POLYGON || nodeName === Shape.PATH ? Math.SQRT2 : 0.5;\n                    // append border only if stroke existed\n                    var hasStroke = stroke && !stroke.isNone;\n                    if (hasStroke) {\n                        var halfLineWidth = ((lineWidth || 0) + (increasedLineWidthForHitTesting || 0)) * expansion;\n                        halfExtents[0] += halfLineWidth;\n                        halfExtents[1] += halfLineWidth;\n                    }\n                    geometry.renderBounds.update(center, halfExtents);\n                    // account for shadow, only support constant value now\n                    if (shadowColor && shadowType && shadowType !== \"inner\") {\n                        var _geometry$renderBound = geometry.renderBounds, min = _geometry$renderBound.min, max = _geometry$renderBound.max;\n                        var shadowBlur = parsedStyle.shadowBlur, shadowOffsetX = parsedStyle.shadowOffsetX, shadowOffsetY = parsedStyle.shadowOffsetY;\n                        var shadowBlurInPixels = shadowBlur || 0;\n                        var shadowOffsetXInPixels = shadowOffsetX || 0;\n                        var shadowOffsetYInPixels = shadowOffsetY || 0;\n                        var shadowLeft = min[0] - shadowBlurInPixels + shadowOffsetXInPixels;\n                        var shadowRight = max[0] + shadowBlurInPixels + shadowOffsetXInPixels;\n                        var shadowTop = min[1] - shadowBlurInPixels + shadowOffsetYInPixels;\n                        var shadowBottom = max[1] + shadowBlurInPixels + shadowOffsetYInPixels;\n                        min[0] = Math.min(min[0], shadowLeft);\n                        max[0] = Math.max(max[0], shadowRight);\n                        min[1] = Math.min(min[1], shadowTop);\n                        max[1] = Math.max(max[1], shadowBottom);\n                        geometry.renderBounds.setMinMax(min, max);\n                    }\n                    // account for filter, eg. blur(5px), drop-shadow()\n                    filter.forEach(function(_ref) {\n                        var name = _ref.name, params = _ref.params;\n                        if (name === \"blur\") {\n                            var blurRadius = params[0].value;\n                            geometry.renderBounds.update(geometry.renderBounds.center, gl_matrix__WEBPACK_IMPORTED_MODULE_16__.add(geometry.renderBounds.halfExtents, geometry.renderBounds.halfExtents, [\n                                blurRadius,\n                                blurRadius,\n                                0\n                            ]));\n                        } else if (name === \"drop-shadow\") {\n                            var _shadowOffsetX = params[0].value;\n                            var _shadowOffsetY = params[1].value;\n                            var _shadowBlur = params[2].value;\n                            var _geometry$renderBound2 = geometry.renderBounds, _min = _geometry$renderBound2.min, _max = _geometry$renderBound2.max;\n                            var _shadowLeft = _min[0] - _shadowBlur + _shadowOffsetX;\n                            var _shadowRight = _max[0] + _shadowBlur + _shadowOffsetX;\n                            var _shadowTop = _min[1] - _shadowBlur + _shadowOffsetY;\n                            var _shadowBottom = _max[1] + _shadowBlur + _shadowOffsetY;\n                            _min[0] = Math.min(_min[0], _shadowLeft);\n                            _max[0] = Math.max(_max[0], _shadowRight);\n                            _min[1] = Math.min(_min[1], _shadowTop);\n                            _max[1] = Math.max(_max[1], _shadowBottom);\n                            geometry.renderBounds.setMinMax(_min, _max);\n                        }\n                    });\n                    object.geometry.dirty = false;\n                    // @see https://github.com/antvis/g/issues/957\n                    var flipY = hwidth < 0;\n                    var flipX = hheight < 0;\n                    // set transform origin\n                    var usedOriginXValue = (flipY ? -1 : 1) * (transformOrigin ? convertPercentUnit(transformOrigin[0], 0, object, true) : 0);\n                    var usedOriginYValue = (flipX ? -1 : 1) * (transformOrigin ? convertPercentUnit(transformOrigin[1], 1, object, true) : 0);\n                    if (usedOriginXValue || usedOriginYValue) {\n                        object.setOrigin(usedOriginXValue, usedOriginYValue);\n                    }\n                }\n            }\n        },\n        {\n            key: \"updateSizeAttenuation\",\n            value: function updateSizeAttenuation(node, zoom) {\n                if (node.style.isSizeAttenuation) {\n                    if (!node.style.rawLineWidth) {\n                        node.style.rawLineWidth = node.style.lineWidth;\n                    }\n                    node.style.lineWidth = (node.style.rawLineWidth || 1) / zoom;\n                    if (node.nodeName === Shape.CIRCLE) {\n                        if (!node.style.rawR) {\n                            node.style.rawR = node.style.r;\n                        }\n                        node.style.r = (node.style.rawR || 1) / zoom;\n                    }\n                } else {\n                    if (node.style.rawLineWidth) {\n                        node.style.lineWidth = node.style.rawLineWidth;\n                        delete node.style.rawLineWidth;\n                    }\n                    if (node.nodeName === Shape.CIRCLE) {\n                        if (node.style.rawR) {\n                            node.style.r = node.style.rawR;\n                            delete node.style.rawR;\n                        }\n                    }\n                }\n            }\n        }\n    ]);\n}();\nfunction assignParsedStyle(object, attributes) {\n    var list = getParsedStyleListOf(object);\n    for(var key in attributes){\n        if (list.has(key)) {\n            object.parsedStyle[key] = attributes[key];\n        }\n    }\n}\nfunction getParsedStyleListOf(object) {\n    return object.constructor.PARSED_STYLE_LIST;\n}\nvar CSSPropertyAngle = /*#__PURE__*/ function() {\n    function CSSPropertyAngle() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyAngle);\n        this.mixer = mergeNumbers;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyAngle, [\n        {\n            key: \"calculator\",\n            value: function calculator(name, oldParsed, parsed, object) {\n                return convertAngleUnit(parsed);\n            }\n        }\n    ]);\n}();\n/**\n * clipPath / textPath / offsetPath\n */ var CSSPropertyClipPath = /*#__PURE__*/ function() {\n    function CSSPropertyClipPath() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyClipPath);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyClipPath, [\n        {\n            key: \"calculator\",\n            value: function calculator(name, oldPath, newPath, object, runtime) {\n                // unset\n                if (newPath instanceof CSSKeywordValue) {\n                    newPath = null;\n                }\n                runtime.sceneGraphService.updateDisplayObjectDependency(name, oldPath, newPath, object);\n                if (name === \"clipPath\") {\n                    // should affect children\n                    object.forEach(function(leaf) {\n                        if (leaf.childNodes.length === 0) {\n                            runtime.sceneGraphService.dirtifyToRoot(leaf);\n                        }\n                    });\n                }\n                return newPath;\n            }\n        }\n    ]);\n}();\nvar CSSPropertyColor = /*#__PURE__*/ function() {\n    function CSSPropertyColor() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyColor);\n        this.parser = parseColor;\n        this.mixer = mergeColors;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyColor, [\n        {\n            key: \"calculator\",\n            value: function calculator(name, oldParsed, parsed, object) {\n                if (parsed instanceof CSSKeywordValue) {\n                    // 'unset' 'none'\n                    return parsed.value === \"none\" ? noneColor : transparentColor;\n                }\n                return parsed;\n            }\n        }\n    ]);\n}();\nvar CSSPropertyFilter = /*#__PURE__*/ function() {\n    function CSSPropertyFilter() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyFilter);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyFilter, [\n        {\n            key: \"calculator\",\n            value: function calculator(name, oldParsed, parsed) {\n                // unset or none\n                if (parsed instanceof CSSKeywordValue) {\n                    return [];\n                }\n                return parsed;\n            }\n        }\n    ]);\n}();\nfunction getFontSize(object) {\n    var _ref = object.parsedStyle, fontSize = _ref.fontSize;\n    return (0,_antv_util__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(fontSize) ? null : fontSize;\n}\n/**\n * <length> & <percentage>\n */ var CSSPropertyLengthOrPercentage = /*#__PURE__*/ function() {\n    function CSSPropertyLengthOrPercentage() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyLengthOrPercentage);\n        this.mixer = mergeNumbers;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyLengthOrPercentage, [\n        {\n            key: \"calculator\",\n            value: /**\n     * according to parent's bounds\n     *\n     * @example\n     * CSS.percent(50) -> CSS.px(0.5 * parent.width)\n     */ function calculator(name, oldParsed, computed, object, runtime) {\n                if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(computed)) {\n                    return computed;\n                }\n                if (CSSUnitValue.isRelativeUnit(computed.unit)) {\n                    if (computed.unit === UnitType.kPercentage) {\n                        // TODO: merge dimensions\n                        return 0;\n                    }\n                    if (computed.unit === UnitType.kEms) {\n                        if (object.parentNode) {\n                            var fontSize = getFontSize(object.parentNode);\n                            if (fontSize) {\n                                fontSize *= computed.value;\n                                return fontSize;\n                            }\n                        }\n                        return 0;\n                    }\n                    if (computed.unit === UnitType.kRems) {\n                        var _object$ownerDocument;\n                        if (object !== null && object !== void 0 && (_object$ownerDocument = object.ownerDocument) !== null && _object$ownerDocument !== void 0 && _object$ownerDocument.documentElement) {\n                            var _fontSize = getFontSize(object.ownerDocument.documentElement);\n                            if (_fontSize) {\n                                _fontSize *= computed.value;\n                                return _fontSize;\n                            }\n                        }\n                        return 0;\n                    }\n                } else {\n                    // remove listener if exists\n                    // registry.unregisterParentGeometryBoundsChangedHandler(object, name);\n                    // return absolute value\n                    return computed.value;\n                }\n            }\n        }\n    ]);\n}();\n/**\n * format to Tuple2<CSSUnitValue>\n *\n * @example\n * rect.style.lineDash = 10;\n * rect.style.lineDash = [10, 10];\n * rect.style.lineDash = '10 10';\n */ var CSSPropertyLengthOrPercentage12 = /*#__PURE__*/ function() {\n    function CSSPropertyLengthOrPercentage12() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyLengthOrPercentage12);\n        this.mixer = mergeNumberLists;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyLengthOrPercentage12, [\n        {\n            key: \"calculator\",\n            value: function calculator(name, oldParsed, computed) {\n                return computed.map(function(c) {\n                    return c.value;\n                });\n            }\n        }\n    ]);\n}();\n/**\n * used in rounded rect\n *\n * @example\n * rect.style.radius = 10;\n * rect.style.radius = '10 10';\n * rect.style.radius = '10 10 10 10';\n */ var CSSPropertyLengthOrPercentage14 = /*#__PURE__*/ function() {\n    function CSSPropertyLengthOrPercentage14() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyLengthOrPercentage14);\n        this.mixer = mergeNumberLists;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyLengthOrPercentage14, [\n        {\n            key: \"calculator\",\n            value: function calculator(name, oldParsed, computed) {\n                return computed.map(function(c) {\n                    return c.value;\n                });\n            }\n        }\n    ]);\n}();\nvar CSSPropertyMarker = /*#__PURE__*/ function() {\n    function CSSPropertyMarker() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyMarker);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyMarker, [\n        {\n            key: \"calculator\",\n            value: function calculator(name, oldMarker, newMarker, object) {\n                var _newMarker;\n                // unset\n                if (newMarker instanceof CSSKeywordValue) {\n                    newMarker = null;\n                }\n                var cloned = (_newMarker = newMarker) === null || _newMarker === void 0 ? void 0 : _newMarker.cloneNode(true);\n                if (cloned) {\n                    // FIXME: SVG should not inherit parent's style, add a flag here\n                    cloned.style.isMarker = true;\n                }\n                return cloned;\n            }\n        }\n    ]);\n}();\nvar CSSPropertyNumber = /*#__PURE__*/ function() {\n    function CSSPropertyNumber() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyNumber);\n        this.mixer = mergeNumbers;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyNumber, [\n        {\n            key: \"calculator\",\n            value: function calculator(name, oldParsed, computed) {\n                return computed.value;\n            }\n        }\n    ]);\n}();\nvar CSSPropertyOffsetDistance = /*#__PURE__*/ function() {\n    function CSSPropertyOffsetDistance() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyOffsetDistance);\n        this.mixer = clampedMergeNumbers(0, 1);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyOffsetDistance, [\n        {\n            key: \"calculator\",\n            value: function calculator(name, oldParsed, computed) {\n                return computed.value;\n            }\n        },\n        {\n            key: \"postProcessor\",\n            value: function postProcessor(object) {\n                var _object$parsedStyle = object.parsedStyle, offsetPath = _object$parsedStyle.offsetPath, offsetDistance = _object$parsedStyle.offsetDistance;\n                if (!offsetPath) {\n                    return;\n                }\n                var nodeName = offsetPath.nodeName;\n                if (nodeName === Shape.LINE || nodeName === Shape.PATH || nodeName === Shape.POLYLINE) {\n                    // set position in world space\n                    var point = offsetPath.getPoint(offsetDistance);\n                    if (point) {\n                        object.setLocalPosition(point.x, point.y);\n                    }\n                }\n            }\n        }\n    ]);\n}();\n/**\n * opacity\n */ var CSSPropertyOpacity = /*#__PURE__*/ function() {\n    function CSSPropertyOpacity() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyOpacity);\n        this.mixer = clampedMergeNumbers(0, 1);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyOpacity, [\n        {\n            key: \"calculator\",\n            value: function calculator(name, oldParsed, computed) {\n                return computed.value;\n            }\n        }\n    ]);\n}();\nvar CSSPropertyPath = /*#__PURE__*/ function() {\n    function CSSPropertyPath() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyPath);\n        /**\n     * path2Curve\n     */ this.parser = parsePath;\n        this.mixer = mergePaths;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyPath, [\n        {\n            key: \"calculator\",\n            value: function calculator(name, oldParsed, parsed) {\n                // unset\n                if (parsed instanceof CSSKeywordValue && parsed.value === \"unset\") {\n                    return {\n                        absolutePath: [],\n                        hasArc: false,\n                        segments: [],\n                        polygons: [],\n                        polylines: [],\n                        curve: null,\n                        totalLength: 0,\n                        rect: new Rectangle(0, 0, 0, 0)\n                    };\n                }\n                return parsed;\n            }\n        }\n    ]);\n}();\nvar CSSPropertyPoints = /*#__PURE__*/ _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(function CSSPropertyPoints() {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyPoints);\n    this.mixer = mergePoints;\n});\nvar CSSPropertyShadowBlur = /*#__PURE__*/ function(_CSSPropertyLengthOrP) {\n    function CSSPropertyShadowBlur() {\n        var _this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyShadowBlur);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, CSSPropertyShadowBlur, [].concat(args));\n        _this.mixer = clampedMergeNumbers(0, Infinity);\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(CSSPropertyShadowBlur, _CSSPropertyLengthOrP);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyShadowBlur);\n}(CSSPropertyLengthOrPercentage);\nvar CSSPropertyText = /*#__PURE__*/ function() {\n    function CSSPropertyText() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyText);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyText, [\n        {\n            key: \"calculator\",\n            value: function calculator(name, oldParsed, parsed, object) {\n                if (parsed instanceof CSSKeywordValue) {\n                    if (parsed.value === \"unset\") {\n                        return \"\";\n                    }\n                    return parsed.value;\n                }\n                // allow number as valid text content\n                return \"\".concat(parsed);\n            }\n        },\n        {\n            key: \"postProcessor\",\n            value: function postProcessor(object) {\n                object.nodeValue = \"\".concat(object.parsedStyle.text) || \"\";\n            }\n        }\n    ]);\n}();\n/**\n * it must transform after text get parsed\n * @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-transform\n */ var CSSPropertyTextTransform = /*#__PURE__*/ function() {\n    function CSSPropertyTextTransform() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyTextTransform);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyTextTransform, [\n        {\n            key: \"calculator\",\n            value: function calculator(name, oldParsed, parsed, object) {\n                var rawText = object.getAttribute(\"text\");\n                if (rawText) {\n                    var transformedText = rawText;\n                    if (parsed.value === \"capitalize\") {\n                        transformedText = rawText.charAt(0).toUpperCase() + rawText.slice(1);\n                    } else if (parsed.value === \"lowercase\") {\n                        transformedText = rawText.toLowerCase();\n                    } else if (parsed.value === \"uppercase\") {\n                        transformedText = rawText.toUpperCase();\n                    }\n                    object.parsedStyle.text = transformedText;\n                }\n                return parsed.value;\n            }\n        }\n    ]);\n}();\nvar definedProps = function definedProps(obj) {\n    return Object.fromEntries(Object.entries(obj).filter(function(_ref) {\n        var _ref2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_ref, 2), v = _ref2[1];\n        return v !== undefined;\n    }));\n};\nvar CANVAS_Map = new WeakMap();\n/**\n * destroy existed canvas with the same id\n */ function cleanExistedCanvas(container, canvas, cleanUp) {\n    if (container) {\n        var $dom = typeof container === \"string\" ? document.getElementById(container) : container;\n        if (CANVAS_Map.has($dom)) CANVAS_Map.get($dom).destroy(cleanUp);\n        CANVAS_Map.set($dom, canvas);\n    }\n}\nvar isBrowser =  false && 0;\nfunction isElement(target) {\n    return !!target.getAttribute;\n}\nfunction sortedIndex(array, value) {\n    var low = 0;\n    var high = array.length;\n    while(low < high){\n        var mid = low + high >>> 1;\n        if (sortByZIndex(array[mid], value) < 0) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction sortByZIndex(o1, o2) {\n    var zIndex1 = Number(o1.parsedStyle.zIndex || 0);\n    var zIndex2 = Number(o2.parsedStyle.zIndex || 0);\n    if (zIndex1 === zIndex2) {\n        var parent = o1.parentNode;\n        if (parent) {\n            var children = parent.childNodes || [];\n            return children.indexOf(o1) - children.indexOf(o2);\n        }\n    }\n    return zIndex1 - zIndex2;\n}\nfunction findClosestClipPathTarget(object) {\n    var el = object;\n    do {\n        var _el$parsedStyle;\n        var clipPath = (_el$parsedStyle = el.parsedStyle) === null || _el$parsedStyle === void 0 ? void 0 : _el$parsedStyle.clipPath;\n        if (clipPath) return el;\n        el = el.parentElement;\n    }while (el !== null);\n    return null;\n}\nvar PX_SUFFIX = \"px\";\nfunction setDOMSize($el, width, height) {\n    if (isBrowser && $el.style) {\n        $el.style.width = width + PX_SUFFIX;\n        $el.style.height = height + PX_SUFFIX;\n    }\n}\nfunction getStyle($el, property) {\n    if (isBrowser) {\n        return document.defaultView.getComputedStyle($el, null).getPropertyValue(property);\n    }\n}\nfunction getWidth($el) {\n    var width = getStyle($el, \"width\");\n    if (width === \"auto\") {\n        return $el.offsetWidth;\n    }\n    return parseFloat(width);\n}\nfunction getHeight($el) {\n    var height = getStyle($el, \"height\");\n    if (height === \"auto\") {\n        return $el.offsetHeight;\n    }\n    return parseFloat(height);\n}\n// borrow from hammer.js\nvar MOUSE_POINTER_ID = 1;\nvar TOUCH_TO_POINTER = {\n    touchstart: \"pointerdown\",\n    touchend: \"pointerup\",\n    touchendoutside: \"pointerupoutside\",\n    touchmove: \"pointermove\",\n    touchcancel: \"pointercancel\"\n};\nvar clock = typeof performance === \"object\" && performance.now ? performance : Date;\nfunction isInFragment(node) {\n    if (node.nodeName === Shape.FRAGMENT) return true;\n    return node.getRootNode().nodeName === Shape.FRAGMENT;\n}\nfunction isFillOrStrokeAffected() {\n    var pointerEvents = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"auto\";\n    var fill = arguments.length > 1 ? arguments[1] : undefined;\n    var stroke = arguments.length > 2 ? arguments[2] : undefined;\n    // account for pointerEvents\n    // @see https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events\n    var hasFill = false;\n    var hasStroke = false;\n    var isFillOtherThanNone = !!fill && !fill.isNone;\n    var isStrokeOtherThanNone = !!stroke && !stroke.isNone;\n    if (pointerEvents === \"visiblepainted\" || pointerEvents === \"painted\" || pointerEvents === \"auto\") {\n        hasFill = isFillOtherThanNone;\n        hasStroke = isStrokeOtherThanNone;\n    } else if (pointerEvents === \"visiblefill\" || pointerEvents === \"fill\") {\n        hasFill = true;\n    } else if (pointerEvents === \"visiblestroke\" || pointerEvents === \"stroke\") {\n        hasStroke = true;\n    } else if (pointerEvents === \"visible\" || pointerEvents === \"all\") {\n        // The values of the fill and stroke do not affect event processing.\n        hasFill = true;\n        hasStroke = true;\n    }\n    return [\n        hasFill,\n        hasStroke\n    ];\n}\n/**\n * Thanks for following contributor of codes\n * https://gist.github.com/1866474\n * http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n * http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n * https://github.com/Financial-Times/polyfill-library/blob/master/polyfills/requestAnimationFrame/polyfill.js\n * */ var uId = 1;\nvar uniqueId = function uniqueId() {\n    return uId++;\n};\n// We use `self` instead of `window` for `WebWorker` support.\nvar root = // eslint-disable-next-line no-nested-ternary\ntypeof self === \"object\" && self.self === self ? self : // @ts-ignore\ntypeof global === \"object\" && global.global === global ? // @ts-ignore\nglobal : {};\nvar nowOffset = Date.now();\n// use performance api if exist, otherwise use Date.now.\n// Date.now polyfill required.\nvar pnow = function pnow() {\n    if (root.performance && typeof root.performance.now === \"function\") {\n        return root.performance.now();\n    }\n    // fallback\n    return Date.now() - nowOffset;\n};\nvar reservedCBs = {};\nvar lastTime = Date.now();\nvar polyfillRaf = function polyfillRaf(callback) {\n    if (typeof callback !== \"function\") {\n        throw new TypeError(\"\".concat(callback, \" is not a function\"));\n    }\n    var currentTime = Date.now();\n    var gap = currentTime - lastTime;\n    var delay = gap > 16 ? 0 : 16 - gap;\n    var id = uniqueId();\n    reservedCBs[id] = callback;\n    // keys(reservedCBs).length > 1 의미는 이미 setTimeout 이 걸려있는 경우.\n    // 함께 callback 이 실행될 수 있게 reservedCBs 에만 추가해주고 return\n    if (Object.keys(reservedCBs).length > 1) return id;\n    setTimeout(function() {\n        lastTime = currentTime;\n        var copied = reservedCBs;\n        reservedCBs = {};\n        Object.keys(copied).forEach(function(key) {\n            return copied[key](pnow());\n        });\n    }, delay);\n    return id;\n};\nvar polyfillCaf = function polyfillCaf(id) {\n    delete reservedCBs[id];\n};\nvar vendorPrefixes = [\n    \"\",\n    \"webkit\",\n    \"moz\",\n    \"ms\",\n    \"o\"\n];\nvar getRequestAnimationFrame = function getRequestAnimationFrame(vp) {\n    if (typeof vp !== \"string\") return polyfillRaf;\n    if (vp === \"\") return root.requestAnimationFrame;\n    return root[\"\".concat(vp, \"RequestAnimationFrame\")];\n};\nvar getCancelAnimationFrame = function getCancelAnimationFrame(vp) {\n    if (typeof vp !== \"string\") return polyfillCaf;\n    if (vp === \"\") return root.cancelAnimationFrame;\n    return root[\"\".concat(vp, \"CancelAnimationFrame\")] || root[\"\".concat(vp, \"CancelRequestAnimationFrame\")];\n};\nvar find = function find(arr, predicate) {\n    var i = 0;\n    while(arr[i] !== undefined){\n        if (predicate(arr[i])) return arr[i];\n        i += 1;\n    }\n};\nvar vp = find(vendorPrefixes, function(vp) {\n    return !!getRequestAnimationFrame(vp);\n});\nvar raf = getRequestAnimationFrame(vp);\nvar caf = getCancelAnimationFrame(vp);\nroot.requestAnimationFrame = raf;\nroot.cancelAnimationFrame = caf;\nvar AsyncParallelHook = /*#__PURE__*/ function() {\n    function AsyncParallelHook() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, AsyncParallelHook);\n        this.callbacks = [];\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(AsyncParallelHook, [\n        {\n            key: \"getCallbacksNum\",\n            value: function getCallbacksNum() {\n                return this.callbacks.length;\n            }\n        },\n        {\n            key: \"tapPromise\",\n            value: function tapPromise(options, fn) {\n                this.callbacks.push(fn);\n            }\n        },\n        {\n            key: \"promise\",\n            value: function promise() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                return Promise.all(this.callbacks.map(function(callback) {\n                    return callback.apply(void 0, args);\n                }));\n            }\n        }\n    ]);\n}();\nvar AsyncSeriesWaterfallHook = /*#__PURE__*/ function() {\n    function AsyncSeriesWaterfallHook() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, AsyncSeriesWaterfallHook);\n        this.callbacks = [];\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(AsyncSeriesWaterfallHook, [\n        {\n            key: \"tapPromise\",\n            value: function tapPromise(options, fn) {\n                this.callbacks.push(fn);\n            }\n        },\n        {\n            key: \"promise\",\n            value: function() {\n                var _promise = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_13___default()(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_12___default()().mark(function _callee() {\n                    var _this$callbacks, result, i, callback, _args = arguments;\n                    return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_12___default()().wrap(function _callee$(_context) {\n                        while(1)switch(_context.prev = _context.next){\n                            case 0:\n                                if (!this.callbacks.length) {\n                                    _context.next = 14;\n                                    break;\n                                }\n                                _context.next = 3;\n                                return (_this$callbacks = this.callbacks)[0].apply(_this$callbacks, _args);\n                            case 3:\n                                result = _context.sent;\n                                i = 0;\n                            case 5:\n                                if (!(i < this.callbacks.length - 1)) {\n                                    _context.next = 13;\n                                    break;\n                                }\n                                callback = this.callbacks[i]; // @ts-ignore\n                                // eslint-disable-next-line no-await-in-loop\n                                _context.next = 9;\n                                return callback(result);\n                            case 9:\n                                result = _context.sent;\n                            case 10:\n                                i++;\n                                _context.next = 5;\n                                break;\n                            case 13:\n                                return _context.abrupt(\"return\", result);\n                            case 14:\n                                return _context.abrupt(\"return\", null);\n                            case 15:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }, _callee, this);\n                }));\n                function promise() {\n                    return _promise.apply(this, arguments);\n                }\n                return promise;\n            }()\n        }\n    ]);\n}();\nvar SyncHook = /*#__PURE__*/ function() {\n    function SyncHook() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, SyncHook);\n        this.callbacks = [];\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(SyncHook, [\n        {\n            key: \"tap\",\n            value: function tap(options, fn) {\n                this.callbacks.push(fn);\n            }\n        },\n        {\n            key: \"call\",\n            value: function call() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                /* eslint-disable-next-line prefer-rest-params */ var argsArr = arguments;\n                this.callbacks.forEach(function(callback) {\n                    /* eslint-disable-next-line prefer-spread */ callback.apply(undefined, argsArr);\n                });\n            }\n        }\n    ]);\n}();\nvar SyncWaterfallHook = /*#__PURE__*/ function() {\n    function SyncWaterfallHook() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, SyncWaterfallHook);\n        this.callbacks = [];\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(SyncWaterfallHook, [\n        {\n            key: \"tap\",\n            value: function tap(options, fn) {\n                this.callbacks.push(fn);\n            }\n        },\n        {\n            key: \"call\",\n            value: function call() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                if (this.callbacks.length) {\n                    /* eslint-disable-next-line prefer-rest-params */ var argsArr = arguments;\n                    /* eslint-disable-next-line prefer-spread */ var result = this.callbacks[0].apply(undefined, argsArr);\n                    for(var i = 0; i < this.callbacks.length - 1; i++){\n                        var callback = this.callbacks[i];\n                        // @ts-ignore\n                        result = callback(result);\n                    }\n                    return result;\n                }\n                return null;\n            }\n        }\n    ]);\n}();\nvar genericFontFamilies = [\n    \"serif\",\n    \"sans-serif\",\n    \"monospace\",\n    \"cursive\",\n    \"fantasy\",\n    \"system-ui\"\n];\nvar stringRegExp = /([\\\"\\'])[^\\'\\\"]+\\1/;\nfunction toFontString(attributes) {\n    var _attributes$fontSize = attributes.fontSize, fontSize = _attributes$fontSize === void 0 ? 16 : _attributes$fontSize, _attributes$fontFamil = attributes.fontFamily, fontFamily = _attributes$fontFamil === void 0 ? \"sans-serif\" : _attributes$fontFamil, _attributes$fontStyle = attributes.fontStyle, fontStyle = _attributes$fontStyle === void 0 ? \"normal\" : _attributes$fontStyle, _attributes$fontVaria = attributes.fontVariant, fontVariant = _attributes$fontVaria === void 0 ? \"normal\" : _attributes$fontVaria, _attributes$fontWeigh = attributes.fontWeight, fontWeight = _attributes$fontWeigh === void 0 ? \"normal\" : _attributes$fontWeigh;\n    // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n    // const fontSizeString: string = isNumber(fontSize) ? `${fontSize}px` : fontSize.toString();\n    var fontSizeString = (0,_antv_util__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(fontSize) && \"\".concat(fontSize, \"px\") || \"16px\";\n    // Clean-up fontFamily property by quoting each font name\n    // this will support font names with spaces\n    var fontFamilies = fontFamily.split(\",\");\n    for(var i = fontFamilies.length - 1; i >= 0; i--){\n        // Trim any extra white-space\n        var _fontFamily = fontFamilies[i].trim();\n        // Check if font already contains strings\n        if (!stringRegExp.test(_fontFamily) && genericFontFamilies.indexOf(_fontFamily) < 0) {\n            _fontFamily = '\"'.concat(_fontFamily, '\"');\n        }\n        fontFamilies[i] = _fontFamily;\n    }\n    return \"\".concat(fontStyle, \" \").concat(fontVariant, \" \").concat(fontWeight, \" \").concat(fontSizeString, \" \").concat(fontFamilies.join(\",\"));\n}\nfunction createSkewMatrix(skewMatrix, skewX, skewY) {\n    // Create an identity matrix\n    gl_matrix__WEBPACK_IMPORTED_MODULE_19__.identity(skewMatrix);\n    // Apply skew to the matrix\n    skewMatrix[4] = Math.tan(skewX); // Skew Y axis in X direction\n    skewMatrix[1] = Math.tan(skewY); // Skew X axis in Y direction\n    return skewMatrix;\n}\nvar $mat4_1 = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create();\nvar $mat4_2 = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create();\nvar parser = {\n    scale: function scale(d) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromScaling($mat4_1, [\n            d[0].value,\n            d[1].value,\n            1\n        ]);\n    },\n    scaleX: function scaleX(d) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromScaling($mat4_1, [\n            d[0].value,\n            1,\n            1\n        ]);\n    },\n    scaleY: function scaleY(d) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromScaling($mat4_1, [\n            1,\n            d[0].value,\n            1\n        ]);\n    },\n    scaleZ: function scaleZ(d) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromScaling($mat4_1, [\n            1,\n            1,\n            d[0].value\n        ]);\n    },\n    scale3d: function scale3d(d) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromScaling($mat4_1, [\n            d[0].value,\n            d[1].value,\n            d[2].value\n        ]);\n    },\n    translate: function translate(d) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromTranslation($mat4_1, [\n            d[0].value,\n            d[1].value,\n            0\n        ]);\n    },\n    translateX: function translateX(d) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromTranslation($mat4_1, [\n            d[0].value,\n            0,\n            0\n        ]);\n    },\n    translateY: function translateY(d) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromTranslation($mat4_1, [\n            0,\n            d[0].value,\n            0\n        ]);\n    },\n    translateZ: function translateZ(d) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromTranslation($mat4_1, [\n            0,\n            0,\n            d[0].value\n        ]);\n    },\n    translate3d: function translate3d(d) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromTranslation($mat4_1, [\n            d[0].value,\n            d[1].value,\n            d[2].value\n        ]);\n    },\n    rotate: function rotate(d) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromZRotation($mat4_1, deg2rad(convertAngleUnit(d[0])));\n    },\n    rotateX: function rotateX(d) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromXRotation($mat4_1, deg2rad(convertAngleUnit(d[0])));\n    },\n    rotateY: function rotateY(d) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromYRotation($mat4_1, deg2rad(convertAngleUnit(d[0])));\n    },\n    rotateZ: function rotateZ(d) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromZRotation($mat4_1, deg2rad(convertAngleUnit(d[0])));\n    },\n    rotate3d: function rotate3d(d) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromRotation($mat4_1, deg2rad(convertAngleUnit(d[3])), [\n            d[0].value,\n            d[1].value,\n            d[2].value\n        ]);\n    },\n    skew: function skew(d) {\n        createSkewMatrix($mat4_1, deg2rad(d[0].value), deg2rad(d[1].value));\n    },\n    skewX: function skewX(d) {\n        createSkewMatrix($mat4_1, deg2rad(d[0].value), 0);\n    },\n    skewY: function skewY(d) {\n        createSkewMatrix($mat4_1, 0, deg2rad(d[0].value));\n    },\n    matrix: function matrix(d) {\n        // prettier-ignore\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.set($mat4_1, d[0].value, d[1].value, 0, 0, d[2].value, d[3].value, 0, 0, 0, 0, 1, 0, d[4].value, d[5].value, 0, 1);\n    },\n    matrix3d: function matrix3d(d) {\n        // @ts-ignore\n        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.set.apply(gl_matrix__WEBPACK_IMPORTED_MODULE_19__, [\n            $mat4_1\n        ].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(d.map(function(s) {\n            return s.value;\n        }))));\n    }\n};\nvar $vec3One$1 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(1, 1, 1);\nvar $vec3Zero$1 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create();\nvar optimizer = {\n    translate: function translate(object, d) {\n        runtime.sceneGraphService.setLocalScale(object, $vec3One$1, false);\n        runtime.sceneGraphService.setLocalEulerAngles(object, $vec3Zero$1, undefined, undefined, false);\n        runtime.sceneGraphService.setLocalPosition(object, [\n            d[0].value,\n            d[1].value,\n            0\n        ], false);\n        runtime.sceneGraphService.dirtifyLocal(object, object.transformable);\n    }\n};\nfunction parsedTransformToMat4(transform, object) {\n    if (transform.length) {\n        if (transform.length === 1 && optimizer[transform[0].t]) {\n            optimizer[transform[0].t](object, transform[0].d);\n            return;\n        }\n        var m = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.identity($mat4_2);\n        for(var i = 0; i < transform.length; i++){\n            var _transform$i = transform[i], t = _transform$i.t, d = _transform$i.d;\n            var p = parser[t];\n            if (p) {\n                p(d);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_19__.mul(m, m, $mat4_1);\n            }\n        }\n        object.setLocalTransform(m);\n    } else {\n        object.resetLocalTransform();\n    }\n    return object.getLocalTransform();\n}\n/**\n * @see /zh/docs/api/animation#支持变换的属性\n *\n * support the following formats like CSS Transform:\n *\n * scale\n * * scale(x, y)\n * * scaleX(x)\n * * scaleY(x)\n * * scaleZ(z)\n * * scale3d(x, y, z)\n *\n * translate (unit: none, px, %(relative to its bounds))\n * * translate(x, y) eg. translate(0, 0) translate(0, 30px) translate(100%, 100%)\n * * translateX(0)\n * * translateY(0)\n * * translateZ(0)\n * * translate3d(0, 0, 0)\n *\n * rotate (unit: deg rad turn)\n * * rotate(0.5turn) rotate(30deg) rotate(1rad)\n *\n * none\n *\n * unsupported for now:\n * * calc() eg. translate(calc(100% + 10px))\n * * matrix/matrix3d()\n * * skew/skewX/skewY\n * * perspective\n */ var CSSPropertyTransform = /*#__PURE__*/ function() {\n    function CSSPropertyTransform() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyTransform);\n        this.parser = parseTransformUnmemoize;\n        this.mixer = mergeTransforms;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyTransform, [\n        {\n            key: \"calculator\",\n            value: function calculator(name, oldParsed, parsed, object) {\n                // 'none'\n                if (parsed instanceof CSSKeywordValue) {\n                    return [];\n                }\n                return parsed;\n            }\n        },\n        {\n            key: \"postProcessor\",\n            value: function postProcessor(object) {\n                parsedTransformToMat4(object.parsedStyle.transform, object);\n            }\n        }\n    ]);\n}();\n/**\n * @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-origin\n * @example\n * [10px, 10px] [10%, 10%]\n */ var CSSPropertyTransformOrigin = /*#__PURE__*/ function() {\n    function CSSPropertyTransformOrigin() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyTransformOrigin);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyTransformOrigin, [\n        {\n            key: \"postProcessor\",\n            value: function postProcessor(object) {\n                var transformOrigin = object.parsedStyle.transformOrigin;\n                if (transformOrigin[0].unit === UnitType.kPixels && transformOrigin[1].unit === UnitType.kPixels) {\n                    object.setOrigin(transformOrigin[0].value, transformOrigin[1].value);\n                } else {\n                    // Relative to geometry bounds, calculate later.\n                    object.getGeometryBounds();\n                }\n            }\n        }\n    ]);\n}();\nvar CSSPropertyZIndex = /*#__PURE__*/ function() {\n    function CSSPropertyZIndex() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CSSPropertyZIndex);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CSSPropertyZIndex, [\n        {\n            key: \"calculator\",\n            value: function calculator(name, oldParsed, computed, object) {\n                return computed.value;\n            }\n        },\n        {\n            key: \"postProcessor\",\n            value: function postProcessor(object) {\n                if (object.parentNode) {\n                    var parentEntity = object.parentNode;\n                    var parentRenderable = parentEntity.renderable;\n                    var parentSortable = parentEntity.sortable;\n                    if (parentRenderable) {\n                        parentRenderable.dirty = true;\n                    }\n                    // need re-sort on parent\n                    if (parentSortable) {\n                        parentSortable.dirty = true;\n                        parentSortable.dirtyReason = SortReason.Z_INDEX_CHANGED;\n                    }\n                }\n            }\n        }\n    ]);\n}();\nvar CircleUpdater = /*#__PURE__*/ function() {\n    function CircleUpdater() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CircleUpdater);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CircleUpdater, [\n        {\n            key: \"update\",\n            value: function update(parsedStyle, object) {\n                var _parsedStyle$cx = parsedStyle.cx, cx = _parsedStyle$cx === void 0 ? 0 : _parsedStyle$cx, _parsedStyle$cy = parsedStyle.cy, cy = _parsedStyle$cy === void 0 ? 0 : _parsedStyle$cy, _parsedStyle$r = parsedStyle.r, r = _parsedStyle$r === void 0 ? 0 : _parsedStyle$r;\n                return {\n                    cx: cx,\n                    cy: cy,\n                    hwidth: r,\n                    hheight: r\n                };\n            }\n        }\n    ]);\n}();\nvar EllipseUpdater = /*#__PURE__*/ function() {\n    function EllipseUpdater() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, EllipseUpdater);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(EllipseUpdater, [\n        {\n            key: \"update\",\n            value: function update(parsedStyle, object) {\n                var _parsedStyle$cx = parsedStyle.cx, cx = _parsedStyle$cx === void 0 ? 0 : _parsedStyle$cx, _parsedStyle$cy = parsedStyle.cy, cy = _parsedStyle$cy === void 0 ? 0 : _parsedStyle$cy, _parsedStyle$rx = parsedStyle.rx, rx = _parsedStyle$rx === void 0 ? 0 : _parsedStyle$rx, _parsedStyle$ry = parsedStyle.ry, ry = _parsedStyle$ry === void 0 ? 0 : _parsedStyle$ry;\n                return {\n                    cx: cx,\n                    cy: cy,\n                    hwidth: rx,\n                    hheight: ry\n                };\n            }\n        }\n    ]);\n}();\nvar LineUpdater = /*#__PURE__*/ function() {\n    function LineUpdater() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, LineUpdater);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(LineUpdater, [\n        {\n            key: \"update\",\n            value: function update(parsedStyle) {\n                var x1 = parsedStyle.x1, y1 = parsedStyle.y1, x2 = parsedStyle.x2, y2 = parsedStyle.y2;\n                var minX = Math.min(x1, x2);\n                var maxX = Math.max(x1, x2);\n                var minY = Math.min(y1, y2);\n                var maxY = Math.max(y1, y2);\n                var width = maxX - minX;\n                var height = maxY - minY;\n                var hwidth = width / 2;\n                var hheight = height / 2;\n                return {\n                    cx: minX + hwidth,\n                    cy: minY + hheight,\n                    hwidth: hwidth,\n                    hheight: hheight\n                };\n            }\n        }\n    ]);\n}();\nvar PathUpdater = /*#__PURE__*/ function() {\n    function PathUpdater() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, PathUpdater);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(PathUpdater, [\n        {\n            key: \"update\",\n            value: function update(parsedStyle) {\n                var d = parsedStyle.d;\n                var _d$rect = d.rect, x = _d$rect.x, y = _d$rect.y, width = _d$rect.width, height = _d$rect.height;\n                var hwidth = width / 2;\n                var hheight = height / 2;\n                return {\n                    cx: x + hwidth,\n                    cy: y + hheight,\n                    hwidth: hwidth,\n                    hheight: hheight\n                };\n            }\n        }\n    ]);\n}();\nvar PolylineUpdater = /*#__PURE__*/ function() {\n    function PolylineUpdater() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, PolylineUpdater);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(PolylineUpdater, [\n        {\n            key: \"update\",\n            value: function update(parsedStyle) {\n                if (parsedStyle.points && (0,_antv_util__WEBPACK_IMPORTED_MODULE_39__[\"default\"])(parsedStyle.points.points)) {\n                    var points = parsedStyle.points.points;\n                    // FIXME: account for miter lineJoin\n                    var minX = Math.min.apply(Math, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(points.map(function(point) {\n                        return point[0];\n                    })));\n                    var maxX = Math.max.apply(Math, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(points.map(function(point) {\n                        return point[0];\n                    })));\n                    var minY = Math.min.apply(Math, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(points.map(function(point) {\n                        return point[1];\n                    })));\n                    var maxY = Math.max.apply(Math, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(points.map(function(point) {\n                        return point[1];\n                    })));\n                    var width = maxX - minX;\n                    var height = maxY - minY;\n                    var hwidth = width / 2;\n                    var hheight = height / 2;\n                    return {\n                        cx: minX + hwidth,\n                        cy: minY + hheight,\n                        hwidth: hwidth,\n                        hheight: hheight\n                    };\n                }\n                return {\n                    cx: 0,\n                    cy: 0,\n                    hwidth: 0,\n                    hheight: 0\n                };\n            }\n        }\n    ]);\n}();\nvar RectUpdater = /*#__PURE__*/ function() {\n    function RectUpdater() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, RectUpdater);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(RectUpdater, [\n        {\n            key: \"update\",\n            value: function update(parsedStyle, object) {\n                var _parsedStyle$x = parsedStyle.x, x = _parsedStyle$x === void 0 ? 0 : _parsedStyle$x, _parsedStyle$y = parsedStyle.y, y = _parsedStyle$y === void 0 ? 0 : _parsedStyle$y, src = parsedStyle.src, _parsedStyle$width = parsedStyle.width, width = _parsedStyle$width === void 0 ? 0 : _parsedStyle$width, _parsedStyle$height = parsedStyle.height, height = _parsedStyle$height === void 0 ? 0 : _parsedStyle$height;\n                var contentWidth = width;\n                var contentHeight = height;\n                // resize with HTMLImageElement's size\n                if (src && !(0,_antv_util__WEBPACK_IMPORTED_MODULE_24__[\"default\"])(src)) {\n                    if (!contentWidth) {\n                        contentWidth = src.width;\n                        parsedStyle.width = contentWidth;\n                    }\n                    if (!contentHeight) {\n                        contentHeight = src.height;\n                        parsedStyle.height = contentHeight;\n                    }\n                }\n                return {\n                    cx: x + contentWidth / 2,\n                    cy: y + contentHeight / 2,\n                    hwidth: contentWidth / 2,\n                    hheight: contentHeight / 2\n                };\n            }\n        }\n    ]);\n}();\nvar TextUpdater = /*#__PURE__*/ function() {\n    function TextUpdater(globalRuntime) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, TextUpdater);\n        this.globalRuntime = globalRuntime;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(TextUpdater, [\n        {\n            key: \"isReadyToMeasure\",\n            value: function isReadyToMeasure(parsedStyle, object) {\n                var text = parsedStyle.text;\n                return text;\n            }\n        },\n        {\n            key: \"update\",\n            value: function update(parsedStyle, object) {\n                var _object$ownerDocument;\n                var text = parsedStyle.text, _parsedStyle$textAlig = parsedStyle.textAlign, textAlign = _parsedStyle$textAlig === void 0 ? \"start\" : _parsedStyle$textAlig, _parsedStyle$lineWidt = parsedStyle.lineWidth, lineWidth = _parsedStyle$lineWidt === void 0 ? 1 : _parsedStyle$lineWidt, _parsedStyle$textBase = parsedStyle.textBaseline, textBaseline = _parsedStyle$textBase === void 0 ? \"alphabetic\" : _parsedStyle$textBase, _parsedStyle$dx = parsedStyle.dx, dx = _parsedStyle$dx === void 0 ? 0 : _parsedStyle$dx, _parsedStyle$dy = parsedStyle.dy, dy = _parsedStyle$dy === void 0 ? 0 : _parsedStyle$dy, _parsedStyle$x = parsedStyle.x, x = _parsedStyle$x === void 0 ? 0 : _parsedStyle$x, _parsedStyle$y = parsedStyle.y, y = _parsedStyle$y === void 0 ? 0 : _parsedStyle$y;\n                if (!this.isReadyToMeasure(parsedStyle, object)) {\n                    parsedStyle.metrics = {\n                        font: \"\",\n                        width: 0,\n                        height: 0,\n                        lines: [],\n                        lineWidths: [],\n                        lineHeight: 0,\n                        maxLineWidth: 0,\n                        fontProperties: {\n                            ascent: 0,\n                            descent: 0,\n                            fontSize: 0\n                        },\n                        lineMetrics: []\n                    };\n                    return {\n                        hwidth: 0,\n                        hheight: 0,\n                        cx: 0,\n                        cy: 0\n                    };\n                }\n                var _ref = (object === null || object === void 0 || (_object$ownerDocument = object.ownerDocument) === null || _object$ownerDocument === void 0 || (_object$ownerDocument = _object$ownerDocument.defaultView) === null || _object$ownerDocument === void 0 ? void 0 : _object$ownerDocument.getConfig()) || {}, offscreenCanvas = _ref.offscreenCanvas;\n                var metrics = this.globalRuntime.textService.measureText(text, parsedStyle, offscreenCanvas);\n                parsedStyle.metrics = metrics;\n                var width = metrics.width, height = metrics.height;\n                var hwidth = width / 2;\n                var hheight = height / 2;\n                // default 'left'\n                var lineXOffset = x + hwidth;\n                if (textAlign === \"center\" || textAlign === \"middle\") {\n                    lineXOffset += lineWidth / 2 - hwidth;\n                } else if (textAlign === \"right\" || textAlign === \"end\") {\n                    lineXOffset += lineWidth - hwidth * 2;\n                }\n                var lineYOffset = y - hheight;\n                if (textBaseline === \"middle\") {\n                    lineYOffset += hheight;\n                } else if (textBaseline === \"top\" || textBaseline === \"hanging\") {\n                    lineYOffset += hheight * 2;\n                } else if (textBaseline === \"alphabetic\") ;\n                else if (textBaseline === \"bottom\" || textBaseline === \"ideographic\") {\n                    lineYOffset += 0;\n                }\n                // TODO: ideographic & bottom\n                if (dx) {\n                    lineXOffset += dx;\n                }\n                if (dy) {\n                    lineYOffset += dy;\n                }\n                return {\n                    cx: lineXOffset,\n                    cy: lineYOffset,\n                    hwidth: hwidth,\n                    hheight: hheight\n                };\n            }\n        }\n    ]);\n}();\nvar GroupUpdater = /*#__PURE__*/ function() {\n    function GroupUpdater() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, GroupUpdater);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(GroupUpdater, [\n        {\n            key: \"update\",\n            value: function update(parsedStyle, object) {\n                return {\n                    cx: 0,\n                    cy: 0,\n                    hwidth: 0,\n                    hheight: 0\n                };\n            }\n        }\n    ]);\n}();\nvar HTMLUpdater = /*#__PURE__*/ function() {\n    function HTMLUpdater() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, HTMLUpdater);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(HTMLUpdater, [\n        {\n            key: \"update\",\n            value: function update(parsedStyle, object) {\n                var _parsedStyle$x = parsedStyle.x, x = _parsedStyle$x === void 0 ? 0 : _parsedStyle$x, _parsedStyle$y = parsedStyle.y, y = _parsedStyle$y === void 0 ? 0 : _parsedStyle$y, _parsedStyle$width = parsedStyle.width, width = _parsedStyle$width === void 0 ? 0 : _parsedStyle$width, _parsedStyle$height = parsedStyle.height, height = _parsedStyle$height === void 0 ? 0 : _parsedStyle$height;\n                return {\n                    cx: x + width / 2,\n                    cy: y + height / 2,\n                    hwidth: width / 2,\n                    hheight: height / 2\n                };\n            }\n        }\n    ]);\n}();\nfunction isFederatedEvent(value) {\n    return !!value.type;\n}\n/**\n * An DOM-compatible synthetic event implementation that is \"forwarded\" on behalf of an original\n * FederatedEvent or native Event.\n */ var FederatedEvent = /*#__PURE__*/ function() {\n    /**\n   * The event boundary which manages this event. Propagation can only occur\n   *  within the boundary's jurisdiction.\n   */ function FederatedEvent(manager) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, FederatedEvent);\n        /**\n     * The propagation phase.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase\n     */ this.eventPhase = FederatedEvent.prototype.NONE;\n        /**\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Event/bubbles\n     */ this.bubbles = true;\n        /**\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Event/cancelBubble\n     */ this.cancelBubble = true;\n        /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable\n     */ this.cancelable = false;\n        /** Flags whether the default response of the user agent was prevent through this event. */ this.defaultPrevented = false;\n        /** Flags whether propagation was stopped. */ this.propagationStopped = false;\n        /** Flags whether propagation was immediately stopped. */ this.propagationImmediatelyStopped = false;\n        /**\n     * The coordinates of the evnet relative to the nearest DOM layer.\n     * This is a non-standard property.\n     */ this.layer = new Point();\n        /**\n     * The coordinates of the event relative to the DOM document.\n     * This is a non-standard property.\n     * relative to the DOM document.\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent/pageX\n     */ this.page = new Point();\n        /**\n     * relative to Canvas, origin is left-top\n     */ this.canvas = new Point();\n        /**\n     * relative to Viewport, account for Camera\n     */ this.viewport = new Point();\n        this.composed = false;\n        this.NONE = 0;\n        this.CAPTURING_PHASE = 1;\n        this.AT_TARGET = 2;\n        this.BUBBLING_PHASE = 3;\n        this.manager = manager;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(FederatedEvent, [\n        {\n            key: \"name\",\n            get: /**\n     * The type of event, supports the following:\n     * * pointerdown\n     * * touchstart\n     * * mousedown\n     * * rightdown\n     * * ...\n     */ /**\n     * @deprecated\n     */ function get() {\n                return this.type;\n            }\n        },\n        {\n            key: \"layerX\",\n            get: function get() {\n                return this.layer.x;\n            }\n        },\n        {\n            key: \"layerY\",\n            get: function get() {\n                return this.layer.y;\n            }\n        },\n        {\n            key: \"pageX\",\n            get: function get() {\n                return this.page.x;\n            }\n        },\n        {\n            key: \"pageY\",\n            get: function get() {\n                return this.page.y;\n            }\n        },\n        {\n            key: \"x\",\n            get: function get() {\n                return this.canvas.x;\n            }\n        },\n        {\n            key: \"y\",\n            get: function get() {\n                return this.canvas.y;\n            }\n        },\n        {\n            key: \"canvasX\",\n            get: function get() {\n                return this.canvas.x;\n            }\n        },\n        {\n            key: \"canvasY\",\n            get: function get() {\n                return this.canvas.y;\n            }\n        },\n        {\n            key: \"viewportX\",\n            get: function get() {\n                return this.viewport.x;\n            }\n        },\n        {\n            key: \"viewportY\",\n            get: function get() {\n                return this.viewport.y;\n            }\n        },\n        {\n            key: \"composedPath\",\n            value: /**\n     * The propagation path for this event\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Event/composedPath\n     *\n     * So composedPath()[0] represents the original target.\n     * @see https://polymer-library.polymer-project.org/3.0/docs/devguide/events#retargeting\n     */ function composedPath() {\n                if (this.manager && (!this.path || this.path[0] !== this.target)) {\n                    this.path = this.target ? this.manager.propagationPath(this.target) : [];\n                }\n                return this.path;\n            }\n        },\n        {\n            key: \"propagationPath\",\n            get: function get() {\n                return this.composedPath();\n            }\n        },\n        {\n            key: \"preventDefault\",\n            value: function preventDefault() {\n                if (this.nativeEvent instanceof Event && this.nativeEvent.cancelable) {\n                    this.nativeEvent.preventDefault();\n                }\n                this.defaultPrevented = true;\n            }\n        },\n        {\n            key: \"stopImmediatePropagation\",\n            value: function stopImmediatePropagation() {\n                this.propagationImmediatelyStopped = true;\n            }\n        },\n        {\n            key: \"stopPropagation\",\n            value: function stopPropagation() {\n                this.propagationStopped = true;\n            }\n        },\n        {\n            key: \"initEvent\",\n            value: /**\n     * added for compatibility with DOM Event,\n     * deprecated props and methods\n     */ function initEvent() {}\n        },\n        {\n            key: \"initUIEvent\",\n            value: function initUIEvent() {}\n        },\n        {\n            key: \"clone\",\n            value: function clone() {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        }\n    ]);\n}();\nvar FederatedMouseEvent = /*#__PURE__*/ function(_ref) {\n    function FederatedMouseEvent() {\n        var _this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, FederatedMouseEvent);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, FederatedMouseEvent, [].concat(args));\n        /** Whether the \"alt\" key was pressed when this mouse event occurred. */ /** The specific button that was pressed in this mouse event. */ /** The button depressed when this event occurred. */ /** Whether the \"control\" key was pressed when this mouse event occurred. */ /** Whether the \"meta\" key was pressed when this mouse event occurred. */ /** This is currently not implemented in the Federated Events API. */ // @ts-ignore\n        /** Whether the \"shift\" key was pressed when this mouse event occurred. */ /**\n     * The coordinates of the mouse event relative to the canvas.\n     */ _this.client = new Point();\n        /**\n     * The movement in this pointer relative to the last `mousemove` event.\n     */ _this.movement = new Point();\n        /**\n     * The offset of the pointer coordinates w.r.t. target DisplayObject in world space. This is\n     * not supported at the moment.\n     */ _this.offset = new Point();\n        /**\n     * The pointer coordinates in world space.\n     */ _this.global = new Point();\n        /**\n     * The pointer coordinates in sceen space.\n     */ _this.screen = new Point();\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(FederatedMouseEvent, _ref);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(FederatedMouseEvent, [\n        {\n            key: \"clientX\",\n            get: function get() {\n                return this.client.x;\n            }\n        },\n        {\n            key: \"clientY\",\n            get: function get() {\n                return this.client.y;\n            }\n        },\n        {\n            key: \"movementX\",\n            get: function get() {\n                return this.movement.x;\n            }\n        },\n        {\n            key: \"movementY\",\n            get: function get() {\n                return this.movement.y;\n            }\n        },\n        {\n            key: \"offsetX\",\n            get: function get() {\n                return this.offset.x;\n            }\n        },\n        {\n            key: \"offsetY\",\n            get: function get() {\n                return this.offset.y;\n            }\n        },\n        {\n            key: \"globalX\",\n            get: function get() {\n                return this.global.x;\n            }\n        },\n        {\n            key: \"globalY\",\n            get: function get() {\n                return this.global.y;\n            }\n        },\n        {\n            key: \"screenX\",\n            get: function get() {\n                return this.screen.x;\n            }\n        },\n        {\n            key: \"screenY\",\n            get: function get() {\n                return this.screen.y;\n            }\n        },\n        {\n            key: \"getModifierState\",\n            value: function getModifierState(key) {\n                return \"getModifierState\" in this.nativeEvent && this.nativeEvent.getModifierState(key);\n            }\n        },\n        {\n            key: \"initMouseEvent\",\n            value: function initMouseEvent() {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        }\n    ]);\n}(FederatedEvent);\n// @ts-ignore\nvar FederatedPointerEvent = /*#__PURE__*/ function(_FederatedMouseEvent) {\n    function FederatedPointerEvent() {\n        var _this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, FederatedPointerEvent);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, FederatedPointerEvent, [].concat(args));\n        /**\n     * The unique identifier of the pointer.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId\n     */ /**\n     * The width of the pointer's contact along the x-axis, measured in CSS pixels.\n     * radiusX of TouchEvents will be represented by this value.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width\n     */ _this.width = 0;\n        /**\n     * The height of the pointer's contact along the y-axis, measured in CSS pixels.\n     * radiusY of TouchEvents will be represented by this value.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height\n     */ _this.height = 0;\n        /**\n     * Indicates whether or not the pointer device that created the event is the primary pointer.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary\n     */ _this.isPrimary = false;\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(FederatedPointerEvent, _FederatedMouseEvent);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(FederatedPointerEvent, [\n        {\n            key: \"getCoalescedEvents\",\n            value: /**\n     * The type of pointer that triggered the event.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\n     */ /**\n     * Pressure applied by the pointing device during the event.\n     *s\n     * A Touch's force property will be represented by this value.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure\n     */ /**\n     * Barrel pressure on a stylus pointer.\n     *\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */ /**\n     * The angle, in degrees, between the pointer device and the screen.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX\n     */ /**\n     * The angle, in degrees, between the pointer device and the screen.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY\n     */ /**\n     * Twist of a stylus pointer.\n     *\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */ /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/getCoalescedEvents\n     */ function getCoalescedEvents() {\n                if (this.type === \"pointermove\" || this.type === \"mousemove\" || this.type === \"touchmove\") {\n                    // @ts-ignore\n                    return [\n                        this\n                    ];\n                }\n                return [];\n            }\n        },\n        {\n            key: \"getPredictedEvents\",\n            value: function getPredictedEvents() {\n                throw new Error(\"getPredictedEvents is not supported!\");\n            }\n        },\n        {\n            key: \"clone\",\n            value: function clone() {\n                return this.manager.clonePointerEvent(this);\n            }\n        }\n    ]);\n}(FederatedMouseEvent);\n// @ts-ignore\nvar FederatedWheelEvent = /*#__PURE__*/ function(_FederatedMouseEvent) {\n    function FederatedWheelEvent() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, FederatedWheelEvent);\n        return _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, FederatedWheelEvent, arguments);\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(FederatedWheelEvent, _FederatedMouseEvent);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(FederatedWheelEvent, [\n        {\n            key: \"clone\",\n            value: /**\n     * The units of `deltaX`, `deltaY`, and `deltaZ`. This is one of `DOM_DELTA_LINE`,\n     * `DOM_DELTA_PAGE`, `DOM_DELTA_PIXEL`.\n     */ /** Horizontal scroll amount */ /** Vertical scroll amount */ /** z-axis scroll amount. */ function clone() {\n                return this.manager.cloneWheelEvent(this);\n            }\n        }\n    ]);\n}(FederatedMouseEvent);\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events\n *\n * @example\n  const event = new CustomEvent('build', { detail: { prop1: 'xx' } });\n  circle.addEventListener('build', (e) => {\n    e.target; // circle\n    e.detail; // { prop1: 'xx' }\n  });\n\n  circle.dispatchEvent(event);\n */ var CustomEvent = /*#__PURE__*/ function(_FederatedEvent) {\n    function CustomEvent(eventName, object) {\n        var _this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CustomEvent);\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, CustomEvent, [\n            null\n        ]);\n        _this.type = eventName;\n        _this.detail = object;\n        // compatible with G 3.0\n        Object.assign(_this, object);\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(CustomEvent, _FederatedEvent);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CustomEvent);\n}(FederatedEvent);\nvar CANVAS_CACHE = new WeakMap();\n/**\n * Objects that can receive events and may have listeners for them.\n * eg. Element, Canvas, DisplayObject\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\n */ var EventTarget = /*#__PURE__*/ function() {\n    function EventTarget() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, EventTarget);\n        /**\n     * event emitter\n     */ this.emitter = new eventemitter3__WEBPACK_IMPORTED_MODULE_7__[\"default\"]();\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(EventTarget, [\n        {\n            key: \"on\",\n            value: /**\n     * @deprecated\n     * @alias addEventListener\n     */ function on(type, listener, options) {\n                this.addEventListener(type, listener, options);\n                return this;\n            }\n        },\n        {\n            key: \"addEventListener\",\n            value: function addEventListener(type, listener, options) {\n                var capture = false;\n                var once = false;\n                if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_40__[\"default\"])(options)) capture = options;\n                else if (options) {\n                    var _options$capture = options.capture;\n                    capture = _options$capture === void 0 ? false : _options$capture;\n                    var _options$once = options.once;\n                    once = _options$once === void 0 ? false : _options$once;\n                }\n                if (capture) type += \"capture\";\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                listener = (0,_antv_util__WEBPACK_IMPORTED_MODULE_41__[\"default\"])(listener) ? listener : listener.handleEvent;\n                var context = (0,_antv_util__WEBPACK_IMPORTED_MODULE_41__[\"default\"])(listener) ? undefined : listener;\n                if (once) this.emitter.once(type, listener, context);\n                else this.emitter.on(type, listener, context);\n                return this;\n            }\n        },\n        {\n            key: \"off\",\n            value: function off(type, listener, options) {\n                if (type) {\n                    this.removeEventListener(type, listener, options);\n                } else {\n                    // remove all listeners\n                    this.removeAllEventListeners();\n                }\n                return this;\n            }\n        },\n        {\n            key: \"removeAllEventListeners\",\n            value: function removeAllEventListeners() {\n                var _this$emitter;\n                (_this$emitter = this.emitter) === null || _this$emitter === void 0 || _this$emitter.removeAllListeners();\n            }\n        },\n        {\n            key: \"removeEventListener\",\n            value: function removeEventListener(type, listener, options) {\n                var _listener;\n                if (!this.emitter) return this;\n                var capture = (0,_antv_util__WEBPACK_IMPORTED_MODULE_40__[\"default\"])(options) ? options : options === null || options === void 0 ? void 0 : options.capture;\n                if (capture) type += \"capture\";\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                listener = (0,_antv_util__WEBPACK_IMPORTED_MODULE_41__[\"default\"])(listener) ? listener : (_listener = listener) === null || _listener === void 0 ? void 0 : _listener.handleEvent;\n                var context = (0,_antv_util__WEBPACK_IMPORTED_MODULE_41__[\"default\"])(listener) ? undefined : listener;\n                this.emitter.off(type, listener, context);\n                return this;\n            }\n        },\n        {\n            key: \"emit\",\n            value: function emit(eventName, object) {\n                this.dispatchEvent(new CustomEvent(eventName, object));\n            }\n        },\n        {\n            key: \"dispatchEvent\",\n            value: function dispatchEvent(e) {\n                var skipPropagate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                var canvas = CANVAS_CACHE.get(this);\n                if (!canvas) {\n                    var _ownerDocument;\n                    // @ts-expect-error document may be defined in inherited class\n                    if (this.document) canvas = this;\n                    else if (this.defaultView) canvas = this.defaultView;\n                    else canvas = (_ownerDocument = this.ownerDocument) === null || _ownerDocument === void 0 ? void 0 : _ownerDocument.defaultView;\n                    if (canvas) CANVAS_CACHE.set(this, canvas);\n                }\n                if (canvas) {\n                    e.manager = canvas.getEventService();\n                    if (!e.manager) return false;\n                    e.defaultPrevented = false;\n                    if (e.path) e.path.length = 0;\n                    else e.page = [];\n                    if (!skipPropagate) e.target = this;\n                    e.manager.dispatchEvent(e, e.type, skipPropagate);\n                } else {\n                    // HACK Fixed the issue that after an element leaves the DOM tree, there is no associated canvas,\n                    // which causes the removed and destroy events to not be triggered\n                    this.emitter.emit(e.type, e);\n                }\n                return !e.defaultPrevented;\n            }\n        }\n    ]);\n}();\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Node\n */ var Node = /*#__PURE__*/ function(_EventTarget) {\n    function Node() {\n        var _this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Node);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, Node, [].concat(args));\n        _this.shadow = false;\n        /**\n     * points to canvas.document\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument\n     */ _this.ownerDocument = null;\n        /**\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Node/isConnected\n     * @example\n        circle.isConnected; // false\n        canvas.appendChild(circle);\n        circle.isConnected; // true\n     */ _this.isConnected = false;\n        /**\n     * Returns node's node document's document base URL.\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Node\n     */ _this.baseURI = \"\";\n        /**\n     * Returns the children.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes\n     */ _this.childNodes = [];\n        /**\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType\n     */ _this.nodeType = 0;\n        /**\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeName\n     */ _this.nodeName = \"\";\n        /**\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeValue\n     */ _this.nodeValue = null;\n        /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/ParentNode\n     */ _this.parentNode = null;\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Node, _EventTarget);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Node, [\n        {\n            key: \"textContent\",\n            get: /**\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Node/textContent\n     */ function get() {\n                var out = \"\";\n                if (this.nodeName === Shape.TEXT) {\n                    // @ts-ignore\n                    out += this.style.text;\n                }\n                var _iterator = _babel_runtime_helpers_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_14___default()(this.childNodes), _step;\n                try {\n                    for(_iterator.s(); !(_step = _iterator.n()).done;){\n                        var _child = _step.value;\n                        if (_child.nodeName === Shape.TEXT) {\n                            out += _child.nodeValue;\n                        } else {\n                            out += _child.textContent;\n                        }\n                    }\n                } catch (err) {\n                    _iterator.e(err);\n                } finally{\n                    _iterator.f();\n                }\n                return out;\n            },\n            set: function set(content) {\n                var _this2 = this;\n                // remove all children\n                this.childNodes.slice().forEach(function(child) {\n                    _this2.removeChild(child);\n                });\n                if (this.nodeName === Shape.TEXT) {\n                    // @ts-ignore\n                    this.style.text = \"\".concat(content);\n                }\n            }\n        },\n        {\n            key: \"getRootNode\",\n            value: function getRootNode() {\n                var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n                if (this.parentNode) {\n                    return this.parentNode.getRootNode(opts);\n                }\n                if (opts.composed && this.host) {\n                    return this.host.getRootNode(opts);\n                }\n                return this;\n            }\n        },\n        {\n            key: \"hasChildNodes\",\n            value: function hasChildNodes() {\n                return this.childNodes.length > 0;\n            }\n        },\n        {\n            key: \"isDefaultNamespace\",\n            value: function isDefaultNamespace(namespace) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"lookupNamespaceURI\",\n            value: function lookupNamespaceURI(prefix) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"lookupPrefix\",\n            value: function lookupPrefix(namespace) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"normalize\",\n            value: function normalize() {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"isEqualNode\",\n            value: function isEqualNode(otherNode) {\n                // TODO: compare 2 nodes, not sameness\n                return this === otherNode;\n            }\n        },\n        {\n            key: \"isSameNode\",\n            value: function isSameNode(otherNode) {\n                return this.isEqualNode(otherNode);\n            }\n        },\n        {\n            key: \"parent\",\n            get: /**\n     * @deprecated\n     * @alias parentNode\n     */ function get() {\n                return this.parentNode;\n            }\n        },\n        {\n            key: \"parentElement\",\n            get: function get() {\n                return null;\n            }\n        },\n        {\n            key: \"nextSibling\",\n            get: function get() {\n                return null;\n            }\n        },\n        {\n            key: \"previousSibling\",\n            get: function get() {\n                return null;\n            }\n        },\n        {\n            key: \"firstChild\",\n            get: function get() {\n                return this.childNodes.length > 0 ? this.childNodes[0] : null;\n            }\n        },\n        {\n            key: \"lastChild\",\n            get: function get() {\n                return this.childNodes.length > 0 ? this.childNodes[this.childNodes.length - 1] : null;\n            }\n        },\n        {\n            key: \"compareDocumentPosition\",\n            value: function compareDocumentPosition(other) {\n                if (other === this) {\n                    // same node\n                    return 0;\n                }\n                // if (!(other instanceof Node)) {\n                //   throw new TypeError(\n                //     'Node.compareDocumentPosition: Argument 1 does not implement interface Node.',\n                //   );\n                // }\n                var node1Root = other;\n                // eslint-disable-next-line @typescript-eslint/no-this-alias\n                var node2Root = this;\n                var node1Hierarchy = [\n                    node1Root\n                ];\n                var node2Hierarchy = [\n                    node2Root\n                ];\n                while((_node1Root$parentNode = node1Root.parentNode) !== null && _node1Root$parentNode !== void 0 ? _node1Root$parentNode : node2Root.parentNode){\n                    var _node1Root$parentNode;\n                    node1Root = node1Root.parentNode ? (node1Hierarchy.push(node1Root.parentNode), node1Root.parentNode) : node1Root;\n                    node2Root = node2Root.parentNode ? (node2Hierarchy.push(node2Root.parentNode), node2Root.parentNode) : node2Root;\n                }\n                // Check if they don't share the same root node\n                if (node1Root !== node2Root) {\n                    return Node.DOCUMENT_POSITION_DISCONNECTED | Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC | Node.DOCUMENT_POSITION_PRECEDING;\n                }\n                var longerHierarchy = node1Hierarchy.length > node2Hierarchy.length ? node1Hierarchy : node2Hierarchy;\n                var shorterHierarchy = longerHierarchy === node1Hierarchy ? node2Hierarchy : node1Hierarchy;\n                // Check if either is a container of the other\n                if (longerHierarchy[longerHierarchy.length - shorterHierarchy.length] === shorterHierarchy[0]) {\n                    return longerHierarchy === node1Hierarchy ? // other is a child of this\n                    Node.DOCUMENT_POSITION_CONTAINED_BY | Node.DOCUMENT_POSITION_FOLLOWING : // this is a child of other\n                    Node.DOCUMENT_POSITION_CONTAINS | Node.DOCUMENT_POSITION_PRECEDING;\n                }\n                // Find their first common ancestor and see whether they\n                // are preceding or following\n                var longerStart = longerHierarchy.length - shorterHierarchy.length;\n                for(var i = shorterHierarchy.length - 1; i >= 0; i--){\n                    var shorterHierarchyNode = shorterHierarchy[i];\n                    var longerHierarchyNode = longerHierarchy[longerStart + i];\n                    // We found the first common ancestor\n                    if (longerHierarchyNode !== shorterHierarchyNode) {\n                        var siblings = shorterHierarchyNode.parentNode.childNodes;\n                        if (siblings.indexOf(shorterHierarchyNode) < siblings.indexOf(longerHierarchyNode)) {\n                            // Shorter is before longer\n                            if (shorterHierarchy === node1Hierarchy) {\n                                // Other is before this\n                                return Node.DOCUMENT_POSITION_PRECEDING;\n                            }\n                            // This is before other\n                            return Node.DOCUMENT_POSITION_FOLLOWING;\n                        }\n                        // Longer is before shorter\n                        if (longerHierarchy === node1Hierarchy) {\n                            // Other is before this\n                            return Node.DOCUMENT_POSITION_PRECEDING;\n                        }\n                        // Other is after this\n                        return Node.DOCUMENT_POSITION_FOLLOWING;\n                    }\n                }\n                return Node.DOCUMENT_POSITION_FOLLOWING;\n            }\n        },\n        {\n            key: \"contain\",\n            value: /**\n     * @deprecated\n     * @alias contains\n     */ function contain(other) {\n                return this.contains(other);\n            }\n        },\n        {\n            key: \"contains\",\n            value: function contains(other) {\n                // the node itself, one of its direct children\n                var tmp = other;\n                // @see https://developer.mozilla.org/en-US/docs/Web/API/Node/contains\n                while(tmp && this !== tmp){\n                    tmp = tmp.parentNode;\n                }\n                return !!tmp;\n            }\n        },\n        {\n            key: \"getAncestor\",\n            value: function getAncestor(n) {\n                // eslint-disable-next-line @typescript-eslint/no-this-alias\n                var temp = this;\n                while(n > 0 && temp){\n                    temp = temp.parentNode;\n                    n--;\n                }\n                return temp;\n            }\n        },\n        {\n            key: \"forEach\",\n            value: function forEach(callback) {\n                var stack = [\n                    this\n                ];\n                while(stack.length > 0){\n                    var node = stack.pop();\n                    var result = callback(node);\n                    if (result === false) {\n                        break;\n                    }\n                    for(var i = node.childNodes.length - 1; i >= 0; i--){\n                        stack.push(node.childNodes[i]);\n                    }\n                }\n            }\n        }\n    ], [\n        {\n            key: \"isNode\",\n            value: function isNode(target) {\n                return !!target.childNodes;\n            }\n        }\n    ]);\n}(EventTarget);\n/**\n * Both nodes are in different documents or different trees in the same document.\n */ Node.DOCUMENT_POSITION_DISCONNECTED = 1;\n/**\n * otherNode precedes the node in either a pre-order depth-first traversal\n * of a tree containing both (e.g., as an ancestor or previous sibling or a descendant of a previous sibling or previous sibling of an ancestor) or (if they are disconnected) in an arbitrary but consistent ordering.\n */ Node.DOCUMENT_POSITION_PRECEDING = 2;\n/**\n * otherNode follows the node in either a pre-order depth-first traversal of a tree containing both (e.g., as a descendant or following sibling or a descendant of a following sibling or following sibling of an ancestor) or (if they are disconnected) in an arbitrary but consistent ordering.\n */ Node.DOCUMENT_POSITION_FOLLOWING = 4;\n/**\n * otherNode is an ancestor of the node.\n */ Node.DOCUMENT_POSITION_CONTAINS = 8;\n/**\n * otherNode is a descendant of the node.\n */ Node.DOCUMENT_POSITION_CONTAINED_BY = 16;\n/**\n * The result relies upon arbitrary and/or implementation-specific behavior and is not guaranteed to be portable.\n */ Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32;\nvar PROPAGATION_LIMIT = 2048;\nvar EventService = /*#__PURE__*/ function() {\n    function EventService(globalRuntime, context) {\n        var _this = this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, EventService);\n        /**\n     * Store HTML elements in current canvas.\n     */ this.nativeHTMLMap = new WeakMap();\n        this.cursor = \"default\";\n        this.mappingTable = {};\n        this.mappingState = {\n            trackingData: {}\n        };\n        this.eventPool = new Map();\n        this.tmpMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create();\n        this.tmpVec3 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create();\n        this.onPointerDown = function(from) {\n            var e = _this.createPointerEvent(from);\n            _this.dispatchEvent(e, \"pointerdown\");\n            if (e.pointerType === \"touch\") {\n                _this.dispatchEvent(e, \"touchstart\");\n            } else if (e.pointerType === \"mouse\" || e.pointerType === \"pen\") {\n                var isRightButton = e.button === 2;\n                _this.dispatchEvent(e, isRightButton ? \"rightdown\" : \"mousedown\");\n            }\n            var trackingData = _this.trackingData(from.pointerId);\n            trackingData.pressTargetsByButton[from.button] = e.composedPath();\n            _this.freeEvent(e);\n        };\n        this.onPointerUp = function(from) {\n            var now = clock.now();\n            var e = _this.createPointerEvent(from, undefined, undefined, _this.context.config.alwaysTriggerPointerEventOnCanvas ? _this.rootTarget : undefined);\n            _this.dispatchEvent(e, \"pointerup\");\n            if (e.pointerType === \"touch\") {\n                _this.dispatchEvent(e, \"touchend\");\n            } else if (e.pointerType === \"mouse\" || e.pointerType === \"pen\") {\n                var isRightButton = e.button === 2;\n                _this.dispatchEvent(e, isRightButton ? \"rightup\" : \"mouseup\");\n            }\n            var trackingData = _this.trackingData(from.pointerId);\n            var pressTarget = _this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n            var clickTarget = pressTarget;\n            // pointerupoutside only bubbles. It only bubbles upto the parent that doesn't contain\n            // the pointerup location.\n            if (pressTarget && !e.composedPath().includes(pressTarget)) {\n                var currentTarget = pressTarget;\n                while(currentTarget && !e.composedPath().includes(currentTarget)){\n                    e.currentTarget = currentTarget;\n                    _this.notifyTarget(e, \"pointerupoutside\");\n                    if (e.pointerType === \"touch\") {\n                        _this.notifyTarget(e, \"touchendoutside\");\n                    } else if (e.pointerType === \"mouse\" || e.pointerType === \"pen\") {\n                        var _isRightButton = e.button === 2;\n                        _this.notifyTarget(e, _isRightButton ? \"rightupoutside\" : \"mouseupoutside\");\n                    }\n                    if (Node.isNode(currentTarget)) {\n                        currentTarget = currentTarget.parentNode;\n                    }\n                }\n                delete trackingData.pressTargetsByButton[from.button];\n                // currentTarget is the most specific ancestor holding both the pointerdown and pointerup\n                // targets. That is - it's our click target!\n                clickTarget = currentTarget;\n            }\n            if (clickTarget) {\n                var _e$detail;\n                var clickEvent = _this.clonePointerEvent(e, \"click\");\n                clickEvent.target = clickTarget;\n                clickEvent.path = [];\n                if (!trackingData.clicksByButton[from.button]) {\n                    trackingData.clicksByButton[from.button] = {\n                        clickCount: 0,\n                        target: clickEvent.target,\n                        timeStamp: now\n                    };\n                }\n                var canvas = _this.context.renderingContext.root.ownerDocument.defaultView;\n                var clickHistory = trackingData.clicksByButton[from.button];\n                if (clickHistory.target === clickEvent.target && now - clickHistory.timeStamp < canvas.getConfig().dblClickSpeed) {\n                    ++clickHistory.clickCount;\n                } else {\n                    clickHistory.clickCount = 1;\n                }\n                clickHistory.target = clickEvent.target;\n                clickHistory.timeStamp = now;\n                clickEvent.detail = clickHistory.clickCount;\n                // @see https://github.com/antvis/G/issues/1091\n                if (!((_e$detail = e.detail) !== null && _e$detail !== void 0 && _e$detail.preventClick)) {\n                    if (!_this.context.config.useNativeClickEvent && (clickEvent.pointerType === \"mouse\" || clickEvent.pointerType === \"touch\")) {\n                        _this.dispatchEvent(clickEvent, \"click\");\n                    }\n                    _this.dispatchEvent(clickEvent, \"pointertap\");\n                }\n                _this.freeEvent(clickEvent);\n            }\n            _this.freeEvent(e);\n        };\n        this.onPointerMove = function(from) {\n            var e = _this.createPointerEvent(from, undefined, undefined, _this.context.config.alwaysTriggerPointerEventOnCanvas ? _this.rootTarget : undefined);\n            var isMouse = e.pointerType === \"mouse\" || e.pointerType === \"pen\";\n            var trackingData = _this.trackingData(from.pointerId);\n            var outTarget = _this.findMountedTarget(trackingData.overTargets);\n            // First pointerout/pointerleave\n            if (trackingData.overTargets && outTarget !== e.target) {\n                // pointerout always occurs on the overTarget when the pointer hovers over another element.\n                var outType = from.type === \"mousemove\" ? \"mouseout\" : \"pointerout\";\n                var outEvent = _this.createPointerEvent(from, outType, outTarget || undefined);\n                _this.dispatchEvent(outEvent, \"pointerout\");\n                if (isMouse) _this.dispatchEvent(outEvent, \"mouseout\");\n                // If the pointer exits overTarget and its descendants, then a pointerleave event is also fired. This event\n                // is dispatched to all ancestors that no longer capture the pointer.\n                if (!e.composedPath().includes(outTarget)) {\n                    var leaveEvent = _this.createPointerEvent(from, \"pointerleave\", outTarget || undefined);\n                    leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n                    while(leaveEvent.target && !e.composedPath().includes(leaveEvent.target)){\n                        leaveEvent.currentTarget = leaveEvent.target;\n                        _this.notifyTarget(leaveEvent);\n                        if (isMouse) {\n                            _this.notifyTarget(leaveEvent, \"mouseleave\");\n                        }\n                        if (Node.isNode(leaveEvent.target)) {\n                            leaveEvent.target = leaveEvent.target.parentNode;\n                        }\n                    }\n                    _this.freeEvent(leaveEvent);\n                }\n                _this.freeEvent(outEvent);\n            }\n            // Then pointerover\n            if (outTarget !== e.target) {\n                // pointerover always occurs on the new overTarget\n                var overType = from.type === \"mousemove\" ? \"mouseover\" : \"pointerover\";\n                var overEvent = _this.clonePointerEvent(e, overType); // clone faster\n                _this.dispatchEvent(overEvent, \"pointerover\");\n                if (isMouse) _this.dispatchEvent(overEvent, \"mouseover\");\n                // Probe whether the newly hovered Node is an ancestor of the original overTarget.\n                var overTargetAncestor = outTarget && Node.isNode(outTarget) && outTarget.parentNode;\n                while(overTargetAncestor && overTargetAncestor !== (Node.isNode(_this.rootTarget) && _this.rootTarget.parentNode)){\n                    if (overTargetAncestor === e.target) break;\n                    overTargetAncestor = overTargetAncestor.parentNode;\n                }\n                // The pointer has entered a non-ancestor of the original overTarget. This means we need a pointerentered\n                // event.\n                var didPointerEnter = !overTargetAncestor || overTargetAncestor === (Node.isNode(_this.rootTarget) && _this.rootTarget.parentNode);\n                if (didPointerEnter) {\n                    var enterEvent = _this.clonePointerEvent(e, \"pointerenter\");\n                    enterEvent.eventPhase = enterEvent.AT_TARGET;\n                    while(enterEvent.target && enterEvent.target !== outTarget && enterEvent.target !== (Node.isNode(_this.rootTarget) && _this.rootTarget.parentNode)){\n                        enterEvent.currentTarget = enterEvent.target;\n                        _this.notifyTarget(enterEvent);\n                        if (isMouse) _this.notifyTarget(enterEvent, \"mouseenter\");\n                        if (Node.isNode(enterEvent.target)) {\n                            enterEvent.target = enterEvent.target.parentNode;\n                        }\n                    }\n                    _this.freeEvent(enterEvent);\n                }\n                _this.freeEvent(overEvent);\n            }\n            // Then pointermove\n            _this.dispatchEvent(e, \"pointermove\");\n            if (e.pointerType === \"touch\") _this.dispatchEvent(e, \"touchmove\");\n            if (isMouse) {\n                _this.dispatchEvent(e, \"mousemove\");\n                _this.cursor = _this.getCursor(e.target);\n            }\n            trackingData.overTargets = e.composedPath();\n            _this.freeEvent(e);\n        };\n        this.onPointerOut = function(from) {\n            var trackingData = _this.trackingData(from.pointerId);\n            if (trackingData.overTargets) {\n                var isMouse = from.pointerType === \"mouse\" || from.pointerType === \"pen\";\n                var outTarget = _this.findMountedTarget(trackingData.overTargets);\n                // pointerout first\n                var outEvent = _this.createPointerEvent(from, \"pointerout\", outTarget || undefined);\n                _this.dispatchEvent(outEvent);\n                if (isMouse) _this.dispatchEvent(outEvent, \"mouseout\");\n                // pointerleave(s) are also dispatched b/c the pointer must've left rootTarget and its descendants to\n                // get an upstream pointerout event (upstream events do not know rootTarget has descendants).\n                var leaveEvent = _this.createPointerEvent(from, \"pointerleave\", outTarget || undefined);\n                leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n                while(leaveEvent.target && leaveEvent.target !== (Node.isNode(_this.rootTarget) && _this.rootTarget.parentNode)){\n                    leaveEvent.currentTarget = leaveEvent.target;\n                    _this.notifyTarget(leaveEvent);\n                    if (isMouse) {\n                        _this.notifyTarget(leaveEvent, \"mouseleave\");\n                    }\n                    if (Node.isNode(leaveEvent.target)) {\n                        leaveEvent.target = leaveEvent.target.parentNode;\n                    }\n                }\n                trackingData.overTargets = null;\n                _this.freeEvent(outEvent);\n                _this.freeEvent(leaveEvent);\n            }\n            _this.cursor = null;\n        };\n        this.onPointerOver = function(from) {\n            var trackingData = _this.trackingData(from.pointerId);\n            var e = _this.createPointerEvent(from);\n            var isMouse = e.pointerType === \"mouse\" || e.pointerType === \"pen\";\n            _this.dispatchEvent(e, \"pointerover\");\n            if (isMouse) _this.dispatchEvent(e, \"mouseover\");\n            if (e.pointerType === \"mouse\") _this.cursor = _this.getCursor(e.target);\n            // pointerenter events must be fired since the pointer entered from upstream.\n            var enterEvent = _this.clonePointerEvent(e, \"pointerenter\");\n            enterEvent.eventPhase = enterEvent.AT_TARGET;\n            while(enterEvent.target && enterEvent.target !== (Node.isNode(_this.rootTarget) && _this.rootTarget.parentNode)){\n                enterEvent.currentTarget = enterEvent.target;\n                _this.notifyTarget(enterEvent);\n                if (isMouse) {\n                    // mouseenter should not bubble\n                    // @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event#usage_notes\n                    _this.notifyTarget(enterEvent, \"mouseenter\");\n                }\n                if (Node.isNode(enterEvent.target)) {\n                    enterEvent.target = enterEvent.target.parentNode;\n                }\n            }\n            trackingData.overTargets = e.composedPath();\n            _this.freeEvent(e);\n            _this.freeEvent(enterEvent);\n        };\n        this.onPointerUpOutside = function(from) {\n            var trackingData = _this.trackingData(from.pointerId);\n            var pressTarget = _this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n            var e = _this.createPointerEvent(from);\n            if (pressTarget) {\n                var currentTarget = pressTarget;\n                while(currentTarget){\n                    e.currentTarget = currentTarget;\n                    _this.notifyTarget(e, \"pointerupoutside\");\n                    if (e.pointerType === \"touch\") ;\n                    else if (e.pointerType === \"mouse\" || e.pointerType === \"pen\") {\n                        _this.notifyTarget(e, e.button === 2 ? \"rightupoutside\" : \"mouseupoutside\");\n                    }\n                    if (Node.isNode(currentTarget)) {\n                        currentTarget = currentTarget.parentNode;\n                    }\n                }\n                delete trackingData.pressTargetsByButton[from.button];\n            }\n            _this.freeEvent(e);\n        };\n        this.onWheel = function(from) {\n            var wheelEvent = _this.createWheelEvent(from);\n            _this.dispatchEvent(wheelEvent);\n            _this.freeEvent(wheelEvent);\n        };\n        this.onClick = function(from) {\n            if (_this.context.config.useNativeClickEvent) {\n                var e = _this.createPointerEvent(from);\n                _this.dispatchEvent(e);\n                _this.freeEvent(e);\n            }\n        };\n        this.onPointerCancel = function(from) {\n            var e = _this.createPointerEvent(from, undefined, undefined, _this.context.config.alwaysTriggerPointerEventOnCanvas ? _this.rootTarget : undefined);\n            _this.dispatchEvent(e);\n            _this.freeEvent(e);\n        };\n        this.globalRuntime = globalRuntime;\n        this.context = context;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(EventService, [\n        {\n            key: \"init\",\n            value: function init() {\n                this.rootTarget = this.context.renderingContext.root.parentNode; // document\n                this.addEventMapping(\"pointerdown\", this.onPointerDown);\n                this.addEventMapping(\"pointerup\", this.onPointerUp);\n                this.addEventMapping(\"pointermove\", this.onPointerMove);\n                this.addEventMapping(\"pointerout\", this.onPointerOut);\n                this.addEventMapping(\"pointerleave\", this.onPointerOut);\n                this.addEventMapping(\"pointercancel\", this.onPointerCancel);\n                this.addEventMapping(\"pointerover\", this.onPointerOver);\n                this.addEventMapping(\"pointerupoutside\", this.onPointerUpOutside);\n                this.addEventMapping(\"wheel\", this.onWheel);\n                this.addEventMapping(\"click\", this.onClick);\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function destroy() {\n                this.mappingTable = {};\n                this.mappingState = {};\n                this.eventPool.clear();\n            }\n        },\n        {\n            key: \"getScale\",\n            value: function getScale() {\n                var bbox = this.context.contextService.getBoundingClientRect();\n                var scaleX = 1;\n                var scaleY = 1;\n                var $el = this.context.contextService.getDomElement();\n                if ($el && bbox) {\n                    var offsetWidth = $el.offsetWidth, offsetHeight = $el.offsetHeight;\n                    if (offsetWidth && offsetHeight) {\n                        scaleX = bbox.width / offsetWidth;\n                        scaleY = bbox.height / offsetHeight;\n                    }\n                }\n                return {\n                    scaleX: scaleX,\n                    scaleY: scaleY,\n                    bbox: bbox\n                };\n            }\n        },\n        {\n            key: \"client2Viewport\",\n            value: function client2Viewport(client) {\n                var _this$getScale = this.getScale(), scaleX = _this$getScale.scaleX, scaleY = _this$getScale.scaleY, bbox = _this$getScale.bbox;\n                return new Point((client.x - ((bbox === null || bbox === void 0 ? void 0 : bbox.left) || 0)) / scaleX, (client.y - ((bbox === null || bbox === void 0 ? void 0 : bbox.top) || 0)) / scaleY);\n            }\n        },\n        {\n            key: \"viewport2Client\",\n            value: function viewport2Client(canvas) {\n                var _this$getScale2 = this.getScale(), scaleX = _this$getScale2.scaleX, scaleY = _this$getScale2.scaleY, bbox = _this$getScale2.bbox;\n                return new Point((canvas.x + ((bbox === null || bbox === void 0 ? void 0 : bbox.left) || 0)) * scaleX, (canvas.y + ((bbox === null || bbox === void 0 ? void 0 : bbox.top) || 0)) * scaleY);\n            }\n        },\n        {\n            key: \"viewport2Canvas\",\n            value: function viewport2Canvas(_ref) {\n                var x = _ref.x, y = _ref.y;\n                var canvas = this.rootTarget.defaultView;\n                var camera = canvas.getCamera();\n                var _this$context$config = this.context.config, width = _this$context$config.width, height = _this$context$config.height;\n                var projectionMatrixInverse = camera.getPerspectiveInverse();\n                var worldMatrix = camera.getWorldTransform();\n                var vpMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.multiply(this.tmpMatrix, worldMatrix, projectionMatrixInverse);\n                var viewport = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.set(this.tmpVec3, x / width * 2 - 1, (1 - y / height) * 2 - 1, 0);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.transformMat4(viewport, viewport, vpMatrix);\n                return new Point(viewport[0], viewport[1]);\n            }\n        },\n        {\n            key: \"canvas2Viewport\",\n            value: function canvas2Viewport(canvasP) {\n                var canvas = this.rootTarget.defaultView;\n                var camera = canvas.getCamera();\n                // World -> Clip\n                var projectionMatrix = camera.getPerspective();\n                var viewMatrix = camera.getViewTransform();\n                var vpMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.multiply(this.tmpMatrix, projectionMatrix, viewMatrix);\n                var clip = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.set(this.tmpVec3, canvasP.x, canvasP.y, 0);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.transformMat4(this.tmpVec3, this.tmpVec3, vpMatrix);\n                // Clip -> NDC -> Viewport, flip Y\n                var _this$context$config2 = this.context.config, width = _this$context$config2.width, height = _this$context$config2.height;\n                return new Point((clip[0] + 1) / 2 * width, (1 - (clip[1] + 1) / 2) * height);\n            }\n        },\n        {\n            key: \"setPickHandler\",\n            value: function setPickHandler(pickHandler) {\n                this.pickHandler = pickHandler;\n            }\n        },\n        {\n            key: \"addEventMapping\",\n            value: function addEventMapping(type, fn) {\n                if (!this.mappingTable[type]) {\n                    this.mappingTable[type] = [];\n                }\n                this.mappingTable[type].push({\n                    fn: fn,\n                    priority: 0\n                });\n                this.mappingTable[type].sort(function(a, b) {\n                    return a.priority - b.priority;\n                });\n            }\n        },\n        {\n            key: \"mapEvent\",\n            value: function mapEvent(e) {\n                if (!this.rootTarget) {\n                    return;\n                }\n                var mappers = this.mappingTable[e.type];\n                if (mappers) {\n                    for(var i = 0, j = mappers.length; i < j; i++){\n                        mappers[i].fn(e);\n                    }\n                } else {\n                    console.warn(\"[EventService]: Event mapping not defined for \".concat(e.type));\n                }\n            }\n        },\n        {\n            key: \"dispatchEvent\",\n            value: function dispatchEvent(e, type, skipPropagate) {\n                // Canvas should skip\n                if (!skipPropagate) {\n                    e.propagationStopped = false;\n                    e.propagationImmediatelyStopped = false;\n                    this.propagate(e, type);\n                } else {\n                    // target phase\n                    e.eventPhase = e.AT_TARGET;\n                    var canvas = this.rootTarget.defaultView || null;\n                    e.currentTarget = canvas;\n                    this.notifyListeners(e, type);\n                }\n            }\n        },\n        {\n            key: \"propagate\",\n            value: function propagate(e, type) {\n                if (!e.target) {\n                    return;\n                }\n                // [target, parent, root, Canvas]\n                var composedPath = e.composedPath();\n                // event flow: capture -> target -> bubbling\n                // capture phase\n                e.eventPhase = e.CAPTURING_PHASE;\n                for(var i = composedPath.length - 1; i >= 1; i--){\n                    e.currentTarget = composedPath[i];\n                    this.notifyTarget(e, type);\n                    if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n                }\n                // target phase\n                e.eventPhase = e.AT_TARGET;\n                e.currentTarget = e.target;\n                this.notifyTarget(e, type);\n                if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n                // find current target in composed path\n                var index = composedPath.indexOf(e.currentTarget);\n                // bubbling phase\n                e.eventPhase = e.BUBBLING_PHASE;\n                for(var _i = index + 1; _i < composedPath.length; _i++){\n                    e.currentTarget = composedPath[_i];\n                    this.notifyTarget(e, type);\n                    if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n                }\n            }\n        },\n        {\n            key: \"propagationPath\",\n            value: function propagationPath(target) {\n                var propagationPath = [\n                    target\n                ];\n                var canvas = this.rootTarget.defaultView || null;\n                if (canvas && canvas === target) {\n                    propagationPath.unshift(canvas.document);\n                    return propagationPath;\n                }\n                for(var i = 0; i < PROPAGATION_LIMIT && target !== this.rootTarget; i++){\n                    // if (Node.isNode(target) && !target.parentNode) {\n                    //   throw new Error('Cannot find propagation path to disconnected target');\n                    // }\n                    if (Node.isNode(target) && target.parentNode) {\n                        // [target, parent, parent, root]\n                        propagationPath.push(target.parentNode);\n                        target = target.parentNode;\n                    }\n                }\n                if (canvas) {\n                    // @ts-ignore\n                    propagationPath.push(canvas);\n                }\n                return propagationPath;\n            }\n        },\n        {\n            key: \"hitTest\",\n            value: function hitTest(position) {\n                var viewportX = position.viewportX, viewportY = position.viewportY;\n                var _this$context$config3 = this.context.config, width = _this$context$config3.width, height = _this$context$config3.height, disableHitTesting = _this$context$config3.disableHitTesting;\n                // outside canvas\n                if (viewportX < 0 || viewportY < 0 || viewportX > width || viewportY > height) {\n                    return null;\n                }\n                return !disableHitTesting && this.pickHandler(position) || this.rootTarget || // return Document\n                null;\n            }\n        },\n        {\n            key: \"isNativeEventFromCanvas\",\n            value: function isNativeEventFromCanvas($el, nativeEvent) {\n                var _target;\n                var target = nativeEvent === null || nativeEvent === void 0 ? void 0 : nativeEvent.target;\n                // Get event target inside a web component.\n                // @see https://stackoverflow.com/questions/57963312/get-event-target-inside-a-web-component\n                if ((_target = target) !== null && _target !== void 0 && _target.shadowRoot) {\n                    target = nativeEvent.composedPath()[0];\n                }\n                if (target) {\n                    // from <canvas>\n                    if (target === $el) {\n                        return true;\n                    }\n                    // from <svg>\n                    if ($el && $el.contains) {\n                        return $el.contains(target);\n                    }\n                }\n                if (nativeEvent !== null && nativeEvent !== void 0 && nativeEvent.composedPath) {\n                    return nativeEvent.composedPath().indexOf($el) > -1;\n                }\n                // account for Touch\n                return false;\n            }\n        },\n        {\n            key: \"getExistedHTML\",\n            value: function getExistedHTML(event) {\n                if (event.nativeEvent.composedPath) {\n                    for(var _i2 = 0, _arr = event.nativeEvent.composedPath(); _i2 < _arr.length; _i2++){\n                        var eventTarget = _arr[_i2];\n                        var existed = this.nativeHTMLMap.get(eventTarget);\n                        if (existed) {\n                            return existed;\n                        }\n                    }\n                }\n                return null;\n            }\n        },\n        {\n            key: \"pickTarget\",\n            value: function pickTarget(event) {\n                return this.hitTest({\n                    clientX: event.clientX,\n                    clientY: event.clientY,\n                    viewportX: event.viewportX,\n                    viewportY: event.viewportY,\n                    x: event.canvasX,\n                    y: event.canvasY\n                });\n            }\n        },\n        {\n            key: \"createPointerEvent\",\n            value: function createPointerEvent(from, type, target, fallbackTarget) {\n                var event = this.allocateEvent(FederatedPointerEvent);\n                this.copyPointerData(from, event);\n                this.copyMouseData(from, event);\n                this.copyData(from, event);\n                event.nativeEvent = from.nativeEvent;\n                event.originalEvent = from;\n                var existedHTML = this.getExistedHTML(event);\n                var $el = this.context.contextService.getDomElement();\n                event.target = target !== null && target !== void 0 ? target : existedHTML || this.isNativeEventFromCanvas($el, event.nativeEvent) && this.pickTarget(event) || fallbackTarget;\n                if (typeof type === \"string\") {\n                    event.type = type;\n                }\n                return event;\n            }\n        },\n        {\n            key: \"createWheelEvent\",\n            value: function createWheelEvent(from) {\n                var event = this.allocateEvent(FederatedWheelEvent);\n                this.copyWheelData(from, event);\n                this.copyMouseData(from, event);\n                this.copyData(from, event);\n                event.nativeEvent = from.nativeEvent;\n                event.originalEvent = from;\n                var existedHTML = this.getExistedHTML(event);\n                var $el = this.context.contextService.getDomElement();\n                event.target = existedHTML || this.isNativeEventFromCanvas($el, event.nativeEvent) && this.pickTarget(event);\n                return event;\n            }\n        },\n        {\n            key: \"trackingData\",\n            value: function trackingData(id) {\n                if (!this.mappingState.trackingData[id]) {\n                    this.mappingState.trackingData[id] = {\n                        pressTargetsByButton: {},\n                        clicksByButton: {},\n                        overTarget: null\n                    };\n                }\n                return this.mappingState.trackingData[id];\n            }\n        },\n        {\n            key: \"cloneWheelEvent\",\n            value: function cloneWheelEvent(from) {\n                var event = this.allocateEvent(FederatedWheelEvent);\n                event.nativeEvent = from.nativeEvent;\n                event.originalEvent = from.originalEvent;\n                this.copyWheelData(from, event);\n                this.copyMouseData(from, event);\n                this.copyData(from, event);\n                event.target = from.target;\n                event.path = from.composedPath().slice();\n                event.type = from.type;\n                return event;\n            }\n        },\n        {\n            key: \"clonePointerEvent\",\n            value: function clonePointerEvent(from, type) {\n                var event = this.allocateEvent(FederatedPointerEvent);\n                event.nativeEvent = from.nativeEvent;\n                event.originalEvent = from.originalEvent;\n                this.copyPointerData(from, event);\n                this.copyMouseData(from, event);\n                this.copyData(from, event);\n                event.target = from.target;\n                event.path = from.composedPath().slice();\n                event.type = type !== null && type !== void 0 ? type : event.type;\n                return event;\n            }\n        },\n        {\n            key: \"copyPointerData\",\n            value: function copyPointerData(from, to) {\n                // if (\n                //   !(\n                //     from instanceof FederatedPointerEvent &&\n                //     to instanceof FederatedPointerEvent\n                //   )\n                // )\n                //   return;\n                to.pointerId = from.pointerId;\n                to.width = from.width;\n                to.height = from.height;\n                to.isPrimary = from.isPrimary;\n                to.pointerType = from.pointerType;\n                to.pressure = from.pressure;\n                to.tangentialPressure = from.tangentialPressure;\n                to.tiltX = from.tiltX;\n                to.tiltY = from.tiltY;\n                to.twist = from.twist;\n            }\n        },\n        {\n            key: \"copyMouseData\",\n            value: function copyMouseData(from, to) {\n                // if (\n                //   !(\n                //     from instanceof FederatedMouseEvent && to instanceof FederatedMouseEvent\n                //   )\n                // )\n                //   return;\n                to.altKey = from.altKey;\n                to.button = from.button;\n                to.buttons = from.buttons;\n                to.ctrlKey = from.ctrlKey;\n                to.metaKey = from.metaKey;\n                to.shiftKey = from.shiftKey;\n                to.client.copyFrom(from.client);\n                to.movement.copyFrom(from.movement);\n                to.canvas.copyFrom(from.canvas);\n                to.screen.copyFrom(from.screen);\n                to.global.copyFrom(from.global);\n                to.offset.copyFrom(from.offset);\n            }\n        },\n        {\n            key: \"copyWheelData\",\n            value: function copyWheelData(from, to) {\n                to.deltaMode = from.deltaMode;\n                to.deltaX = from.deltaX;\n                to.deltaY = from.deltaY;\n                to.deltaZ = from.deltaZ;\n            }\n        },\n        {\n            key: \"copyData\",\n            value: function copyData(from, to) {\n                to.isTrusted = from.isTrusted;\n                to.timeStamp = clock.now();\n                to.type = from.type;\n                to.detail = from.detail;\n                to.view = from.view;\n                to.page.copyFrom(from.page);\n                to.viewport.copyFrom(from.viewport);\n            }\n        },\n        {\n            key: \"allocateEvent\",\n            value: function allocateEvent(constructor) {\n                if (!this.eventPool.has(constructor)) {\n                    this.eventPool.set(constructor, []);\n                }\n                // @ts-ignore\n                var event = this.eventPool.get(constructor).pop() || new constructor(this);\n                event.eventPhase = event.NONE;\n                event.currentTarget = null;\n                event.path = [];\n                event.target = null;\n                return event;\n            }\n        },\n        {\n            key: \"freeEvent\",\n            value: function freeEvent(event) {\n                if (event.manager !== this) throw new Error(\"It is illegal to free an event not managed by this EventBoundary!\");\n                var constructor = event.constructor;\n                if (!this.eventPool.has(constructor)) {\n                    this.eventPool.set(constructor, []);\n                }\n                // @ts-ignore\n                this.eventPool.get(constructor).push(event);\n            }\n        },\n        {\n            key: \"notifyTarget\",\n            value: function notifyTarget(e, type) {\n                type = type !== null && type !== void 0 ? type : e.type;\n                var key = e.eventPhase === e.CAPTURING_PHASE || e.eventPhase === e.AT_TARGET ? \"\".concat(type, \"capture\") : type;\n                this.notifyListeners(e, key);\n                if (e.eventPhase === e.AT_TARGET) {\n                    this.notifyListeners(e, type);\n                }\n            }\n        },\n        {\n            key: \"notifyListeners\",\n            value: function notifyListeners(e, type) {\n                // hack EventEmitter, stops if the `propagationImmediatelyStopped` flag is set\n                var emitter = e.currentTarget.emitter;\n                // @ts-ignore\n                var listeners = emitter._events[type];\n                if (!listeners) return;\n                if (\"fn\" in listeners) {\n                    if (listeners.once) {\n                        emitter.removeListener(type, listeners.fn, undefined, true);\n                    }\n                    listeners.fn.call(e.currentTarget || listeners.context, e);\n                // listeners.fn.call(listeners.context, e);\n                } else {\n                    for(var i = 0; i < listeners.length && !e.propagationImmediatelyStopped; i++){\n                        if (listeners[i].once) {\n                            emitter.removeListener(type, listeners[i].fn, undefined, true);\n                        }\n                        listeners[i].fn.call(e.currentTarget || listeners[i].context, e);\n                    // listeners[i].fn.call(listeners[i].context, e);\n                    }\n                }\n            }\n        },\n        {\n            key: \"findMountedTarget\",\n            value: function findMountedTarget(propagationPath) {\n                if (!propagationPath) {\n                    return null;\n                }\n                var currentTarget = propagationPath[propagationPath.length - 1];\n                for(var i = propagationPath.length - 2; i >= 0; i--){\n                    var target = propagationPath[i];\n                    if (target === this.rootTarget || Node.isNode(target) && target.parentNode === currentTarget) {\n                        currentTarget = propagationPath[i];\n                    } else {\n                        break;\n                    }\n                }\n                return currentTarget;\n            }\n        },\n        {\n            key: \"getCursor\",\n            value: function getCursor(target) {\n                var tmp = target;\n                while(tmp){\n                    var cursor = isElement(tmp) && tmp.getAttribute(\"cursor\");\n                    if (cursor) {\n                        return cursor;\n                    }\n                    tmp = Node.isNode(tmp) && tmp.parentNode;\n                }\n            }\n        }\n    ]);\n}();\n/**\n * used in following scenes:\n * - g `ctx.measureText`\n * - g-plugin-canvas-picker `ctx.isPointInPath`\n * - g-plugin-device-renderer `ctx.createLinearGradient` and generate texture\n *\n * @see https://blog.scottlogic.com/2020/03/19/offscreen-canvas.html\n */ var OffscreenCanvasCreator = /*#__PURE__*/ function() {\n    function OffscreenCanvasCreator() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, OffscreenCanvasCreator);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(OffscreenCanvasCreator, [\n        {\n            key: \"getOrCreateCanvas\",\n            value: function getOrCreateCanvas(offscreenCanvas, contextAttributes) {\n                if (this.canvas) {\n                    return this.canvas;\n                }\n                // user-defined offscreen canvas\n                if (offscreenCanvas || runtime.offscreenCanvas) {\n                    this.canvas = offscreenCanvas || runtime.offscreenCanvas;\n                    this.context = this.canvas.getContext(\"2d\", _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                        willReadFrequently: true\n                    }, contextAttributes));\n                } else {\n                    try {\n                        // OffscreenCanvas2D measureText can be up to 40% faster.\n                        this.canvas = new window.OffscreenCanvas(0, 0);\n                        this.context = this.canvas.getContext(\"2d\", _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                            willReadFrequently: true\n                        }, contextAttributes));\n                        if (!this.context || !this.context.measureText) {\n                            this.canvas = document.createElement(\"canvas\");\n                            this.context = this.canvas.getContext(\"2d\");\n                        }\n                    } catch (_unused) {\n                        this.canvas = document.createElement(\"canvas\");\n                        this.context = this.canvas.getContext(\"2d\", _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                            willReadFrequently: true\n                        }, contextAttributes));\n                    }\n                }\n                this.canvas.width = 10;\n                this.canvas.height = 10;\n                return this.canvas;\n            }\n        },\n        {\n            key: \"getOrCreateContext\",\n            value: function getOrCreateContext(offscreenCanvas, contextAttributes) {\n                if (this.context) {\n                    return this.context;\n                }\n                this.getOrCreateCanvas(offscreenCanvas, contextAttributes);\n                return this.context;\n            }\n        }\n    ], [\n        {\n            key: \"createCanvas\",\n            value: /**\n     * @returns new canvas instance\n     */ function createCanvas() {\n                try {\n                    return new window.OffscreenCanvas(0, 0);\n                } catch (_unused2) {\n                //\n                }\n                try {\n                    return document.createElement(\"canvas\");\n                } catch (_unused3) {\n                //\n                }\n                return null;\n            }\n        }\n    ]);\n}();\n/**\n * why we need re-render\n */ var RenderReason = /*#__PURE__*/ function(RenderReason) {\n    RenderReason[RenderReason[\"CAMERA_CHANGED\"] = 0] = \"CAMERA_CHANGED\";\n    RenderReason[RenderReason[\"DISPLAY_OBJECT_CHANGED\"] = 1] = \"DISPLAY_OBJECT_CHANGED\";\n    RenderReason[RenderReason[\"NONE\"] = 2] = \"NONE\";\n    return RenderReason;\n}({});\n/**\n * Use frame renderer implemented by `g-canvas/svg/webgl`, in every frame we do followings:\n * * update & merge dirty rectangles\n * * begin frame\n * * filter by visible\n * * sort by z-index in scene graph\n * * culling with strategies registered in `g-canvas/webgl`\n * * end frame\n */ var RenderingService = /*#__PURE__*/ function() {\n    function RenderingService(globalRuntime, context) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, RenderingService);\n        this.inited = false;\n        this.stats = {\n            /**\n       * total display objects in scenegraph\n       */ total: 0,\n            /**\n       * number of display objects need to render in current frame\n       */ rendered: 0\n        };\n        this.zIndexCounter = 0;\n        this.hooks = {\n            /**\n       * called before any frame rendered\n       */ init: new SyncHook(),\n            initAsync: new AsyncParallelHook(),\n            /**\n       * only dirty object which has sth changed will be rendered\n       */ dirtycheck: new SyncWaterfallHook(),\n            /**\n       * do culling\n       */ cull: new SyncWaterfallHook(),\n            /**\n       * called at beginning of each frame, won't get called if nothing to re-render\n       */ beginFrame: new SyncHook(),\n            /**\n       * called before every dirty object get rendered\n       */ beforeRender: new SyncHook(),\n            /**\n       * called when every dirty object rendering even it's culled\n       */ render: new SyncHook(),\n            /**\n       * called after every dirty object get rendered\n       */ afterRender: new SyncHook(),\n            endFrame: new SyncHook(),\n            destroy: new SyncHook(),\n            /**\n       * use async but faster method such as GPU-based picking in `g-plugin-device-renderer`\n       */ pick: new AsyncSeriesWaterfallHook(),\n            /**\n       * Unsafe but sync version of pick.\n       */ pickSync: new SyncWaterfallHook(),\n            /**\n       * used in event system\n       */ pointerDown: new SyncHook(),\n            pointerUp: new SyncHook(),\n            pointerMove: new SyncHook(),\n            pointerOut: new SyncHook(),\n            pointerOver: new SyncHook(),\n            pointerWheel: new SyncHook(),\n            pointerCancel: new SyncHook(),\n            click: new SyncHook()\n        };\n        this.globalRuntime = globalRuntime;\n        this.context = context;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(RenderingService, [\n        {\n            key: \"init\",\n            value: function init(callback) {\n                var _this = this;\n                var context = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, this.globalRuntime), this.context);\n                // register rendering plugins\n                this.context.renderingPlugins.forEach(function(plugin) {\n                    plugin.apply(context, _this.globalRuntime);\n                });\n                this.hooks.init.call();\n                if (this.hooks.initAsync.getCallbacksNum() === 0) {\n                    this.inited = true;\n                    callback();\n                } else {\n                    this.hooks.initAsync.promise().then(function() {\n                        _this.inited = true;\n                        callback();\n                    })[\"catch\"](function(err) {});\n                }\n            }\n        },\n        {\n            key: \"getStats\",\n            value: function getStats() {\n                return this.stats;\n            }\n        },\n        {\n            key: \"disableDirtyRectangleRendering\",\n            value: function disableDirtyRectangleRendering() {\n                var renderer = this.context.config.renderer;\n                var _renderer$getConfig = renderer.getConfig(), enableDirtyRectangleRendering = _renderer$getConfig.enableDirtyRectangleRendering;\n                return !enableDirtyRectangleRendering || this.context.renderingContext.renderReasons.has(RenderReason.CAMERA_CHANGED);\n            }\n        },\n        {\n            key: \"render\",\n            value: function render(canvasConfig, frame, rerenderCallback) {\n                var _this2 = this;\n                this.stats.total = 0;\n                this.stats.rendered = 0;\n                this.zIndexCounter = 0;\n                var renderingContext = this.context.renderingContext;\n                this.globalRuntime.sceneGraphService.syncHierarchy(renderingContext.root);\n                this.globalRuntime.sceneGraphService.triggerPendingEvents();\n                if (renderingContext.renderReasons.size && this.inited) {\n                    // @ts-ignore\n                    renderingContext.dirtyRectangleRenderingDisabled = this.disableDirtyRectangleRendering();\n                    var onlyCameraChanged = renderingContext.renderReasons.size === 1 && renderingContext.renderReasons.has(RenderReason.CAMERA_CHANGED);\n                    var shouldTriggerRenderHooks = !canvasConfig.disableRenderHooks || !(canvasConfig.disableRenderHooks && onlyCameraChanged);\n                    if (shouldTriggerRenderHooks) {\n                        this.renderDisplayObject(renderingContext.root, canvasConfig, renderingContext);\n                    }\n                    this.hooks.beginFrame.call(frame);\n                    if (shouldTriggerRenderHooks) {\n                        renderingContext.renderListCurrentFrame.forEach(function(object) {\n                            _this2.hooks.beforeRender.call(object);\n                            _this2.hooks.render.call(object);\n                            _this2.hooks.afterRender.call(object);\n                        });\n                    }\n                    this.hooks.endFrame.call(frame);\n                    renderingContext.renderListCurrentFrame = [];\n                    renderingContext.renderReasons.clear();\n                    rerenderCallback();\n                }\n            // console.log('stats', this.stats);\n            }\n        },\n        {\n            key: \"renderDisplayObject\",\n            value: function renderDisplayObject(displayObject, canvasConfig, renderingContext) {\n                var self1 = this;\n                var _canvasConfig$rendere = canvasConfig.renderer.getConfig(), enableDirtyCheck = _canvasConfig$rendere.enableDirtyCheck, enableCulling = _canvasConfig$rendere.enableCulling;\n                function internalRenderSingleDisplayObject(object) {\n                    // TODO: relayout\n                    // dirtycheck first\n                    var renderable = object.renderable, sortable = object.sortable;\n                    // eslint-disable-next-line no-nested-ternary\n                    var objectChanged = enableDirtyCheck ? // @ts-ignore\n                    renderable.dirty || renderingContext.dirtyRectangleRenderingDisabled ? object : null : object;\n                    if (objectChanged) {\n                        var objectToRender = enableCulling ? self1.hooks.cull.call(objectChanged, self1.context.camera) : objectChanged;\n                        if (objectToRender) {\n                            self1.stats.rendered += 1;\n                            renderingContext.renderListCurrentFrame.push(objectToRender);\n                        }\n                    }\n                    renderable.dirty = false;\n                    sortable.renderOrder = self1.zIndexCounter;\n                    self1.zIndexCounter += 1;\n                    self1.stats.total += 1;\n                    // sort is very expensive, use cached result if possible\n                    if (sortable.dirty) {\n                        self1.sort(object, sortable);\n                        sortable.dirty = false;\n                        sortable.dirtyChildren = [];\n                        sortable.dirtyReason = undefined;\n                    }\n                }\n                var stack = [\n                    displayObject\n                ];\n                while(stack.length > 0){\n                    var currentObject = stack.pop();\n                    internalRenderSingleDisplayObject(currentObject);\n                    // recursive rendering its children\n                    var objects = currentObject.sortable.sorted || currentObject.childNodes;\n                    for(var i = objects.length - 1; i >= 0; i--){\n                        stack.push(objects[i]);\n                    }\n                }\n            }\n        },\n        {\n            key: \"sort\",\n            value: function sort(displayObject, sortable) {\n                if (sortable.sorted && sortable.dirtyReason !== SortReason.Z_INDEX_CHANGED) {\n                    // avoid re-sorting the whole children list\n                    sortable.dirtyChildren.forEach(function(child) {\n                        var index = displayObject.childNodes.indexOf(child);\n                        if (index === -1) {\n                            // remove from sorted list\n                            var _index = sortable.sorted.indexOf(child);\n                            if (_index >= 0) {\n                                sortable.sorted.splice(_index, 1);\n                            }\n                        } else if (sortable.sorted.length === 0) {\n                            sortable.sorted.push(child);\n                        } else {\n                            var _index2 = sortedIndex(sortable.sorted, child);\n                            sortable.sorted.splice(_index2, 0, child);\n                        }\n                    });\n                } else {\n                    sortable.sorted = displayObject.childNodes.slice().sort(sortByZIndex);\n                }\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function destroy() {\n                this.inited = false;\n                this.hooks.destroy.call();\n                this.globalRuntime.sceneGraphService.clearPendingEvents();\n            }\n        },\n        {\n            key: \"dirtify\",\n            value: function dirtify() {\n                // need re-render\n                this.context.renderingContext.renderReasons.add(RenderReason.DISPLAY_OBJECT_CHANGED);\n            }\n        }\n    ]);\n}();\nvar ATTRIBUTE_REGEXP = /\\[\\s*(.*)=(.*)\\s*\\]/;\n/**\n * support the following DOM API:\n * * getElementById\n * * getElementsByClassName\n * * getElementsByName\n * * getElementsByTag\n * * querySelector\n * * querySelectorAll\n */ var DefaultSceneGraphSelector = /*#__PURE__*/ function() {\n    function DefaultSceneGraphSelector() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, DefaultSceneGraphSelector);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(DefaultSceneGraphSelector, [\n        {\n            key: \"selectOne\",\n            value: function selectOne(query, root) {\n                var _this = this;\n                if (query.startsWith(\".\")) {\n                    return root.find(function(node) {\n                        // return !node.shadow && node.id === query.substring(1);\n                        return ((node === null || node === void 0 ? void 0 : node.classList) || []).indexOf(_this.getIdOrClassname(query)) > -1;\n                    });\n                }\n                if (query.startsWith(\"#\")) {\n                    // getElementById('id')\n                    return root.find(function(node) {\n                        // return !node.shadow && node.id === query.substring(1);\n                        return node.id === _this.getIdOrClassname(query);\n                    });\n                }\n                if (query.startsWith(\"[\")) {\n                    var _this$getAttribute = this.getAttribute(query), name = _this$getAttribute.name, value = _this$getAttribute.value;\n                    if (name) {\n                        // getElementByName();\n                        return root.find(function(node) {\n                            return root !== node && (name === \"name\" ? node.name === value : _this.attributeToString(node, name) === value);\n                        });\n                    }\n                    return null;\n                }\n                // getElementsByTag('circle');\n                return root.find(function(node) {\n                    return root !== node && node.nodeName === query;\n                });\n            }\n        },\n        {\n            key: \"selectAll\",\n            value: function selectAll(query, root) {\n                var _this2 = this;\n                // only support `[name=\"${name}\"]` `.className` `#id`\n                if (query.startsWith(\".\")) {\n                    // getElementsByClassName('className');\n                    // should not include itself\n                    return root.findAll(function(node) {\n                        return root !== node && ((node === null || node === void 0 ? void 0 : node.classList) || []).indexOf(_this2.getIdOrClassname(query)) > -1;\n                    });\n                }\n                if (query.startsWith(\"#\")) {\n                    return root.findAll(function(node) {\n                        return root !== node && node.id === _this2.getIdOrClassname(query);\n                    });\n                }\n                if (query.startsWith(\"[\")) {\n                    var _this$getAttribute2 = this.getAttribute(query), name = _this$getAttribute2.name, value = _this$getAttribute2.value;\n                    if (name) {\n                        // getElementsByName();\n                        return root.findAll(function(node) {\n                            return root !== node && (name === \"name\" ? node.name === value : _this2.attributeToString(node, name) === value);\n                        });\n                    }\n                    return [];\n                }\n                // getElementsByTag('circle');\n                return root.findAll(function(node) {\n                    return root !== node && node.nodeName === query;\n                });\n            }\n        },\n        {\n            key: \"is\",\n            value: function is(query, node) {\n                // a simple `matches` implementation\n                if (query.startsWith(\".\")) {\n                    return node.className === this.getIdOrClassname(query);\n                }\n                if (query.startsWith(\"#\")) {\n                    return node.id === this.getIdOrClassname(query);\n                }\n                if (query.startsWith(\"[\")) {\n                    var _this$getAttribute3 = this.getAttribute(query), name = _this$getAttribute3.name, value = _this$getAttribute3.value;\n                    return name === \"name\" ? node.name === value : this.attributeToString(node, name) === value;\n                }\n                return node.nodeName === query;\n            }\n        },\n        {\n            key: \"getIdOrClassname\",\n            value: function getIdOrClassname(query) {\n                return query.substring(1);\n            }\n        },\n        {\n            key: \"getAttribute\",\n            value: function getAttribute(query) {\n                var matches = query.match(ATTRIBUTE_REGEXP);\n                var name = \"\";\n                var value = \"\";\n                if (matches && matches.length > 2) {\n                    name = matches[1].replace(/\"/g, \"\");\n                    value = matches[2].replace(/\"/g, \"\");\n                }\n                return {\n                    name: name,\n                    value: value\n                };\n            }\n        },\n        {\n            key: \"attributeToString\",\n            value: function attributeToString(node, name) {\n                if (!node.getAttribute) {\n                    return \"\";\n                }\n                var value = node.getAttribute(name);\n                if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(value)) {\n                    return \"\";\n                }\n                if (value.toString) {\n                    return value.toString();\n                }\n                return \"\";\n            }\n        }\n    ]);\n}();\n/**\n * built-in events for element\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MutationEvent\n *\n * TODO: use MutationObserver instead\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n */ var ElementEvent = /*#__PURE__*/ function(ElementEvent) {\n    // --- @see https://developer.mozilla.org/en-US/docs/Web/API/MutationEvent\n    /**\n   * @see https://www.w3.org/TR/DOM-Level-3-Events/#event-type-DOMAttrModified\n   */ ElementEvent[\"ATTR_MODIFIED\"] = \"DOMAttrModified\";\n    /**\n   * it has been inserted\n   * @see https://www.w3.org/TR/DOM-Level-3-Events/#event-type-DOMNodeInserted\n   */ ElementEvent[\"INSERTED\"] = \"DOMNodeInserted\";\n    /**\n   * @see https://www.w3.org/TR/DOM-Level-3-Events/#domnodeinsertedintodocument\n   */ ElementEvent[\"MOUNTED\"] = \"DOMNodeInsertedIntoDocument\";\n    /**\n   * it is being removed\n   * @see https://www.w3.org/TR/DOM-Level-3-Events/#event-type-DOMNodeRemoved\n   */ ElementEvent[\"REMOVED\"] = \"removed\";\n    /**\n   * @see https://www.w3.org/TR/DOM-Level-3-Events/#domnoderemovedfromdocument\n   */ ElementEvent[\"UNMOUNTED\"] = \"DOMNodeRemovedFromDocument\";\n    // ---\n    ElementEvent[\"REPARENT\"] = \"reparent\";\n    ElementEvent[\"DESTROY\"] = \"destroy\";\n    ElementEvent[\"BOUNDS_CHANGED\"] = \"bounds-changed\";\n    ElementEvent[\"CULLED\"] = \"culled\";\n    return ElementEvent;\n}({});\n// #region EventTarget\n// #region Node\n// #region Element\n// #region AnimationTimeline\n// #region Document\n// #region CSSStyleDeclaration\n/**\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/CSSStyleDeclaration\n */ // #region Canvas\nvar MutationEvent = /*#__PURE__*/ function(_FederatedEvent) {\n    function MutationEvent(typeArg, relatedNode, prevValue, newValue, attrName, attrChange, prevParsedValue, newParsedValue) {\n        var _this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, MutationEvent);\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, MutationEvent, [\n            null\n        ]);\n        _this.relatedNode = relatedNode;\n        _this.prevValue = prevValue;\n        _this.newValue = newValue;\n        _this.attrName = attrName;\n        _this.attrChange = attrChange;\n        _this.prevParsedValue = prevParsedValue;\n        _this.newParsedValue = newParsedValue;\n        _this.type = typeArg;\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(MutationEvent, _FederatedEvent);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(MutationEvent);\n}(FederatedEvent);\nMutationEvent.ADDITION = 2;\nMutationEvent.MODIFICATION = 1;\nMutationEvent.REMOVAL = 3;\nfunction markRenderableDirty(e) {\n    var renderable = e.renderable;\n    if (renderable) {\n        renderable.renderBoundsDirty = true;\n        renderable.boundsDirty = true;\n    }\n}\nvar reparentEvent = new MutationEvent(ElementEvent.REPARENT, null, \"\", \"\", \"\", 0, \"\", \"\");\n// Object pooling\n/** do not modify this objects */ var $vec2Zero = gl_matrix__WEBPACK_IMPORTED_MODULE_42__.create();\n/** do not modify this objects */ var $vec3Zero = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create();\n/** do not modify this objects */ var $vec3One = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(1, 1, 1);\n/** do not modify this objects */ var $mat4Identity = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create();\n/** shared objects */ var $vec2 = gl_matrix__WEBPACK_IMPORTED_MODULE_42__.create();\n/** shared objects */ var $vec3$1 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create();\n/** shared objects */ var $mat4 = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create();\n/** shared objects */ var $quat$1 = gl_matrix__WEBPACK_IMPORTED_MODULE_21__.create();\nvar $setLocalTransform_1 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create();\nvar $setLocalTransform_2 = gl_matrix__WEBPACK_IMPORTED_MODULE_21__.create();\nvar $setLocalTransform_3 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create();\nvar $setLocalPosition = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create();\nvar $setPosition_1 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create();\nvar $setPosition_ParentInvertMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create();\nvar $setEulerAngles_InvParentRot = gl_matrix__WEBPACK_IMPORTED_MODULE_21__.create();\nvar $rotateLocal = gl_matrix__WEBPACK_IMPORTED_MODULE_21__.create();\nvar $rotate_ParentInvertRotation = gl_matrix__WEBPACK_IMPORTED_MODULE_21__.create();\nvar $triggerPendingEvents_detail = {\n    affectChildren: true\n};\n/**\n * update transform in scene graph\n *\n * @see https://community.khronos.org/t/scene-graphs/50542/7\n */ var DefaultSceneGraphService = /*#__PURE__*/ function() {\n    function DefaultSceneGraphService(runtime) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, DefaultSceneGraphService);\n        // target -> affectChildren\n        this.pendingEvents = new Map();\n        this.boundsChangedEvent = new CustomEvent(ElementEvent.BOUNDS_CHANGED);\n        this.displayObjectDependencyMap = new WeakMap();\n        this.runtime = runtime;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(DefaultSceneGraphService, [\n        {\n            key: \"matches\",\n            value: function matches(query, root) {\n                return this.runtime.sceneGraphSelector.is(query, root);\n            }\n        },\n        {\n            key: \"querySelector\",\n            value: function querySelector(query, root) {\n                return this.runtime.sceneGraphSelector.selectOne(query, root);\n            }\n        },\n        {\n            key: \"querySelectorAll\",\n            value: function querySelectorAll(query, root) {\n                return this.runtime.sceneGraphSelector.selectAll(query, root);\n            // .filter((node) => !node.shadow);\n            }\n        },\n        {\n            key: \"attach\",\n            value: function attach(child, parent, index) {\n                var _sortable$sorted;\n                var detached = false;\n                if (child.parentNode) {\n                    detached = child.parentNode !== parent;\n                    this.detach(child);\n                }\n                var isChildFragment = child.nodeName === Shape.FRAGMENT;\n                var isAttachToFragment = isInFragment(parent);\n                child.parentNode = parent;\n                var nodes = isChildFragment ? child.childNodes : [\n                    child\n                ];\n                if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(index)) {\n                    nodes.forEach(function(node) {\n                        parent.childNodes.splice(index, 0, node);\n                        node.parentNode = parent;\n                    });\n                } else {\n                    nodes.forEach(function(node) {\n                        parent.childNodes.push(node);\n                        node.parentNode = parent;\n                    });\n                }\n                // parent needs re-sort\n                var _ref = parent, sortable = _ref.sortable;\n                if (sortable !== null && sortable !== void 0 && (_sortable$sorted = sortable.sorted) !== null && _sortable$sorted !== void 0 && _sortable$sorted.length || child.parsedStyle.zIndex) {\n                    if (sortable.dirtyChildren.indexOf(child) === -1) {\n                        sortable.dirtyChildren.push(child);\n                    }\n                    // if (sortable) {\n                    // only child has z-Index\n                    sortable.dirty = true;\n                    sortable.dirtyReason = SortReason.ADDED;\n                }\n                if (isAttachToFragment) return;\n                if (isChildFragment) this.dirtifyFragment(child);\n                else {\n                    var transform = child.transformable;\n                    if (transform) {\n                        this.dirtifyWorld(child, transform);\n                    }\n                }\n                if (detached) {\n                    child.dispatchEvent(reparentEvent);\n                }\n            }\n        },\n        {\n            key: \"detach\",\n            value: function detach(child) {\n                if (child.parentNode) {\n                    var _sortable$sorted2, _style;\n                    var transform = child.transformable;\n                    // if (transform) {\n                    //   const worldTransform = this.getWorldTransform(child, transform);\n                    //   mat4.getScaling(transform.localScale, worldTransform);\n                    //   mat4.getTranslation(transform.localPosition, worldTransform);\n                    //   mat4.getRotation(transform.localRotation, worldTransform);\n                    //   transform.localDirtyFlag = true;\n                    // }\n                    // parent needs re-sort\n                    var _ref2 = child.parentNode, sortable = _ref2.sortable;\n                    // if (sortable) {\n                    if (sortable !== null && sortable !== void 0 && (_sortable$sorted2 = sortable.sorted) !== null && _sortable$sorted2 !== void 0 && _sortable$sorted2.length || (_style = child.style) !== null && _style !== void 0 && _style.zIndex) {\n                        if (sortable.dirtyChildren.indexOf(child) === -1) {\n                            sortable.dirtyChildren.push(child);\n                        }\n                        sortable.dirty = true;\n                        sortable.dirtyReason = SortReason.REMOVED;\n                    }\n                    var index = child.parentNode.childNodes.indexOf(child);\n                    if (index > -1) {\n                        child.parentNode.childNodes.splice(index, 1);\n                    }\n                    if (transform) {\n                        this.dirtifyWorld(child, transform);\n                    }\n                    child.parentNode = null;\n                }\n            }\n        },\n        {\n            key: \"getOrigin\",\n            value: function getOrigin(element) {\n                element.getGeometryBounds();\n                return element.transformable.origin;\n            }\n        },\n        {\n            key: \"setOrigin\",\n            value: function setOrigin(element, origin) {\n                var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n                var z = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n                if (typeof origin === \"number\") {\n                    origin = [\n                        origin,\n                        y,\n                        z\n                    ];\n                }\n                var transform = element.transformable;\n                if (origin[0] === transform.origin[0] && origin[1] === transform.origin[1] && origin[2] === transform.origin[2]) {\n                    return;\n                }\n                var originVec = transform.origin;\n                // const delta = vec3.subtract(vec3.create(), origin, originVec);\n                // vec3.add(transform.localPosition, transform.localPosition, delta);\n                // update origin\n                originVec[0] = origin[0];\n                originVec[1] = origin[1];\n                originVec[2] = origin[2] || 0;\n                this.dirtifyLocal(element, transform);\n            }\n        },\n        {\n            key: \"rotate\",\n            value: function rotate(element, degrees) {\n                var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n                var z = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n                if (typeof degrees === \"number\") {\n                    degrees = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(degrees, y, z);\n                }\n                var transform = element.transformable;\n                if (element.parentNode === null || !element.parentNode.transformable) {\n                    this.rotateLocal(element, degrees);\n                } else {\n                    var rotation = $quat$1;\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_21__.fromEuler(rotation, degrees[0], degrees[1], degrees[2]);\n                    var rot = this.getRotation(element);\n                    var parentRot = this.getRotation(element.parentNode);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_21__.copy($rotate_ParentInvertRotation, parentRot);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_21__.invert($rotate_ParentInvertRotation, $rotate_ParentInvertRotation);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_21__.multiply(rotation, $rotate_ParentInvertRotation, rotation);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_21__.multiply(transform.localRotation, rotation, rot);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_21__.normalize(transform.localRotation, transform.localRotation);\n                    this.dirtifyLocal(element, transform);\n                }\n            }\n        },\n        {\n            key: \"rotateLocal\",\n            value: function rotateLocal(element, degrees) {\n                var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n                var z = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n                if (typeof degrees === \"number\") {\n                    degrees = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(degrees, y, z);\n                }\n                var transform = element.transformable;\n                gl_matrix__WEBPACK_IMPORTED_MODULE_21__.fromEuler($rotateLocal, degrees[0], degrees[1], degrees[2]);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_21__.mul(transform.localRotation, transform.localRotation, $rotateLocal);\n                this.dirtifyLocal(element, transform);\n            }\n        },\n        {\n            key: \"setEulerAngles\",\n            value: function setEulerAngles(element, degrees) {\n                var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n                var z = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n                if (typeof degrees === \"number\") {\n                    degrees = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(degrees, y, z);\n                }\n                var transform = element.transformable;\n                if (element.parentNode === null || !element.parentNode.transformable) {\n                    this.setLocalEulerAngles(element, degrees);\n                } else {\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_21__.fromEuler(transform.localRotation, degrees[0], degrees[1], degrees[2]);\n                    var parentRotation = this.getRotation(element.parentNode);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_21__.copy($setEulerAngles_InvParentRot, gl_matrix__WEBPACK_IMPORTED_MODULE_21__.invert($quat$1, parentRotation));\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_21__.mul(transform.localRotation, transform.localRotation, $setEulerAngles_InvParentRot);\n                    this.dirtifyLocal(element, transform);\n                }\n            }\n        },\n        {\n            key: \"setLocalEulerAngles\",\n            value: function setLocalEulerAngles(element, degrees) {\n                var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n                var z = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n                var dirtify = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n                if (typeof degrees === \"number\") {\n                    degrees = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(degrees, y, z);\n                }\n                var transform = element.transformable;\n                gl_matrix__WEBPACK_IMPORTED_MODULE_21__.fromEuler(transform.localRotation, degrees[0], degrees[1], degrees[2]);\n                if (dirtify) {\n                    this.dirtifyLocal(element, transform);\n                }\n            }\n        },\n        {\n            key: \"translateLocal\",\n            value: function translateLocal(element, translation) {\n                var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n                var z = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n                if (typeof translation === \"number\") {\n                    translation = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(translation, y, z);\n                }\n                var transform = element.transformable;\n                if (gl_matrix__WEBPACK_IMPORTED_MODULE_16__.equals(translation, $vec3Zero)) return;\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.transformQuat(translation, translation, transform.localRotation);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.add(transform.localPosition, transform.localPosition, translation);\n                this.dirtifyLocal(element, transform);\n            }\n        },\n        {\n            key: \"setPosition\",\n            value: function setPosition(element, position) {\n                var _position$;\n                var transform = element.transformable;\n                $setPosition_1[0] = position[0];\n                $setPosition_1[1] = position[1];\n                $setPosition_1[2] = (_position$ = position[2]) !== null && _position$ !== void 0 ? _position$ : 0;\n                if (gl_matrix__WEBPACK_IMPORTED_MODULE_16__.equals(this.getPosition(element), $setPosition_1)) {\n                    return;\n                }\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.copy(transform.position, $setPosition_1);\n                if (element.parentNode === null || !element.parentNode.transformable) {\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_16__.copy(transform.localPosition, $setPosition_1);\n                } else {\n                    var parentTransform = element.parentNode.transformable;\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_19__.copy($setPosition_ParentInvertMatrix, parentTransform.worldTransform);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_19__.invert($setPosition_ParentInvertMatrix, $setPosition_ParentInvertMatrix);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_16__.transformMat4(transform.localPosition, $setPosition_1, $setPosition_ParentInvertMatrix);\n                }\n                this.dirtifyLocal(element, transform);\n            }\n        },\n        {\n            key: \"setLocalPosition\",\n            value: function setLocalPosition(element, position) {\n                var _position$2;\n                var dirtify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n                var transform = element.transformable;\n                $setLocalPosition[0] = position[0];\n                $setLocalPosition[1] = position[1];\n                $setLocalPosition[2] = (_position$2 = position[2]) !== null && _position$2 !== void 0 ? _position$2 : 0;\n                if (gl_matrix__WEBPACK_IMPORTED_MODULE_16__.equals(transform.localPosition, $setLocalPosition)) {\n                    return;\n                }\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.copy(transform.localPosition, $setLocalPosition);\n                if (dirtify) {\n                    this.dirtifyLocal(element, transform);\n                }\n            }\n        },\n        {\n            key: \"scaleLocal\",\n            value: function scaleLocal(element, scaling) {\n                var _scaling$;\n                var transform = element.transformable;\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.multiply(transform.localScale, transform.localScale, gl_matrix__WEBPACK_IMPORTED_MODULE_16__.set($vec3$1, scaling[0], scaling[1], (_scaling$ = scaling[2]) !== null && _scaling$ !== void 0 ? _scaling$ : 1));\n                this.dirtifyLocal(element, transform);\n            }\n        },\n        {\n            key: \"setLocalScale\",\n            value: function setLocalScale(element, scaling) {\n                var _scaling$2;\n                var dirtify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n                var transform = element.transformable;\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.set($vec3$1, scaling[0], scaling[1], (_scaling$2 = scaling[2]) !== null && _scaling$2 !== void 0 ? _scaling$2 : transform.localScale[2]);\n                if (gl_matrix__WEBPACK_IMPORTED_MODULE_16__.equals($vec3$1, transform.localScale)) {\n                    return;\n                }\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.copy(transform.localScale, $vec3$1);\n                if (dirtify) {\n                    this.dirtifyLocal(element, transform);\n                }\n            }\n        },\n        {\n            key: \"translate\",\n            value: function translate(element, translation) {\n                var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n                var z = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n                if (typeof translation === \"number\") {\n                    translation = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.set($vec3$1, translation, y, z);\n                }\n                if (gl_matrix__WEBPACK_IMPORTED_MODULE_16__.equals(translation, $vec3Zero)) return;\n                gl_matrix__WEBPACK_IMPORTED_MODULE_16__.add($vec3$1, this.getPosition(element), translation);\n                this.setPosition(element, $vec3$1);\n            }\n        },\n        {\n            key: \"setRotation\",\n            value: function setRotation(element, rotation, y, z, w) {\n                var transform = element.transformable;\n                if (typeof rotation === \"number\") {\n                    rotation = gl_matrix__WEBPACK_IMPORTED_MODULE_21__.fromValues(rotation, y, z, w);\n                }\n                if (element.parentNode === null || !element.parentNode.transformable) {\n                    this.setLocalRotation(element, rotation);\n                } else {\n                    var parentRot = this.getRotation(element.parentNode);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_21__.copy($quat$1, parentRot);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_21__.invert($quat$1, $quat$1);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_21__.multiply(transform.localRotation, $quat$1, rotation);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_21__.normalize(transform.localRotation, transform.localRotation);\n                    this.dirtifyLocal(element, transform);\n                }\n            }\n        },\n        {\n            key: \"setLocalRotation\",\n            value: function setLocalRotation(element, rotation, y, z, w) {\n                var dirtify = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n                if (typeof rotation === \"number\") {\n                    rotation = gl_matrix__WEBPACK_IMPORTED_MODULE_21__.set($quat$1, rotation, y, z, w);\n                }\n                var transform = element.transformable;\n                gl_matrix__WEBPACK_IMPORTED_MODULE_21__.copy(transform.localRotation, rotation);\n                if (dirtify) {\n                    this.dirtifyLocal(element, transform);\n                }\n            }\n        },\n        {\n            key: \"setLocalSkew\",\n            value: function setLocalSkew(element, skew, y) {\n                var dirtify = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n                if (typeof skew === \"number\") {\n                    skew = gl_matrix__WEBPACK_IMPORTED_MODULE_42__.set($vec2, skew, y);\n                }\n                var transform = element.transformable;\n                gl_matrix__WEBPACK_IMPORTED_MODULE_42__.copy(transform.localSkew, skew);\n                if (dirtify) {\n                    this.dirtifyLocal(element, transform);\n                }\n            }\n        },\n        {\n            key: \"dirtifyLocal\",\n            value: function dirtifyLocal(element, transform) {\n                if (isInFragment(element)) return;\n                if (!transform.localDirtyFlag) {\n                    transform.localDirtyFlag = true;\n                    if (!transform.dirtyFlag) {\n                        this.dirtifyWorld(element, transform);\n                    }\n                }\n            }\n        },\n        {\n            key: \"dirtifyWorld\",\n            value: function dirtifyWorld(element, transform) {\n                if (!transform.dirtyFlag) {\n                    this.unfreezeParentToRoot(element);\n                }\n                this.dirtifyWorldInternal(element, transform);\n                this.dirtifyToRoot(element, true);\n            }\n        },\n        {\n            key: \"dirtifyFragment\",\n            value: function dirtifyFragment(element) {\n                var transform = element.transformable;\n                if (transform) {\n                    transform.frozen = false;\n                    transform.dirtyFlag = true;\n                    transform.localDirtyFlag = true;\n                }\n                var renderable = element.renderable;\n                if (renderable) {\n                    renderable.renderBoundsDirty = true;\n                    renderable.boundsDirty = true;\n                    renderable.dirty = true;\n                }\n                var length = element.childNodes.length;\n                for(var i = 0; i < length; i++){\n                    this.dirtifyFragment(element.childNodes[i]);\n                }\n                if (element.nodeName === Shape.FRAGMENT) {\n                    this.pendingEvents.set(element, false);\n                }\n            }\n        },\n        {\n            key: \"triggerPendingEvents\",\n            value: function triggerPendingEvents() {\n                var _this = this;\n                var triggered = new Set();\n                var trigger = function trigger(element, detail) {\n                    if (!element.isConnected || triggered.has(element) || element.nodeName === Shape.FRAGMENT) {\n                        return;\n                    }\n                    _this.boundsChangedEvent.detail = detail;\n                    _this.boundsChangedEvent.target = element;\n                    if (element.isMutationObserved) {\n                        element.dispatchEvent(_this.boundsChangedEvent);\n                    } else {\n                        element.ownerDocument.defaultView.dispatchEvent(_this.boundsChangedEvent, true);\n                    }\n                    triggered.add(element);\n                };\n                this.pendingEvents.forEach(function(affectChildren, element) {\n                    if (element.nodeName === Shape.FRAGMENT) {\n                        return;\n                    }\n                    $triggerPendingEvents_detail.affectChildren = affectChildren;\n                    if (affectChildren) {\n                        element.forEach(function(e) {\n                            trigger(e, $triggerPendingEvents_detail);\n                        });\n                    } else trigger(element, $triggerPendingEvents_detail);\n                });\n                triggered.clear();\n                this.clearPendingEvents();\n            }\n        },\n        {\n            key: \"clearPendingEvents\",\n            value: function clearPendingEvents() {\n                this.pendingEvents.clear();\n            }\n        },\n        {\n            key: \"dirtifyToRoot\",\n            value: function dirtifyToRoot(element) {\n                var affectChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                var p = element;\n                // only need to re-render itself\n                if (p.renderable) {\n                    p.renderable.dirty = true;\n                }\n                while(p){\n                    markRenderableDirty(p);\n                    p = p.parentNode;\n                }\n                if (affectChildren) {\n                    element.forEach(function(e) {\n                        markRenderableDirty(e);\n                    });\n                }\n                this.informDependentDisplayObjects(element);\n                this.pendingEvents.set(element, affectChildren);\n            }\n        },\n        {\n            key: \"updateDisplayObjectDependency\",\n            value: function updateDisplayObjectDependency(name, oldPath, newPath, object) {\n                // clear ref to old clip path\n                if (oldPath && oldPath !== newPath) {\n                    var oldDependencyMap = this.displayObjectDependencyMap.get(oldPath);\n                    if (oldDependencyMap && oldDependencyMap[name]) {\n                        var index = oldDependencyMap[name].indexOf(object);\n                        oldDependencyMap[name].splice(index, 1);\n                    }\n                }\n                if (newPath) {\n                    var newDependencyMap = this.displayObjectDependencyMap.get(newPath);\n                    if (!newDependencyMap) {\n                        this.displayObjectDependencyMap.set(newPath, {});\n                        newDependencyMap = this.displayObjectDependencyMap.get(newPath);\n                    }\n                    if (!newDependencyMap[name]) {\n                        newDependencyMap[name] = [];\n                    }\n                    newDependencyMap[name].push(object);\n                }\n            }\n        },\n        {\n            key: \"informDependentDisplayObjects\",\n            value: function informDependentDisplayObjects(object) {\n                var _this2 = this;\n                var dependencyMap = this.displayObjectDependencyMap.get(object);\n                if (!dependencyMap) {\n                    return;\n                }\n                Object.keys(dependencyMap).forEach(function(name) {\n                    dependencyMap[name].forEach(function(target) {\n                        _this2.dirtifyToRoot(target, true);\n                        target.dispatchEvent(new MutationEvent(ElementEvent.ATTR_MODIFIED, target, _this2, _this2, name, MutationEvent.MODIFICATION, _this2, _this2));\n                        if (target.isCustomElement && target.isConnected) {\n                            if (target.attributeChangedCallback) {\n                                target.attributeChangedCallback(name, _this2, _this2);\n                            }\n                        }\n                    });\n                });\n            }\n        },\n        {\n            key: \"getPosition\",\n            value: function getPosition(element) {\n                var transform = element.transformable;\n                return gl_matrix__WEBPACK_IMPORTED_MODULE_19__.getTranslation(transform.position, this.getWorldTransform(element, transform));\n            }\n        },\n        {\n            key: \"getRotation\",\n            value: function getRotation(element) {\n                var transform = element.transformable;\n                return gl_matrix__WEBPACK_IMPORTED_MODULE_19__.getRotation(transform.rotation, this.getWorldTransform(element, transform));\n            }\n        },\n        {\n            key: \"getScale\",\n            value: function getScale(element) {\n                var transform = element.transformable;\n                return gl_matrix__WEBPACK_IMPORTED_MODULE_19__.getScaling(transform.scaling, this.getWorldTransform(element, transform));\n            }\n        },\n        {\n            key: \"getWorldTransform\",\n            value: function getWorldTransform(element) {\n                var transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : element.transformable;\n                if (!transform.localDirtyFlag && !transform.dirtyFlag) {\n                    return transform.worldTransform;\n                }\n                if (element.parentNode && element.parentNode.transformable) {\n                    this.getWorldTransform(element.parentNode);\n                }\n                this.sync(element, transform);\n                return transform.worldTransform;\n            }\n        },\n        {\n            key: \"getLocalPosition\",\n            value: function getLocalPosition(element) {\n                return element.transformable.localPosition;\n            }\n        },\n        {\n            key: \"getLocalRotation\",\n            value: function getLocalRotation(element) {\n                return element.transformable.localRotation;\n            }\n        },\n        {\n            key: \"getLocalScale\",\n            value: function getLocalScale(element) {\n                return element.transformable.localScale;\n            }\n        },\n        {\n            key: \"getLocalSkew\",\n            value: function getLocalSkew(element) {\n                return element.transformable.localSkew;\n            }\n        },\n        {\n            key: \"calcLocalTransform\",\n            value: function calcLocalTransform(transform) {\n                var hasSkew = transform.localSkew[0] !== 0 || transform.localSkew[1] !== 0;\n                if (hasSkew) {\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromRotationTranslationScaleOrigin(transform.localTransform, transform.localRotation, transform.localPosition, gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(1, 1, 1), transform.origin);\n                    // apply skew2D\n                    if (transform.localSkew[0] !== 0 || transform.localSkew[1] !== 0) {\n                        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.identity($mat4);\n                        $mat4[4] = Math.tan(transform.localSkew[0]);\n                        $mat4[1] = Math.tan(transform.localSkew[1]);\n                        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.multiply(transform.localTransform, transform.localTransform, $mat4);\n                    }\n                    var scaling = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromRotationTranslationScaleOrigin($mat4, gl_matrix__WEBPACK_IMPORTED_MODULE_21__.set($quat$1, 0, 0, 0, 1), gl_matrix__WEBPACK_IMPORTED_MODULE_16__.set($vec3$1, 1, 1, 1), transform.localScale, transform.origin);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_19__.multiply(transform.localTransform, transform.localTransform, scaling);\n                } else {\n                    var localTransform = transform.localTransform, localPosition = transform.localPosition, localRotation = transform.localRotation, localScale = transform.localScale, origin = transform.origin;\n                    var hasPosition = localPosition[0] !== 0 || localPosition[1] !== 0 || localPosition[2] !== 0;\n                    var hasRotation = localRotation[3] !== 1 || localRotation[0] !== 0 || localRotation[1] !== 0 || localRotation[2] !== 0;\n                    var hasScale = localScale[0] !== 1 || localScale[1] !== 1 || localScale[2] !== 1;\n                    var hasOrigin = origin[0] !== 0 || origin[1] !== 0 || origin[2] !== 0;\n                    if (!hasRotation && !hasScale && !hasOrigin) {\n                        if (hasPosition) {\n                            gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromTranslation(localTransform, localPosition);\n                        } else {\n                            gl_matrix__WEBPACK_IMPORTED_MODULE_19__.identity(localTransform);\n                        }\n                    } else {\n                        // @see https://github.com/mattdesl/css-mat4/blob/master/index.js\n                        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.fromRotationTranslationScaleOrigin(localTransform, localRotation, localPosition, localScale, origin);\n                    }\n                }\n            }\n        },\n        {\n            key: \"getLocalTransform\",\n            value: function getLocalTransform(element) {\n                var transform = element.transformable;\n                if (transform.localDirtyFlag) {\n                    this.calcLocalTransform(transform);\n                    transform.localDirtyFlag = false;\n                }\n                return transform.localTransform;\n            }\n        },\n        {\n            key: \"setLocalTransform\",\n            value: function setLocalTransform(element, transform) {\n                var t = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.getTranslation($setLocalTransform_1, transform);\n                var r = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.getRotation($setLocalTransform_2, transform);\n                var s = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.getScaling($setLocalTransform_3, transform);\n                this.setLocalScale(element, s, false);\n                this.setLocalPosition(element, t, false);\n                this.setLocalRotation(element, r, undefined, undefined, undefined, false);\n                this.dirtifyLocal(element, element.transformable);\n            }\n        },\n        {\n            key: \"resetLocalTransform\",\n            value: function resetLocalTransform(element) {\n                this.setLocalScale(element, $vec3One, false);\n                this.setLocalPosition(element, $vec3Zero, false);\n                this.setLocalEulerAngles(element, $vec3Zero, undefined, undefined, false);\n                this.setLocalSkew(element, $vec2Zero, undefined, false);\n                this.dirtifyLocal(element, element.transformable);\n            }\n        },\n        {\n            key: \"getTransformedGeometryBounds\",\n            value: function getTransformedGeometryBounds(element) {\n                var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                var existedAABB = arguments.length > 2 ? arguments[2] : undefined;\n                var bounds = this.getGeometryBounds(element, render);\n                if (!AABB.isEmpty(bounds)) {\n                    var aabb = existedAABB || new AABB();\n                    aabb.setFromTransformedAABB(bounds, this.getWorldTransform(element));\n                    return aabb;\n                }\n                return null;\n            }\n        },\n        {\n            key: \"getGeometryBounds\",\n            value: function getGeometryBounds(element) {\n                var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                var _ref3 = element, geometry = _ref3.geometry;\n                if (geometry.dirty) {\n                    runtime.styleValueRegistry.updateGeometry(element);\n                }\n                var bounds = render ? geometry.renderBounds : geometry.contentBounds || null;\n                // return (bounds && new AABB(bounds.center, bounds.halfExtents)) || new AABB();\n                return bounds || new AABB();\n            }\n        },\n        {\n            key: \"getBounds\",\n            value: function getBounds(element) {\n                var _this3 = this;\n                var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                var _ref4 = element, renderable = _ref4.renderable;\n                if (!renderable.boundsDirty && !render && renderable.bounds) {\n                    return renderable.bounds;\n                }\n                if (!renderable.renderBoundsDirty && render && renderable.renderBounds) {\n                    return renderable.renderBounds;\n                }\n                // reuse existed if possible\n                var existedAABB = render ? renderable.renderBounds : renderable.bounds;\n                // reset with geometry's aabb\n                var aabb = this.getTransformedGeometryBounds(element, render, existedAABB);\n                // merge children's aabbs\n                var children = element.childNodes;\n                children.forEach(function(child) {\n                    var childBounds = _this3.getBounds(child, render);\n                    if (childBounds) {\n                        if (!aabb) {\n                            aabb = existedAABB || new AABB();\n                            aabb.update(childBounds.center, childBounds.halfExtents);\n                        } else {\n                            aabb.add(childBounds);\n                        }\n                    }\n                });\n                if (!aabb) {\n                    aabb = new AABB();\n                }\n                if (render) {\n                    // FIXME: account for clip path\n                    var clipped = findClosestClipPathTarget(element);\n                    if (clipped) {\n                        // use bounds under world space\n                        var clipPathBounds = clipped.parsedStyle.clipPath.getBounds(render);\n                        if (!aabb) {\n                            aabb.update(clipPathBounds.center, clipPathBounds.halfExtents);\n                        } else if (clipPathBounds) {\n                            aabb = clipPathBounds.intersection(aabb);\n                        }\n                    }\n                }\n                if (render) {\n                    renderable.renderBounds = aabb;\n                    renderable.renderBoundsDirty = false;\n                } else {\n                    renderable.bounds = aabb;\n                    renderable.boundsDirty = false;\n                }\n                return aabb;\n            }\n        },\n        {\n            key: \"getLocalBounds\",\n            value: function getLocalBounds(element) {\n                if (element.parentNode) {\n                    var parentInvert = $mat4Identity;\n                    if (element.parentNode.transformable) {\n                        parentInvert = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.invert($mat4, this.getWorldTransform(element.parentNode));\n                    }\n                    var bounds = this.getBounds(element);\n                    if (!AABB.isEmpty(bounds)) {\n                        var localBounds = new AABB();\n                        localBounds.setFromTransformedAABB(bounds, parentInvert);\n                        return localBounds;\n                    }\n                }\n                return this.getBounds(element);\n            }\n        },\n        {\n            key: \"getBoundingClientRect\",\n            value: function getBoundingClientRect(element) {\n                var _element$ownerDocumen;\n                var aabb;\n                var bounds = this.getGeometryBounds(element);\n                if (!AABB.isEmpty(bounds)) {\n                    aabb = new AABB();\n                    // apply transformation to aabb\n                    aabb.setFromTransformedAABB(bounds, this.getWorldTransform(element));\n                }\n                // calc context's offset\n                var bbox = (_element$ownerDocumen = element.ownerDocument) === null || _element$ownerDocumen === void 0 || (_element$ownerDocumen = _element$ownerDocumen.defaultView) === null || _element$ownerDocumen === void 0 ? void 0 : _element$ownerDocumen.getContextService().getBoundingClientRect();\n                if (aabb) {\n                    var _aabb$getMin = aabb.getMin(), _aabb$getMin2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_aabb$getMin, 2), left = _aabb$getMin2[0], top = _aabb$getMin2[1];\n                    var _aabb$getMax = aabb.getMax(), _aabb$getMax2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_aabb$getMax, 2), right = _aabb$getMax2[0], bottom = _aabb$getMax2[1];\n                    return new Rectangle(left + ((bbox === null || bbox === void 0 ? void 0 : bbox.left) || 0), top + ((bbox === null || bbox === void 0 ? void 0 : bbox.top) || 0), right - left, bottom - top);\n                }\n                return new Rectangle((bbox === null || bbox === void 0 ? void 0 : bbox.left) || 0, (bbox === null || bbox === void 0 ? void 0 : bbox.top) || 0, 0, 0);\n            }\n        },\n        {\n            key: \"dirtifyWorldInternal\",\n            value: function dirtifyWorldInternal(element, transform) {\n                var _this4 = this;\n                if (!transform.dirtyFlag) {\n                    transform.dirtyFlag = true;\n                    transform.frozen = false;\n                    element.childNodes.forEach(function(child) {\n                        var childTransform = child.transformable;\n                        if (!childTransform.dirtyFlag) {\n                            _this4.dirtifyWorldInternal(child, childTransform);\n                        }\n                    });\n                    var _ref5 = element, renderable = _ref5.renderable;\n                    if (renderable) {\n                        renderable.renderBoundsDirty = true;\n                        renderable.boundsDirty = true;\n                        renderable.dirty = true;\n                    }\n                }\n            }\n        },\n        {\n            key: \"syncHierarchy\",\n            value: function syncHierarchy(element) {\n                var transform = element.transformable;\n                if (transform.frozen) {\n                    return;\n                }\n                transform.frozen = true;\n                if (transform.localDirtyFlag || transform.dirtyFlag) {\n                    this.sync(element, transform);\n                }\n                var children = element.childNodes;\n                for(var i = 0; i < children.length; i++){\n                    this.syncHierarchy(children[i]);\n                }\n            }\n        },\n        {\n            key: \"sync\",\n            value: function sync(element, transform) {\n                if (transform.localDirtyFlag) {\n                    this.calcLocalTransform(transform);\n                    transform.localDirtyFlag = false;\n                }\n                if (transform.dirtyFlag) {\n                    var parent = element.parentNode;\n                    var parentTransform = parent && parent.transformable;\n                    if (parent === null || !parentTransform) {\n                        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.copy(transform.worldTransform, transform.localTransform);\n                    } else {\n                        // TODO: should we support scale compensation?\n                        // @see https://github.com/playcanvas/engine/issues/1077#issuecomment-359765557\n                        gl_matrix__WEBPACK_IMPORTED_MODULE_19__.multiply(transform.worldTransform, parentTransform.worldTransform, transform.localTransform);\n                    }\n                    transform.dirtyFlag = false;\n                }\n            }\n        },\n        {\n            key: \"unfreezeParentToRoot\",\n            value: function unfreezeParentToRoot(child) {\n                var p = child.parentNode;\n                while(p){\n                    var transform = p.transformable;\n                    if (transform) {\n                        transform.frozen = false;\n                    }\n                    p = p.parentNode;\n                }\n            }\n        }\n    ]);\n}();\nvar TEXT_METRICS = {\n    MetricsString: \"|\\xc9q\\xc5\",\n    BaselineSymbol: \"M\",\n    BaselineMultiplier: 1.4,\n    HeightMultiplier: 2,\n    Newlines: [\n        0x000a,\n        // line feed\n        0x000d // carriage return\n    ],\n    BreakingSpaces: [\n        0x0009,\n        // character tabulation\n        0x0020,\n        // space\n        0x2000,\n        // en quad\n        0x2001,\n        // em quad\n        0x2002,\n        // en space\n        0x2003,\n        // em space\n        0x2004,\n        // three-per-em space\n        0x2005,\n        // four-per-em space\n        0x2006,\n        // six-per-em space\n        0x2008,\n        // punctuation space\n        0x2009,\n        // thin space\n        0x200a,\n        // hair space\n        0x205f,\n        // medium mathematical space\n        0x3000 // ideographic space\n    ]\n};\nvar LATIN_REGEX = /[a-zA-Z0-9\\u00C0-\\u00D6\\u00D8-\\u00f6\\u00f8-\\u00ff!\"#$%&'()*+,-./:;]/;\n// Line breaking rules in CJK (Kinsoku Shori)\n// Refer from https://en.wikipedia.org/wiki/Line_breaking_rules_in_East_Asian_languages\nvar regexCannotStartZhCn = /[!%),.:;?\\]}¢°·'\"\"†‡›℃∶、。〃〆〕〗〞﹚﹜！＂％＇），．：；？！］｝～]/;\nvar regexCannotEndZhCn = /[$(£¥·'\"〈《「『【〔〖〝﹙﹛＄（．［｛￡￥]/;\nvar regexCannotStartZhTw = /[!),.:;?\\]}¢·–—'\"•\"、。〆〞〕〉》」︰︱︲︳﹐﹑﹒﹓﹔﹕﹖﹘﹚﹜！），．：；？︶︸︺︼︾﹀﹂﹗］｜｝､]/;\nvar regexCannotEndZhTw = /[([{£¥'\"‵〈《「『〔〝︴﹙﹛（｛︵︷︹︻︽︿﹁﹃﹏]/;\nvar regexCannotStartJaJp = /[)\\]｝〕〉》」』】〙〗〟'\"｠»ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻‐゠–〜?!‼⁇⁈⁉・、:;,。.]/;\nvar regexCannotEndJaJp = /[([｛〔〈《「『【〘〖〝'\"｟«—...‥〳〴〵]/;\nvar regexCannotStartKoKr = /[!%),.:;?\\]}¢°'\"†‡℃〆〈《「『〕！％），．：；？］｝]/;\nvar regexCannotEndKoKr = /[$([{£¥'\"々〇〉》」〔＄（［｛｠￥￦#]/;\nvar regexCannotStart = new RegExp(\"\".concat(regexCannotStartZhCn.source, \"|\").concat(regexCannotStartZhTw.source, \"|\").concat(regexCannotStartJaJp.source, \"|\").concat(regexCannotStartKoKr.source));\nvar regexCannotEnd = new RegExp(\"\".concat(regexCannotEndZhCn.source, \"|\").concat(regexCannotEndZhTw.source, \"|\").concat(regexCannotEndJaJp.source, \"|\").concat(regexCannotEndKoKr.source));\n/**\n * Borrow from pixi/packages/text/src/TextMetrics.ts\n */ var TextService = /*#__PURE__*/ function() {\n    function TextService(runtime) {\n        var _this = this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, TextService);\n        /**\n     * font metrics cache\n     */ this.fontMetricsCache = {};\n        this.shouldBreakByKinsokuShorui = function(_char, nextChar) {\n            if (_this.isBreakingSpace(nextChar)) return false;\n            if (_char) {\n                // Line breaking rules in CJK (Kinsoku Shori)\n                if (regexCannotEnd.exec(nextChar) || regexCannotStart.exec(_char)) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        this.trimByKinsokuShorui = function(prev) {\n            var next = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(prev);\n            var prevLine = next[next.length - 2];\n            if (!prevLine) {\n                return prev;\n            }\n            var lastChar = prevLine[prevLine.length - 1];\n            next[next.length - 2] = prevLine.slice(0, -1);\n            next[next.length - 1] = lastChar + next[next.length - 1];\n            return next;\n        };\n        this.runtime = runtime;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(TextService, [\n        {\n            key: \"measureFont\",\n            value: /**\n     * Calculates the ascent, descent and fontSize of a given font-style.\n     */ function measureFont(font, offscreenCanvas) {\n                // as this method is used for preparing assets, don't recalculate things if we don't need to\n                if (this.fontMetricsCache[font]) {\n                    return this.fontMetricsCache[font];\n                }\n                var properties = {\n                    ascent: 0,\n                    descent: 0,\n                    fontSize: 0\n                };\n                var canvas = this.runtime.offscreenCanvasCreator.getOrCreateCanvas(offscreenCanvas);\n                var context = this.runtime.offscreenCanvasCreator.getOrCreateContext(offscreenCanvas, {\n                    willReadFrequently: true\n                });\n                context.font = font;\n                var metricsString = TEXT_METRICS.MetricsString + TEXT_METRICS.BaselineSymbol;\n                var width = Math.ceil(context.measureText(metricsString).width);\n                var baseline = Math.ceil(context.measureText(TEXT_METRICS.BaselineSymbol).width);\n                var height = TEXT_METRICS.HeightMultiplier * baseline;\n                baseline = baseline * TEXT_METRICS.BaselineMultiplier | 0;\n                // @ts-ignore\n                canvas.width = width;\n                // @ts-ignore\n                canvas.height = height;\n                context.fillStyle = \"#f00\";\n                context.fillRect(0, 0, width, height);\n                context.font = font;\n                context.textBaseline = \"alphabetic\";\n                context.fillStyle = \"#000\";\n                context.fillText(metricsString, 0, baseline);\n                var imagedata = context.getImageData(0, 0, width || 1, height || 1).data;\n                var pixels = imagedata.length;\n                var line = width * 4;\n                var i = 0;\n                var idx = 0;\n                var stop = false;\n                // ascent. scan from top to bottom until we find a non red pixel\n                for(i = 0; i < baseline; ++i){\n                    for(var j = 0; j < line; j += 4){\n                        if (imagedata[idx + j] !== 255) {\n                            stop = true;\n                            break;\n                        }\n                    }\n                    if (!stop) {\n                        idx += line;\n                    } else {\n                        break;\n                    }\n                }\n                properties.ascent = baseline - i;\n                idx = pixels - line;\n                stop = false;\n                // descent. scan from bottom to top until we find a non red pixel\n                for(i = height; i > baseline; --i){\n                    for(var _j = 0; _j < line; _j += 4){\n                        if (imagedata[idx + _j] !== 255) {\n                            stop = true;\n                            break;\n                        }\n                    }\n                    if (!stop) {\n                        idx -= line;\n                    } else {\n                        break;\n                    }\n                }\n                properties.descent = i - baseline;\n                properties.fontSize = properties.ascent + properties.descent;\n                this.fontMetricsCache[font] = properties;\n                return properties;\n            }\n        },\n        {\n            key: \"measureText\",\n            value: function measureText(text, parsedStyle, offscreenCanvas) {\n                var _parsedStyle$fontSize = parsedStyle.fontSize, fontSize = _parsedStyle$fontSize === void 0 ? 16 : _parsedStyle$fontSize, _parsedStyle$wordWrap = parsedStyle.wordWrap, wordWrap = _parsedStyle$wordWrap === void 0 ? false : _parsedStyle$wordWrap, strokeHeight = parsedStyle.lineHeight, _parsedStyle$lineWidt = parsedStyle.lineWidth, lineWidth = _parsedStyle$lineWidt === void 0 ? 1 : _parsedStyle$lineWidt, _parsedStyle$textBase = parsedStyle.textBaseline, textBaseline = _parsedStyle$textBase === void 0 ? \"alphabetic\" : _parsedStyle$textBase, _parsedStyle$textAlig = parsedStyle.textAlign, textAlign = _parsedStyle$textAlig === void 0 ? \"start\" : _parsedStyle$textAlig, _parsedStyle$letterSp = parsedStyle.letterSpacing, letterSpacing = _parsedStyle$letterSp === void 0 ? 0 : _parsedStyle$letterSp, textPath = parsedStyle.textPath;\n                parsedStyle.textPathSide;\n                parsedStyle.textPathStartOffset;\n                var _parsedStyle$leading = parsedStyle.leading, leading = _parsedStyle$leading === void 0 ? 0 : _parsedStyle$leading;\n                var font = toFontString(parsedStyle);\n                var fontProperties = this.measureFont(font, offscreenCanvas);\n                // fallback in case UA disallow canvas data extraction\n                if (fontProperties.fontSize === 0) {\n                    fontProperties.fontSize = fontSize;\n                    fontProperties.ascent = fontSize;\n                }\n                var context = this.runtime.offscreenCanvasCreator.getOrCreateContext(offscreenCanvas);\n                context.font = font;\n                // no overflowing by default\n                parsedStyle.isOverflowing = false;\n                var outputText = wordWrap ? this.wordWrap(text, parsedStyle, offscreenCanvas) : text;\n                var lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n                var lineWidths = new Array(lines.length);\n                var maxLineWidth = 0;\n                // account for textPath\n                if (textPath) {\n                    textPath.getTotalLength();\n                    // const startingPoint = textPath.getPoint(0);\n                    for(var i = 0; i < lines.length; i++){\n                        context.measureText(lines[i]).width + (lines[i].length - 1) * letterSpacing;\n                    // for (\n                    //   let i = reverse ? lines[0].length - 1 : 0;\n                    //   reverse ? i >= 0 : i < lines[0].length;\n                    //   reverse ? i-- : i++\n                    // ) {\n                    //   graphemeInfo = lineBounds[i];\n                    //   if (positionInPath > totalPathLength) {\n                    //     positionInPath %= totalPathLength;\n                    //   } else if (positionInPath < 0) {\n                    //     positionInPath += totalPathLength;\n                    //   }\n                    //   // it would probably much faster to send all the grapheme position for a line\n                    //   // and calculate path position/angle at once.\n                    //   this.setGraphemeOnPath(\n                    //     positionInPath,\n                    //     graphemeInfo,\n                    //     startingPoint\n                    //   );\n                    //   positionInPath += graphemeInfo.kernedWidth;\n                    // }\n                    }\n                } else {\n                    for(var _i = 0; _i < lines.length; _i++){\n                        // char width + letterSpacing\n                        var _lineWidth = context.measureText(lines[_i]).width + (lines[_i].length - 1) * letterSpacing;\n                        lineWidths[_i] = _lineWidth;\n                        maxLineWidth = Math.max(maxLineWidth, _lineWidth);\n                    }\n                    var _width = maxLineWidth + lineWidth;\n                    // if (dropShadow) {\n                    //   width += dropShadowDistance;\n                    // }\n                    var lineHeight = strokeHeight || fontProperties.fontSize + lineWidth;\n                    var height = Math.max(lineHeight, fontProperties.fontSize + lineWidth) + (lines.length - 1) * (lineHeight + leading);\n                    // if (dropShadow) {\n                    //   height += dropShadowDistance;\n                    // }\n                    lineHeight += leading;\n                    // handle vertical text baseline\n                    var offsetY = 0;\n                    if (textBaseline === \"middle\") {\n                        offsetY = -height / 2;\n                    } else if (textBaseline === \"bottom\" || textBaseline === \"alphabetic\" || textBaseline === \"ideographic\") {\n                        offsetY = -height;\n                    } else if (textBaseline === \"top\" || textBaseline === \"hanging\") {\n                        offsetY = 0;\n                    }\n                    return {\n                        font: font,\n                        width: _width,\n                        height: height,\n                        lines: lines,\n                        lineWidths: lineWidths,\n                        lineHeight: lineHeight,\n                        maxLineWidth: maxLineWidth,\n                        fontProperties: fontProperties,\n                        lineMetrics: lineWidths.map(function(width, i) {\n                            var offsetX = 0;\n                            // handle horizontal text align\n                            if (textAlign === \"center\" || textAlign === \"middle\") {\n                                offsetX -= width / 2;\n                            } else if (textAlign === \"right\" || textAlign === \"end\") {\n                                offsetX -= width;\n                            }\n                            return new Rectangle(offsetX - lineWidth / 2, offsetY + i * lineHeight, width + lineWidth, lineHeight);\n                        })\n                    };\n                }\n            }\n        },\n        {\n            key: \"wordWrap\",\n            value: function wordWrap(text, parsedStyle, offscreenCanvas) {\n                var _this2 = this;\n                var self1 = this;\n                var _parsedStyle$wordWrap2 = parsedStyle.wordWrapWidth, wordWrapWidth = _parsedStyle$wordWrap2 === void 0 ? 0 : _parsedStyle$wordWrap2, _parsedStyle$letterSp2 = parsedStyle.letterSpacing, letterSpacing = _parsedStyle$letterSp2 === void 0 ? 0 : _parsedStyle$letterSp2, _parsedStyle$maxLines = parsedStyle.maxLines, maxLines = _parsedStyle$maxLines === void 0 ? Infinity : _parsedStyle$maxLines, textOverflow = parsedStyle.textOverflow;\n                var context = this.runtime.offscreenCanvasCreator.getOrCreateContext(offscreenCanvas);\n                var maxWidth = wordWrapWidth + letterSpacing;\n                var ellipsis = \"\";\n                if (textOverflow === \"ellipsis\") {\n                    ellipsis = \"...\";\n                } else if (textOverflow && textOverflow !== \"clip\") {\n                    ellipsis = textOverflow;\n                }\n                var chars = Array.from(text);\n                var lines = [];\n                var currentLineIndex = 0;\n                var currentLineWidth = 0;\n                var prevLineLastCharIndex = 0;\n                var cache = {};\n                var calcWidth = function calcWidth(txt) {\n                    return _this2.getFromCache(txt, letterSpacing, cache, context);\n                };\n                var ellipsisWidth = calcWidth(ellipsis);\n                /**\n       * Find text fragments that will take up as much of the given line width as possible when rendered.\n       *\n       * @see https://github.com/antvis/G/issues/1833\n       *\n       * @param lineTxt - Current line of text\n       * @param txtLastCharIndex - The index of the last character of the current line in the entire text\n       * @param txtStartCharIndex - The index of the start character of the current line in the entire text\n       */ function findCharIndexClosestWidthThreshold(lineTxt, txtLastCharIndex, txtStartCharIndex, widthThreshold) {\n                    while(calcWidth(lineTxt) < widthThreshold && txtLastCharIndex < chars.length - 1){\n                        if (self1.isNewline(chars[txtLastCharIndex + 1])) {\n                            break;\n                        }\n                        txtLastCharIndex += 1;\n                        lineTxt += chars[txtLastCharIndex];\n                    }\n                    while(calcWidth(lineTxt) > widthThreshold && txtLastCharIndex > txtStartCharIndex){\n                        txtLastCharIndex -= 1;\n                        lineTxt = lineTxt.slice(0, -1);\n                    }\n                    return {\n                        lineTxt: lineTxt,\n                        txtLastCharIndex: txtLastCharIndex\n                    };\n                }\n                function appendEllipsis(lineIndex, textCharIndex) {\n                    // If there is not enough space to display the string itself, it is clipped.\n                    // @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow#values\n                    if (ellipsisWidth <= 0 || ellipsisWidth > maxWidth) {\n                        return;\n                    }\n                    if (!lines[lineIndex]) {\n                        lines[lineIndex] = ellipsis;\n                        return;\n                    }\n                    var result = findCharIndexClosestWidthThreshold(lines[lineIndex], textCharIndex, prevLineLastCharIndex + 1, maxWidth - ellipsisWidth);\n                    lines[lineIndex] = result.lineTxt + ellipsis;\n                }\n                for(var i = 0; i < chars.length; i++){\n                    var _char2 = chars[i];\n                    var prevChar = chars[i - 1];\n                    var nextChar = chars[i + 1];\n                    var charWidth = calcWidth(_char2);\n                    if (this.isNewline(_char2)) {\n                        // exceed maxLines, break immediately\n                        if (currentLineIndex + 1 >= maxLines) {\n                            parsedStyle.isOverflowing = true;\n                            if (i < chars.length - 1) {\n                                appendEllipsis(currentLineIndex, i - 1);\n                            }\n                            break;\n                        }\n                        prevLineLastCharIndex = i - 1;\n                        currentLineIndex += 1;\n                        currentLineWidth = 0;\n                        lines[currentLineIndex] = \"\";\n                        continue;\n                    }\n                    if (currentLineWidth > 0 && currentLineWidth + charWidth > maxWidth) {\n                        var result = findCharIndexClosestWidthThreshold(lines[currentLineIndex], i - 1, prevLineLastCharIndex + 1, maxWidth);\n                        if (result.txtLastCharIndex !== i - 1) {\n                            lines[currentLineIndex] = result.lineTxt;\n                            if (result.txtLastCharIndex === chars.length - 1) {\n                                break;\n                            }\n                            i = result.txtLastCharIndex + 1;\n                            _char2 = chars[i];\n                            prevChar = chars[i - 1];\n                            nextChar = chars[i + 1];\n                            charWidth = calcWidth(_char2);\n                        }\n                        if (currentLineIndex + 1 >= maxLines) {\n                            parsedStyle.isOverflowing = true;\n                            appendEllipsis(currentLineIndex, i - 1);\n                            break;\n                        }\n                        prevLineLastCharIndex = i - 1;\n                        currentLineIndex += 1;\n                        currentLineWidth = 0;\n                        lines[currentLineIndex] = \"\";\n                        if (this.isBreakingSpace(_char2)) {\n                            continue;\n                        }\n                        if (!this.canBreakInLastChar(_char2)) {\n                            lines = this.trimToBreakable(lines);\n                            currentLineWidth = this.sumTextWidthByCache(lines[currentLineIndex] || \"\", calcWidth);\n                        }\n                        if (this.shouldBreakByKinsokuShorui(_char2, nextChar)) {\n                            lines = this.trimByKinsokuShorui(lines);\n                            currentLineWidth += calcWidth(prevChar || \"\");\n                        }\n                    }\n                    currentLineWidth += charWidth;\n                    lines[currentLineIndex] = (lines[currentLineIndex] || \"\") + _char2;\n                }\n                return lines.join(\"\\n\");\n            }\n        },\n        {\n            key: \"isBreakingSpace\",\n            value: function isBreakingSpace(_char3) {\n                if (typeof _char3 !== \"string\") {\n                    return false;\n                }\n                return TEXT_METRICS.BreakingSpaces.indexOf(_char3.charCodeAt(0)) >= 0;\n            }\n        },\n        {\n            key: \"isNewline\",\n            value: function isNewline(_char4) {\n                if (typeof _char4 !== \"string\") {\n                    return false;\n                }\n                return TEXT_METRICS.Newlines.indexOf(_char4.charCodeAt(0)) >= 0;\n            }\n        },\n        {\n            key: \"trimToBreakable\",\n            value: function trimToBreakable(prev) {\n                var next = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(prev);\n                var prevLine = next[next.length - 2];\n                var index = this.findBreakableIndex(prevLine);\n                if (index === -1 || !prevLine) return next;\n                var trimmedChar = prevLine.slice(index, index + 1);\n                var isTrimmedWithSpace = this.isBreakingSpace(trimmedChar);\n                var trimFrom = index + 1;\n                var trimTo = index + (isTrimmedWithSpace ? 0 : 1);\n                next[next.length - 1] += prevLine.slice(trimFrom, prevLine.length);\n                next[next.length - 2] = prevLine.slice(0, trimTo);\n                return next;\n            }\n        },\n        {\n            key: \"canBreakInLastChar\",\n            value: function canBreakInLastChar(_char5) {\n                if (_char5 && LATIN_REGEX.test(_char5)) return false;\n                return true;\n            }\n        },\n        {\n            key: \"sumTextWidthByCache\",\n            value: function sumTextWidthByCache(text, calcWidthWithCache) {\n                return text.split(\"\").reduce(function(sum, c) {\n                    return sum + calcWidthWithCache(c);\n                }, 0);\n            }\n        },\n        {\n            key: \"findBreakableIndex\",\n            value: function findBreakableIndex(line) {\n                for(var i = line.length - 1; i >= 0; i--){\n                    if (!LATIN_REGEX.test(line[i])) return i;\n                }\n                return -1;\n            }\n        },\n        {\n            key: \"getFromCache\",\n            value: function getFromCache(key, letterSpacing, cache, context) {\n                var width = cache[key];\n                if (typeof width !== \"number\") {\n                    var spacing = key.length * letterSpacing;\n                    var metrics = context.measureText(key);\n                    width = metrics.width + spacing;\n                    cache[key] = width;\n                }\n                return width;\n            }\n        }\n    ]);\n}();\nvar runtime = {};\n/**\n * Replace with IoC container\n */ var geometryUpdaterFactory = function(_ref) {\n    var rectUpdater = new RectUpdater();\n    var polylineUpdater = new PolylineUpdater();\n    return _ref = {}, _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_ref, Shape.FRAGMENT, null), Shape.CIRCLE, new CircleUpdater()), Shape.ELLIPSE, new EllipseUpdater()), Shape.RECT, rectUpdater), Shape.IMAGE, rectUpdater), Shape.GROUP, new GroupUpdater()), Shape.LINE, new LineUpdater()), Shape.TEXT, new TextUpdater(runtime)), Shape.POLYLINE, polylineUpdater), Shape.POLYGON, polylineUpdater), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_ref, Shape.PATH, new PathUpdater()), Shape.HTML, new HTMLUpdater()), Shape.MESH, null);\n}();\nvar CSSPropertySyntaxFactory = function(_ref2) {\n    var color = new CSSPropertyColor();\n    var length = new CSSPropertyLengthOrPercentage();\n    return _ref2 = {}, _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_ref2, PropertySyntax.PERCENTAGE, null), PropertySyntax.NUMBER, new CSSPropertyNumber()), PropertySyntax.ANGLE, new CSSPropertyAngle()), PropertySyntax.DEFINED_PATH, new CSSPropertyClipPath()), PropertySyntax.PAINT, color), PropertySyntax.COLOR, color), PropertySyntax.FILTER, new CSSPropertyFilter()), PropertySyntax.LENGTH, length), PropertySyntax.LENGTH_PERCENTAGE, length), PropertySyntax.LENGTH_PERCENTAGE_12, new CSSPropertyLengthOrPercentage12()), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_ref2, PropertySyntax.LENGTH_PERCENTAGE_14, new CSSPropertyLengthOrPercentage14()), PropertySyntax.COORDINATE, new CSSPropertyLengthOrPercentage()), PropertySyntax.OFFSET_DISTANCE, new CSSPropertyOffsetDistance()), PropertySyntax.OPACITY_VALUE, new CSSPropertyOpacity()), PropertySyntax.PATH, new CSSPropertyPath()), PropertySyntax.LIST_OF_POINTS, new CSSPropertyPoints()), PropertySyntax.SHADOW_BLUR, new CSSPropertyShadowBlur()), PropertySyntax.TEXT, new CSSPropertyText()), PropertySyntax.TEXT_TRANSFORM, new CSSPropertyTextTransform()), PropertySyntax.TRANSFORM, new CSSPropertyTransform()), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_ref2, PropertySyntax.TRANSFORM_ORIGIN, new CSSPropertyTransformOrigin()), PropertySyntax.Z_INDEX, new CSSPropertyZIndex()), PropertySyntax.MARKER, new CSSPropertyMarker());\n}();\nvar getGlobalThis = function getGlobalThis() {\n    if (typeof globalThis !== \"undefined\") return globalThis;\n    if (typeof self !== \"undefined\") return self;\n    if (false) {}\n    // @ts-ignore\n    if (typeof global !== \"undefined\") return global;\n    return {};\n// [!] Error: The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten\n// @see https://rollupjs.org/troubleshooting/#error-this-is-undefined\n// if (typeof this !== 'undefined') return this;\n};\n/**\n * Camera\n * `g-camera-api` will provide an advanced implementation\n */ runtime.CameraContribution = Camera;\n/**\n * `g-web-animations-api` will provide an AnimationTimeline\n */ runtime.AnimationTimeline = null;\nruntime.EasingFunction = null;\nruntime.offscreenCanvasCreator = new OffscreenCanvasCreator();\nruntime.sceneGraphSelector = new DefaultSceneGraphSelector();\nruntime.sceneGraphService = new DefaultSceneGraphService(runtime);\nruntime.textService = new TextService(runtime);\nruntime.geometryUpdaterFactory = geometryUpdaterFactory;\nruntime.CSSPropertySyntaxFactory = CSSPropertySyntaxFactory;\nruntime.styleValueRegistry = new DefaultStyleValueRegistry(runtime);\nruntime.layoutRegistry = null;\nruntime.globalThis = getGlobalThis();\nruntime.enableStyleSyntax = true;\nruntime.enableSizeAttenuation = false;\nvar entityCounter = 0;\nfunction resetEntityCounter() {\n    entityCounter = 0;\n}\nvar insertedEvent = new MutationEvent(ElementEvent.INSERTED, null, \"\", \"\", \"\", 0, \"\", \"\");\nvar removedEvent = new MutationEvent(ElementEvent.REMOVED, null, \"\", \"\", \"\", 0, \"\", \"\");\nvar destroyEvent = new CustomEvent(ElementEvent.DESTROY);\n/**\n * Has following capabilities:\n * * Node insert/remove, eg. appendChild, removeChild, remove...\n * * Query eg. querySelector getElementById...\n * * Animation\n */ var Element = /*#__PURE__*/ function(_Node) {\n    function Element() {\n        var _this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Element);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, Element, [].concat(args));\n        /**\n     * Unique id.\n     */ _this.entity = entityCounter++;\n        _this.renderable = {\n            bounds: undefined,\n            boundsDirty: true,\n            renderBounds: undefined,\n            renderBoundsDirty: true,\n            dirtyRenderBounds: undefined,\n            dirty: false\n        };\n        _this.cullable = {\n            strategy: Strategy.Standard,\n            visibilityPlaneMask: -1,\n            visible: true,\n            enable: true\n        };\n        _this.transformable = {\n            dirtyFlag: false,\n            localDirtyFlag: false,\n            frozen: false,\n            localPosition: [\n                0,\n                0,\n                0\n            ],\n            localRotation: [\n                0,\n                0,\n                0,\n                1\n            ],\n            localScale: [\n                1,\n                1,\n                1\n            ],\n            localTransform: [\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1\n            ],\n            localSkew: [\n                0,\n                0\n            ],\n            position: [\n                0,\n                0,\n                0\n            ],\n            rotation: [\n                0,\n                0,\n                0,\n                1\n            ],\n            scaling: [\n                1,\n                1,\n                1\n            ],\n            worldTransform: [\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                1\n            ],\n            origin: [\n                0,\n                0,\n                0\n            ]\n        };\n        _this.sortable = {\n            dirty: false,\n            sorted: undefined,\n            renderOrder: 0,\n            dirtyChildren: [],\n            dirtyReason: undefined\n        };\n        _this.geometry = {\n            contentBounds: undefined,\n            renderBounds: undefined,\n            dirty: true\n        };\n        _this.rBushNode = {\n            aabb: undefined\n        };\n        /**\n     * https://developer.mozilla.org/zh-CN/docs/Web/API/Element/namespaceURI\n     */ _this.namespaceURI = \"g\";\n        _this.scrollLeft = 0;\n        _this.scrollTop = 0;\n        /**\n     * We don't support border now\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop\n     */ _this.clientTop = 0;\n        _this.clientLeft = 0;\n        /**\n     * is destroyed or not\n     */ _this.destroyed = false;\n        /**\n     * compatible with `style`\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style\n     */ _this.style = {};\n        _this.computedStyle = {};\n        /**\n     * Renderers will use these used values.\n     */ _this.parsedStyle = {\n        };\n        /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes\n     */ _this.attributes = {};\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Element, _Node);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Element, [\n        {\n            key: \"className\",\n            get: /**\n     * used with `getElementById()`\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/id\n     */ /**\n     * used in `getElementsByClassName`\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName\n     */ function get() {\n                // @ts-ignore\n                return this.getAttribute(\"class\") || \"\";\n            },\n            set: function set(className) {\n                this.setAttribute(\"class\", className);\n            }\n        },\n        {\n            key: \"classList\",\n            get: /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\n     */ function get() {\n                return this.className.split(\" \").filter(function(c) {\n                    return c !== \"\";\n                });\n            }\n        },\n        {\n            key: \"tagName\",\n            get: function get() {\n                return this.nodeName;\n            }\n        },\n        {\n            key: \"children\",\n            get: function get() {\n                return this.childNodes;\n            }\n        },\n        {\n            key: \"childElementCount\",\n            get: function get() {\n                return this.childNodes.length;\n            }\n        },\n        {\n            key: \"firstElementChild\",\n            get: function get() {\n                return this.firstChild;\n            }\n        },\n        {\n            key: \"lastElementChild\",\n            get: function get() {\n                return this.lastChild;\n            }\n        },\n        {\n            key: \"parentElement\",\n            get: function get() {\n                return this.parentNode;\n            }\n        },\n        {\n            key: \"nextSibling\",\n            get: function get() {\n                if (this.parentNode) {\n                    var index = this.parentNode.childNodes.indexOf(this);\n                    return this.parentNode.childNodes[index + 1] || null;\n                }\n                return null;\n            }\n        },\n        {\n            key: \"previousSibling\",\n            get: function get() {\n                if (this.parentNode) {\n                    var index = this.parentNode.childNodes.indexOf(this);\n                    return this.parentNode.childNodes[index - 1] || null;\n                }\n                return null;\n            }\n        },\n        {\n            key: \"cloneNode\",\n            value: function cloneNode(deep) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"appendChild\",\n            value: function appendChild(child, index) {\n                var _this$ownerDocument;\n                if (child.destroyed) {\n                    throw new Error(ERROR_MSG_APPEND_DESTROYED_ELEMENT);\n                }\n                runtime.sceneGraphService.attach(child, this, index);\n                if ((_this$ownerDocument = this.ownerDocument) !== null && _this$ownerDocument !== void 0 && _this$ownerDocument.defaultView) {\n                    if (!isInFragment(this) && child.nodeName === Shape.FRAGMENT) {\n                        this.ownerDocument.defaultView.mountFragment(child);\n                    } else {\n                        this.ownerDocument.defaultView.mountChildren(child);\n                    }\n                }\n                // @ts-ignore\n                if (this.isMutationObserved) {\n                    insertedEvent.relatedNode = this;\n                    child.dispatchEvent(insertedEvent);\n                }\n                return child;\n            }\n        },\n        {\n            key: \"insertBefore\",\n            value: function insertBefore(newChild, refChild) {\n                if (!refChild) {\n                    this.appendChild(newChild);\n                } else {\n                    if (newChild.parentElement) {\n                        newChild.parentElement.removeChild(newChild);\n                    }\n                    var index = this.childNodes.indexOf(refChild);\n                    if (index === -1) {\n                        this.appendChild(newChild);\n                    } else {\n                        this.appendChild(newChild, index);\n                    }\n                }\n                return newChild;\n            }\n        },\n        {\n            key: \"replaceChild\",\n            value: function replaceChild(newChild, oldChild) {\n                var index = this.childNodes.indexOf(oldChild);\n                this.removeChild(oldChild);\n                this.appendChild(newChild, index);\n                return oldChild;\n            }\n        },\n        {\n            key: \"removeChild\",\n            value: function removeChild(child) {\n                var _child$ownerDocument;\n                // should emit on itself before detach\n                removedEvent.relatedNode = this;\n                child.dispatchEvent(removedEvent);\n                if ((_child$ownerDocument = child.ownerDocument) !== null && _child$ownerDocument !== void 0 && _child$ownerDocument.defaultView) {\n                    child.ownerDocument.defaultView.unmountChildren(child);\n                }\n                // remove from scene graph\n                runtime.sceneGraphService.detach(child);\n                return child;\n            }\n        },\n        {\n            key: \"removeChildren\",\n            value: function removeChildren() {\n                for(var i = this.childNodes.length - 1; i >= 0; i--){\n                    var child = this.childNodes[i];\n                    this.removeChild(child);\n                }\n            }\n        },\n        {\n            key: \"destroyChildren\",\n            value: function destroyChildren() {\n                for(var i = this.childNodes.length - 1; i >= 0; i--){\n                    var child = this.childNodes[i];\n                    if (child.childNodes.length > 0) {\n                        child.destroyChildren();\n                    }\n                    child.destroy();\n                }\n            }\n        },\n        {\n            key: \"matches\",\n            value: function matches(selector) {\n                return runtime.sceneGraphService.matches(selector, this);\n            }\n        },\n        {\n            key: \"getElementById\",\n            value: function getElementById(id) {\n                return runtime.sceneGraphService.querySelector(\"#\".concat(id), this);\n            }\n        },\n        {\n            key: \"getElementsByName\",\n            value: function getElementsByName(name) {\n                return runtime.sceneGraphService.querySelectorAll('[name=\"'.concat(name, '\"]'), this);\n            }\n        },\n        {\n            key: \"getElementsByClassName\",\n            value: function getElementsByClassName(className) {\n                return runtime.sceneGraphService.querySelectorAll(\".\".concat(className), this);\n            }\n        },\n        {\n            key: \"getElementsByTagName\",\n            value: function getElementsByTagName(tagName) {\n                return runtime.sceneGraphService.querySelectorAll(tagName, this);\n            }\n        },\n        {\n            key: \"querySelector\",\n            value: function querySelector(selectors) {\n                return runtime.sceneGraphService.querySelector(selectors, this);\n            }\n        },\n        {\n            key: \"querySelectorAll\",\n            value: function querySelectorAll(selectors) {\n                return runtime.sceneGraphService.querySelectorAll(selectors, this);\n            }\n        },\n        {\n            key: \"closest\",\n            value: function closest(selectors) {\n                var el = this;\n                do {\n                    if (runtime.sceneGraphService.matches(selectors, el)) return el;\n                    el = el.parentElement;\n                }while (el !== null);\n                return null;\n            }\n        },\n        {\n            key: \"find\",\n            value: function find(filter) {\n                var _this2 = this;\n                var target = null;\n                this.forEach(function(object) {\n                    if (object !== _this2 && filter(object)) {\n                        target = object;\n                        return false;\n                    }\n                    return true;\n                });\n                return target;\n            }\n        },\n        {\n            key: \"findAll\",\n            value: function findAll(filter) {\n                var _this3 = this;\n                var objects = [];\n                this.forEach(function(object) {\n                    if (object !== _this3 && filter(object)) {\n                        objects.push(object);\n                    }\n                });\n                return objects;\n            }\n        },\n        {\n            key: \"after\",\n            value: function after() {\n                var _this4 = this;\n                if (this.parentNode) {\n                    var index = this.parentNode.childNodes.indexOf(this);\n                    for(var _len2 = arguments.length, nodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n                        nodes[_key2] = arguments[_key2];\n                    }\n                    nodes.forEach(function(node, i) {\n                        var _this4$parentNode;\n                        return (_this4$parentNode = _this4.parentNode) === null || _this4$parentNode === void 0 ? void 0 : _this4$parentNode.appendChild(node, index + i + 1);\n                    });\n                }\n            }\n        },\n        {\n            key: \"before\",\n            value: function before() {\n                if (this.parentNode) {\n                    var _ref;\n                    var index = this.parentNode.childNodes.indexOf(this);\n                    for(var _len3 = arguments.length, nodes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++){\n                        nodes[_key3] = arguments[_key3];\n                    }\n                    var first = nodes[0], rest = nodes.slice(1);\n                    this.parentNode.appendChild(first, index);\n                    (_ref = first).after.apply(_ref, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(rest));\n                }\n            }\n        },\n        {\n            key: \"replaceWith\",\n            value: function replaceWith() {\n                this.after.apply(this, arguments);\n                this.remove();\n            }\n        },\n        {\n            key: \"append\",\n            value: function append() {\n                var _this5 = this;\n                for(var _len4 = arguments.length, nodes = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++){\n                    nodes[_key4] = arguments[_key4];\n                }\n                nodes.forEach(function(node) {\n                    return _this5.appendChild(node);\n                });\n            }\n        },\n        {\n            key: \"prepend\",\n            value: function prepend() {\n                var _this6 = this;\n                for(var _len5 = arguments.length, nodes = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++){\n                    nodes[_key5] = arguments[_key5];\n                }\n                nodes.forEach(function(node, i) {\n                    return _this6.appendChild(node, i);\n                });\n            }\n        },\n        {\n            key: \"replaceChildren\",\n            value: function replaceChildren() {\n                while(this.childNodes.length && this.firstChild){\n                    this.removeChild(this.firstChild);\n                }\n                this.append.apply(this, arguments);\n            }\n        },\n        {\n            key: \"remove\",\n            value: function remove() {\n                if (this.parentNode) {\n                    return this.parentNode.removeChild(this);\n                }\n                return this;\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function destroy() {\n                // fix https://github.com/antvis/G/issues/1813\n                this.destroyChildren();\n                // destroy itself before remove\n                this.dispatchEvent(destroyEvent);\n                // remove from scenegraph first\n                this.remove();\n                // remove event listeners\n                this.emitter.removeAllListeners();\n                this.destroyed = true;\n            }\n        },\n        {\n            key: \"getGeometryBounds\",\n            value: function getGeometryBounds() {\n                return runtime.sceneGraphService.getGeometryBounds(this);\n            }\n        },\n        {\n            key: \"getRenderBounds\",\n            value: function getRenderBounds() {\n                return runtime.sceneGraphService.getBounds(this, true);\n            }\n        },\n        {\n            key: \"getBounds\",\n            value: function getBounds() {\n                return runtime.sceneGraphService.getBounds(this);\n            }\n        },\n        {\n            key: \"getLocalBounds\",\n            value: function getLocalBounds() {\n                return runtime.sceneGraphService.getLocalBounds(this);\n            }\n        },\n        {\n            key: \"getBoundingClientRect\",\n            value: function getBoundingClientRect() {\n                return runtime.sceneGraphService.getBoundingClientRect(this);\n            }\n        },\n        {\n            key: \"getClientRects\",\n            value: function getClientRects() {\n                return [\n                    this.getBoundingClientRect()\n                ];\n            }\n        },\n        {\n            key: \"computedStyleMap\",\n            value: /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/computedStyleMap\n     * eg. circle.computedStyleMap().get('fill');\n     */ function computedStyleMap() {\n                return new Map(Object.entries(this.computedStyle));\n            }\n        },\n        {\n            key: \"getAttributeNames\",\n            value: /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames\n     */ function getAttributeNames() {\n                return Object.keys(this.attributes);\n            }\n        },\n        {\n            key: \"getAttribute\",\n            value: function getAttribute(name) {\n                // @see https://github.com/antvis/G/issues/1267\n                if (typeof name === \"symbol\") {\n                    return undefined;\n                }\n                var value = this.attributes[name];\n                if (value === undefined) {\n                    // if the given attribute does not exist, the value returned will either be null or \"\"\n                    return value;\n                }\n                return value;\n            }\n        },\n        {\n            key: \"hasAttribute\",\n            value: function hasAttribute(qualifiedName) {\n                return this.getAttributeNames().includes(qualifiedName);\n            }\n        },\n        {\n            key: \"hasAttributes\",\n            value: function hasAttributes() {\n                return !!this.getAttributeNames().length;\n            }\n        },\n        {\n            key: \"removeAttribute\",\n            value: function removeAttribute(attributeName) {\n                this.setAttribute(attributeName, null);\n                delete this.attributes[attributeName];\n            }\n        },\n        {\n            key: \"setAttribute\",\n            value: function setAttribute(attributeName, value, force, memoize) {\n                this.attributes[attributeName] = value;\n            }\n        },\n        {\n            key: \"getAttributeNS\",\n            value: function getAttributeNS(namespace, localName) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"getAttributeNode\",\n            value: function getAttributeNode(qualifiedName) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"getAttributeNodeNS\",\n            value: function getAttributeNodeNS(namespace, localName) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"hasAttributeNS\",\n            value: function hasAttributeNS(namespace, localName) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"removeAttributeNS\",\n            value: function removeAttributeNS(namespace, localName) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"removeAttributeNode\",\n            value: function removeAttributeNode(attr) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"setAttributeNS\",\n            value: function setAttributeNS(namespace, qualifiedName, value) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"setAttributeNode\",\n            value: function setAttributeNode(attr) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"setAttributeNodeNS\",\n            value: function setAttributeNodeNS(attr) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"toggleAttribute\",\n            value: function toggleAttribute(qualifiedName, force) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        }\n    ]);\n}(Node);\nfunction isDisplayObject(value) {\n    return !!(value !== null && value !== void 0 && value.nodeName);\n}\nvar Proxy = runtime.globalThis.Proxy ? runtime.globalThis.Proxy : function() {};\nvar attrModifiedEvent = new MutationEvent(ElementEvent.ATTR_MODIFIED, null, null, null, null, MutationEvent.MODIFICATION, null, null);\nvar $vec3 = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create();\nvar $quat = gl_matrix__WEBPACK_IMPORTED_MODULE_21__.create();\n/**\n * prototype chains: DisplayObject -> Element -> Node -> EventTarget\n *\n * mixins: Animatable, Transformable, Visible\n * @see https://github.com/tannerntannern/ts-mixer/blob/master/README.md#mixing-generic-classes\n *\n * Provide abilities in scene graph, such as:\n * * transform `translate/rotate/scale`\n * * add/remove child\n * * visibility and z-index\n *\n * Those abilities are implemented with those components: `Transform/Sortable/Visible`.\n *\n * Emit following events:\n * * init\n * * destroy\n * * attributeChanged\n */ var DisplayObject = /*#__PURE__*/ function(_Element) {\n    function DisplayObject(config) {\n        var _this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, DisplayObject);\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, DisplayObject);\n        // assign name, id to config\n        // eg. group.get('name')\n        _this.isCustomElement = false;\n        _this.isMutationObserved = false;\n        /**\n     * push to active animations after calling `animate()`\n     */ _this.activeAnimations = [];\n        _this.config = config;\n        // init scene graph node\n        _this.id = config.id || \"\";\n        _this.name = config.name || \"\";\n        if (config.className || config[\"class\"]) {\n            _this.className = config.className || config[\"class\"];\n        }\n        _this.nodeName = config.type || Shape.GROUP;\n        if (config.initialParsedStyle) {\n            Object.assign(_this.parsedStyle, config.initialParsedStyle);\n        }\n        // start to process attributes\n        _this.initAttributes(config.style);\n        if (runtime.enableStyleSyntax) {\n            _this.style = new Proxy(// @ts-ignore\n            {\n                // ...this.attributes,\n                setProperty: function setProperty(propertyName, value) {\n                    _this.setAttribute(propertyName, value);\n                },\n                getPropertyValue: function getPropertyValue(propertyName) {\n                    return _this.getAttribute(propertyName);\n                },\n                removeProperty: function removeProperty(propertyName) {\n                    _this.removeAttribute(propertyName);\n                },\n                item: function item() {\n                    return \"\";\n                }\n            }, {\n                get: function get(target, name) {\n                    if (target[name] !== undefined) {\n                        // if (name in target) {\n                        return target[name];\n                    }\n                    return _this.getAttribute(name);\n                },\n                set: function set(_, prop, value) {\n                    _this.setAttribute(prop, value);\n                    return true;\n                }\n            });\n        }\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(DisplayObject, _Element);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(DisplayObject, [\n        {\n            key: \"destroy\",\n            value: function destroy() {\n                _babel_runtime_helpers_superPropGet__WEBPACK_IMPORTED_MODULE_10___default()(DisplayObject, \"destroy\", this, 3)([]);\n                // stop all active animations\n                this.getAnimations().forEach(function(animation) {\n                    animation.cancel();\n                });\n            }\n        },\n        {\n            key: \"cloneNode\",\n            value: function cloneNode(deep, customCloneFunc) {\n                var clonedStyle = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, this.attributes);\n                for(var attributeName in clonedStyle){\n                    var attribute = clonedStyle[attributeName];\n                    // @see https://github.com/antvis/G/issues/1095\n                    if (isDisplayObject(attribute) && // share the same clipPath if possible\n                    attributeName !== \"clipPath\" && attributeName !== \"offsetPath\" && attributeName !== \"textPath\") {\n                        clonedStyle[attributeName] = attribute.cloneNode(deep);\n                    }\n                    // TODO: clone other type\n                    if (customCloneFunc) {\n                        clonedStyle[attributeName] = customCloneFunc(attributeName, attribute);\n                    }\n                }\n                var cloned = new this.constructor(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, this.config), {}, {\n                    style: clonedStyle\n                }));\n                // apply transform\n                cloned.setLocalTransform(this.getLocalTransform());\n                if (deep) {\n                    this.children.forEach(function(child) {\n                        // skip marker\n                        if (!child.style.isMarker) {\n                            var clonedChild = child.cloneNode(deep);\n                            cloned.appendChild(clonedChild);\n                        }\n                    });\n                }\n                return cloned;\n            }\n        },\n        {\n            key: \"initAttributes\",\n            value: function initAttributes() {\n                var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n                var options = {\n                    forceUpdateGeometry: true\n                };\n                runtime.styleValueRegistry.processProperties(this, attributes, options);\n                // redraw at next frame\n                this.renderable.dirty = true;\n            }\n        },\n        {\n            key: \"setAttribute\",\n            value: function setAttribute(name, value) {\n                var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                var memoize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n                // ignore undefined value\n                if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(value)) {\n                    return;\n                }\n                if (force || value !== this.attributes[name]) {\n                    this.internalSetAttribute(name, value, {\n                        memoize: memoize\n                    });\n                    _babel_runtime_helpers_superPropGet__WEBPACK_IMPORTED_MODULE_10___default()(DisplayObject, \"setAttribute\", this, 3)([\n                        name,\n                        value\n                    ]);\n                }\n            }\n        },\n        {\n            key: \"internalSetAttribute\",\n            value: function internalSetAttribute(name, value) {\n                var parseOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                var renderable = this.renderable;\n                var oldValue = this.attributes[name];\n                var oldParsedValue = this.parsedStyle[name];\n                runtime.styleValueRegistry.processProperties(this, _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()({}, name, value), parseOptions);\n                // redraw at next frame\n                renderable.dirty = true;\n                var newParsedValue = this.parsedStyle[name];\n                if (this.isConnected) {\n                    attrModifiedEvent.relatedNode = this;\n                    attrModifiedEvent.prevValue = oldValue;\n                    attrModifiedEvent.newValue = value;\n                    attrModifiedEvent.attrName = name;\n                    attrModifiedEvent.prevParsedValue = oldParsedValue;\n                    attrModifiedEvent.newParsedValue = newParsedValue;\n                    if (this.isMutationObserved) {\n                        this.dispatchEvent(attrModifiedEvent);\n                    } else {\n                        attrModifiedEvent.target = this;\n                        this.ownerDocument.defaultView.dispatchEvent(attrModifiedEvent, true);\n                    }\n                }\n                if (this.isCustomElement && this.isConnected || !this.isCustomElement) {\n                    var _attributeChangedCall, _ref;\n                    (_attributeChangedCall = (_ref = this).attributeChangedCallback) === null || _attributeChangedCall === void 0 || _attributeChangedCall.call(_ref, name, oldValue, value, oldParsedValue, newParsedValue);\n                }\n            }\n        },\n        {\n            key: \"getBBox\",\n            value: function getBBox() {\n                var aabb = this.getBounds();\n                var _aabb$getMin = aabb.getMin(), _aabb$getMin2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_aabb$getMin, 2), left = _aabb$getMin2[0], top = _aabb$getMin2[1];\n                var _aabb$getMax = aabb.getMax(), _aabb$getMax2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_aabb$getMax, 2), right = _aabb$getMax2[0], bottom = _aabb$getMax2[1];\n                return new Rectangle(left, top, right - left, bottom - top);\n            }\n        },\n        {\n            key: \"setOrigin\",\n            value: function setOrigin(position) {\n                var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n                runtime.sceneGraphService.setOrigin(this, createVec3(position, y, z, false));\n                return this;\n            }\n        },\n        {\n            key: \"getOrigin\",\n            value: function getOrigin() {\n                return runtime.sceneGraphService.getOrigin(this);\n            }\n        },\n        {\n            key: \"setPosition\",\n            value: function setPosition(position) {\n                var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n                runtime.sceneGraphService.setPosition(this, createVec3(position, y, z, false));\n                return this;\n            }\n        },\n        {\n            key: \"setLocalPosition\",\n            value: function setLocalPosition(position) {\n                var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n                runtime.sceneGraphService.setLocalPosition(this, createVec3(position, y, z, false));\n                return this;\n            }\n        },\n        {\n            key: \"translate\",\n            value: function translate(position) {\n                var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n                runtime.sceneGraphService.translate(this, createVec3(position, y, z, false));\n                return this;\n            }\n        },\n        {\n            key: \"translateLocal\",\n            value: function translateLocal(position) {\n                var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n                runtime.sceneGraphService.translateLocal(this, createVec3(position, y, z, false));\n                return this;\n            }\n        },\n        {\n            key: \"getPosition\",\n            value: function getPosition() {\n                return runtime.sceneGraphService.getPosition(this);\n            }\n        },\n        {\n            key: \"getLocalPosition\",\n            value: function getLocalPosition() {\n                return runtime.sceneGraphService.getLocalPosition(this);\n            }\n        },\n        {\n            key: \"scale\",\n            value: function scale(scaling, y, z) {\n                return this.scaleLocal(scaling, y, z);\n            }\n        },\n        {\n            key: \"scaleLocal\",\n            value: function scaleLocal(scaling, y, z) {\n                if (typeof scaling === \"number\") {\n                    y = y || scaling;\n                    z = z || scaling;\n                    scaling = createVec3(scaling, y, z, false);\n                }\n                runtime.sceneGraphService.scaleLocal(this, scaling);\n                return this;\n            }\n        },\n        {\n            key: \"setLocalScale\",\n            value: function setLocalScale(scaling, y, z) {\n                if (typeof scaling === \"number\") {\n                    y = y || scaling;\n                    z = z || scaling;\n                    scaling = createVec3(scaling, y, z, false);\n                }\n                runtime.sceneGraphService.setLocalScale(this, scaling);\n                return this;\n            }\n        },\n        {\n            key: \"getLocalScale\",\n            value: function getLocalScale() {\n                return runtime.sceneGraphService.getLocalScale(this);\n            }\n        },\n        {\n            key: \"getScale\",\n            value: function getScale() {\n                return runtime.sceneGraphService.getScale(this);\n            }\n        },\n        {\n            key: \"getEulerAngles\",\n            value: function getEulerAngles() {\n                var _getEuler = getEuler($vec3, runtime.sceneGraphService.getWorldTransform(this)), _getEuler2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_getEuler, 3), ez = _getEuler2[2];\n                return rad2deg(ez);\n            }\n        },\n        {\n            key: \"getLocalEulerAngles\",\n            value: function getLocalEulerAngles() {\n                var _getEuler3 = getEuler($vec3, runtime.sceneGraphService.getLocalRotation(this)), _getEuler4 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_getEuler3, 3), ez = _getEuler4[2];\n                return rad2deg(ez);\n            }\n        },\n        {\n            key: \"setEulerAngles\",\n            value: function setEulerAngles(z) {\n                runtime.sceneGraphService.setEulerAngles(this, 0, 0, z);\n                return this;\n            }\n        },\n        {\n            key: \"setLocalEulerAngles\",\n            value: function setLocalEulerAngles(z) {\n                runtime.sceneGraphService.setLocalEulerAngles(this, 0, 0, z);\n                return this;\n            }\n        },\n        {\n            key: \"rotateLocal\",\n            value: function rotateLocal(x, y, z) {\n                if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(y) && (0,_antv_util__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(z)) {\n                    runtime.sceneGraphService.rotateLocal(this, 0, 0, x);\n                } else {\n                    runtime.sceneGraphService.rotateLocal(this, x, y, z);\n                }\n                return this;\n            }\n        },\n        {\n            key: \"rotate\",\n            value: function rotate(x, y, z) {\n                if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(y) && (0,_antv_util__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(z)) {\n                    runtime.sceneGraphService.rotate(this, 0, 0, x);\n                } else {\n                    runtime.sceneGraphService.rotate(this, x, y, z);\n                }\n                return this;\n            }\n        },\n        {\n            key: \"setRotation\",\n            value: function setRotation(rotation, y, z, w) {\n                runtime.sceneGraphService.setRotation(this, rotation, y, z, w);\n                return this;\n            }\n        },\n        {\n            key: \"setLocalRotation\",\n            value: function setLocalRotation(rotation, y, z, w) {\n                runtime.sceneGraphService.setLocalRotation(this, rotation, y, z, w);\n                return this;\n            }\n        },\n        {\n            key: \"setLocalSkew\",\n            value: function setLocalSkew(skew, y) {\n                runtime.sceneGraphService.setLocalSkew(this, skew, y);\n                return this;\n            }\n        },\n        {\n            key: \"getRotation\",\n            value: function getRotation() {\n                return runtime.sceneGraphService.getRotation(this);\n            }\n        },\n        {\n            key: \"getLocalRotation\",\n            value: function getLocalRotation() {\n                return runtime.sceneGraphService.getLocalRotation(this);\n            }\n        },\n        {\n            key: \"getLocalSkew\",\n            value: function getLocalSkew() {\n                return runtime.sceneGraphService.getLocalSkew(this);\n            }\n        },\n        {\n            key: \"getLocalTransform\",\n            value: function getLocalTransform() {\n                return runtime.sceneGraphService.getLocalTransform(this);\n            }\n        },\n        {\n            key: \"getWorldTransform\",\n            value: function getWorldTransform() {\n                return runtime.sceneGraphService.getWorldTransform(this);\n            }\n        },\n        {\n            key: \"setLocalTransform\",\n            value: function setLocalTransform(transform) {\n                runtime.sceneGraphService.setLocalTransform(this, transform);\n                return this;\n            }\n        },\n        {\n            key: \"resetLocalTransform\",\n            value: function resetLocalTransform() {\n                runtime.sceneGraphService.resetLocalTransform(this);\n            }\n        },\n        {\n            key: \"getAnimations\",\n            value: function getAnimations() {\n                return this.activeAnimations;\n            }\n        },\n        {\n            key: \"animate\",\n            value: function animate(keyframes, options) {\n                var _this$ownerDocument;\n                var timeline = (_this$ownerDocument = this.ownerDocument) === null || _this$ownerDocument === void 0 ? void 0 : _this$ownerDocument.timeline;\n                if (timeline) {\n                    return timeline.play(this, keyframes, options);\n                }\n                return null;\n            }\n        },\n        {\n            key: \"isVisible\",\n            value: function isVisible() {\n                var _this$parsedStyle;\n                return ((_this$parsedStyle = this.parsedStyle) === null || _this$parsedStyle === void 0 ? void 0 : _this$parsedStyle.visibility) !== \"hidden\";\n            }\n        },\n        {\n            key: \"interactive\",\n            get: function get() {\n                return this.isInteractive();\n            },\n            set: function set(b) {\n                this.style.pointerEvents = b ? \"auto\" : \"none\";\n            }\n        },\n        {\n            key: \"isInteractive\",\n            value: function isInteractive() {\n                var _this$parsedStyle2;\n                return ((_this$parsedStyle2 = this.parsedStyle) === null || _this$parsedStyle2 === void 0 ? void 0 : _this$parsedStyle2.pointerEvents) !== \"none\";\n            }\n        },\n        {\n            key: \"isCulled\",\n            value: function isCulled() {\n                return !!(this.cullable && this.cullable.enable && !this.cullable.visible);\n            }\n        },\n        {\n            key: \"toFront\",\n            value: function toFront() {\n                if (this.parentNode) {\n                    this.style.zIndex = Math.max.apply(Math, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(this.parentNode.children.map(function(child) {\n                        return Number(child.style.zIndex);\n                    }))) + 1;\n                }\n                return this;\n            }\n        },\n        {\n            key: \"toBack\",\n            value: function toBack() {\n                if (this.parentNode) {\n                    this.style.zIndex = Math.min.apply(Math, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(this.parentNode.children.map(function(child) {\n                        return Number(child.style.zIndex);\n                    }))) - 1;\n                }\n                return this;\n            }\n        },\n        {\n            key: \"getConfig\",\n            value: function getConfig() {\n                return this.config;\n            }\n        },\n        {\n            key: \"attr\",\n            value: function attr() {\n                var _this2 = this;\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                var name = args[0], value = args[1];\n                if (!name) {\n                    return this.attributes;\n                }\n                if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_43__[\"default\"])(name)) {\n                    Object.keys(name).forEach(function(key) {\n                        _this2.setAttribute(key, name[key]);\n                    });\n                    return this;\n                }\n                if (args.length === 2) {\n                    this.setAttribute(name, value);\n                    return this;\n                }\n                return this.attributes[name];\n            }\n        },\n        {\n            key: \"getMatrix\",\n            value: function getMatrix(transformMat4) {\n                var transform = transformMat4 || this.getWorldTransform();\n                var _mat4$getTranslation = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.getTranslation($vec3, transform), _mat4$getTranslation2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_mat4$getTranslation, 2), tx = _mat4$getTranslation2[0], ty = _mat4$getTranslation2[1];\n                var _mat4$getScaling = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.getScaling($vec3, transform), _mat4$getScaling2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_mat4$getScaling, 2), sx = _mat4$getScaling2[0], sy = _mat4$getScaling2[1];\n                var rotation = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.getRotation($quat, transform);\n                var _getEuler5 = getEuler($vec3, rotation), _getEuler6 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_getEuler5, 3), eux = _getEuler6[0], euz = _getEuler6[2];\n                // gimbal lock at 90 degrees\n                return fromRotationTranslationScale(eux || euz, tx, ty, sx, sy);\n            }\n        },\n        {\n            key: \"getLocalMatrix\",\n            value: function getLocalMatrix() {\n                return this.getMatrix(this.getLocalTransform());\n            }\n        },\n        {\n            key: \"setMatrix\",\n            value: function setMatrix(mat) {\n                var _decompose = decompose(mat), _decompose2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_decompose, 5), tx = _decompose2[0], ty = _decompose2[1], scalingX = _decompose2[2], scalingY = _decompose2[3], angle = _decompose2[4];\n                this.setEulerAngles(angle).setPosition(tx, ty).setLocalScale(scalingX, scalingY);\n            }\n        },\n        {\n            key: \"setLocalMatrix\",\n            value: function setLocalMatrix(mat) {\n                var _decompose3 = decompose(mat), _decompose4 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_decompose3, 5), tx = _decompose4[0], ty = _decompose4[1], scalingX = _decompose4[2], scalingY = _decompose4[3], angle = _decompose4[4];\n                this.setLocalEulerAngles(angle).setLocalPosition(tx, ty).setLocalScale(scalingX, scalingY);\n            }\n        },\n        {\n            key: \"show\",\n            value: function show() {\n                this.forEach(function(object) {\n                    object.style.visibility = \"visible\";\n                });\n            }\n        },\n        {\n            key: \"hide\",\n            value: function hide() {\n                this.forEach(function(object) {\n                    object.style.visibility = \"hidden\";\n                });\n            }\n        },\n        {\n            key: \"getCount\",\n            value: function getCount() {\n                return this.childElementCount;\n            }\n        },\n        {\n            key: \"getParent\",\n            value: function getParent() {\n                return this.parentElement;\n            }\n        },\n        {\n            key: \"getChildren\",\n            value: function getChildren() {\n                return this.children;\n            }\n        },\n        {\n            key: \"getFirst\",\n            value: function getFirst() {\n                return this.firstElementChild;\n            }\n        },\n        {\n            key: \"getLast\",\n            value: function getLast() {\n                return this.lastElementChild;\n            }\n        },\n        {\n            key: \"getChildByIndex\",\n            value: function getChildByIndex(index) {\n                return this.children[index] || null;\n            }\n        },\n        {\n            key: \"add\",\n            value: function add(child, index) {\n                return this.appendChild(child, index);\n            }\n        },\n        {\n            key: \"set\",\n            value: function set(name, value) {\n                // @ts-ignore\n                this.config[name] = value;\n            }\n        },\n        {\n            key: \"get\",\n            value: function get(name) {\n                return this.config[name];\n            }\n        },\n        {\n            key: \"moveTo\",\n            value: function moveTo(position) {\n                var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n                this.setPosition(position, y, z);\n                return this;\n            }\n        },\n        {\n            key: \"move\",\n            value: function move(position) {\n                var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n                this.setPosition(position, y, z);\n                return this;\n            }\n        },\n        {\n            key: \"setZIndex\",\n            value: function setZIndex(zIndex) {\n                this.style.zIndex = zIndex;\n                return this;\n            }\n        }\n    ]);\n}(Element);\nDisplayObject.PARSED_STYLE_LIST = new Set([\n    \"class\",\n    \"className\",\n    \"clipPath\",\n    \"cursor\",\n    \"display\",\n    \"draggable\",\n    \"droppable\",\n    \"fill\",\n    \"fillOpacity\",\n    \"fillRule\",\n    \"filter\",\n    \"increasedLineWidthForHitTesting\",\n    \"lineCap\",\n    \"lineDash\",\n    \"lineDashOffset\",\n    \"lineJoin\",\n    \"lineWidth\",\n    \"miterLimit\",\n    \"hitArea\",\n    \"offsetDistance\",\n    \"offsetPath\",\n    \"offsetX\",\n    \"offsetY\",\n    \"opacity\",\n    \"pointerEvents\",\n    \"shadowColor\",\n    \"shadowType\",\n    \"shadowBlur\",\n    \"shadowOffsetX\",\n    \"shadowOffsetY\",\n    \"stroke\",\n    \"strokeOpacity\",\n    \"strokeWidth\",\n    \"strokeLinecap\",\n    \"strokeLineJoin\",\n    \"strokeDasharray\",\n    \"strokeDashoffset\",\n    \"transform\",\n    \"transformOrigin\",\n    \"textTransform\",\n    \"visibility\",\n    \"zIndex\"\n]);\nvar Circle = /*#__PURE__*/ function(_DisplayObject) {\n    function Circle() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Circle);\n        return _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, Circle, [\n            _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                type: Shape.CIRCLE\n            }, options)\n        ]);\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Circle, _DisplayObject);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Circle);\n}(DisplayObject);\nCircle.PARSED_STYLE_LIST = new Set([].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(DisplayObject.PARSED_STYLE_LIST), [\n    \"cx\",\n    \"cy\",\n    \"cz\",\n    \"r\",\n    \"isBillboard\",\n    \"isSizeAttenuation\"\n]));\nvar _excluded$6 = [\n    \"style\"\n];\n/**\n * shadow root\n * @see https://yuque.antfin-inc.com/antv/czqvg5/pgqipg\n */ var CustomElement = /*#__PURE__*/ function(_DisplayObject) {\n    // private shadowNodes: DisplayObject[] = [];\n    function CustomElement() {\n        var _this;\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, style = _ref.style, rest = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_15___default()(_ref, _excluded$6);\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CustomElement);\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, CustomElement, [\n            _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                style: style\n            }, rest)\n        ]);\n        _this.isCustomElement = true;\n        return _this;\n    }\n    /**\n   * fired after element insert into DOM tree\n   */ _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(CustomElement, _DisplayObject);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CustomElement);\n}(DisplayObject);\nCustomElement.PARSED_STYLE_LIST = new Set([\n    \"class\",\n    \"className\",\n    \"clipPath\",\n    \"cursor\",\n    \"draggable\",\n    \"droppable\",\n    \"opacity\",\n    \"pointerEvents\",\n    \"transform\",\n    \"transformOrigin\",\n    \"zIndex\",\n    \"visibility\"\n]);\nvar Ellipse = /*#__PURE__*/ function(_DisplayObject) {\n    function Ellipse() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Ellipse);\n        return _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, Ellipse, [\n            _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                type: Shape.ELLIPSE\n            }, options)\n        ]);\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Ellipse, _DisplayObject);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Ellipse);\n}(DisplayObject);\nEllipse.PARSED_STYLE_LIST = new Set([].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(DisplayObject.PARSED_STYLE_LIST), [\n    \"cx\",\n    \"cy\",\n    \"cz\",\n    \"rx\",\n    \"ry\",\n    \"isBillboard\",\n    \"isSizeAttenuation\"\n]));\n/**\n * 节点片段，用于包裹多个节点并批量操作\n *\n *  向 Fragment 或者根节点为 Fragment 的节点添加子节点时，不会触发渲染和事件。\n *\n * 当 Fragment 被挂载到 Canvas 中的节点时，其子节点会一次性被渲染，并触发合并事件。\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment\n */ var Fragment = /*#__PURE__*/ function(_DisplayObject) {\n    function Fragment() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Fragment);\n        return _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, Fragment, [\n            {\n                type: Shape.FRAGMENT\n            }\n        ]);\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Fragment, _DisplayObject);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Fragment);\n}(DisplayObject);\nFragment.PARSED_STYLE_LIST = new Set([\n    \"class\",\n    \"className\"\n]);\n/**\n * its attributes are inherited by its children.\n * @see https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/g\n * \n * @example\n * <g fill=\"white\" stroke=\"green\" stroke-width=\"5\">\n    <circle cx=\"40\" cy=\"40\" r=\"25\" />\n    <circle cx=\"60\" cy=\"60\" r=\"25\" />\n  </g>\n */ var Group = /*#__PURE__*/ function(_DisplayObject) {\n    function Group() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Group);\n        return _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, Group, [\n            _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                type: Shape.GROUP\n            }, options)\n        ]);\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Group, _DisplayObject);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Group);\n}(DisplayObject);\nGroup.PARSED_STYLE_LIST = new Set([\n    \"class\",\n    \"className\",\n    \"clipPath\",\n    \"cursor\",\n    \"draggable\",\n    \"droppable\",\n    \"opacity\",\n    \"pointerEvents\",\n    \"transform\",\n    \"transformOrigin\",\n    \"zIndex\",\n    \"visibility\"\n]);\nvar _excluded$5 = [\n    \"style\"\n];\n/**\n * HTML container\n * @see https://github.com/pmndrs/drei#html\n */ var HTML = /*#__PURE__*/ function(_DisplayObject) {\n    function HTML() {\n        var _this;\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, style = _ref.style, rest = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_15___default()(_ref, _excluded$5);\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, HTML);\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, HTML, [\n            _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                type: Shape.HTML,\n                style: style\n            }, rest)\n        ]);\n        _this.cullable.enable = false;\n        return _this;\n    }\n    /**\n   * return wrapper HTMLElement\n   * * <div> in g-webgl/canvas\n   * * <foreignObject> in g-svg\n   */ _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(HTML, _DisplayObject);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(HTML, [\n        {\n            key: \"getDomElement\",\n            value: function getDomElement() {\n                return this.parsedStyle.$el;\n            }\n        },\n        {\n            key: \"getClientRects\",\n            value: function getClientRects() {\n                return [\n                    this.getBoundingClientRect()\n                ];\n            }\n        },\n        {\n            key: \"getLocalBounds\",\n            value: function getLocalBounds() {\n                if (this.parentNode) {\n                    var parentInvert = gl_matrix__WEBPACK_IMPORTED_MODULE_19__.invert(gl_matrix__WEBPACK_IMPORTED_MODULE_19__.create(), this.parentNode.getWorldTransform());\n                    var bounds = this.getBounds();\n                    if (!AABB.isEmpty(bounds)) {\n                        var localBounds = new AABB();\n                        localBounds.setFromTransformedAABB(bounds, parentInvert);\n                        return localBounds;\n                    }\n                }\n                return this.getBounds();\n            }\n        }\n    ]);\n}(DisplayObject);\nHTML.PARSED_STYLE_LIST = new Set([].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(DisplayObject.PARSED_STYLE_LIST), [\n    \"x\",\n    \"y\",\n    \"$el\",\n    \"innerHTML\",\n    \"width\",\n    \"height\"\n]));\nvar Image = /*#__PURE__*/ function(_DisplayObject) {\n    function Image() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Image);\n        return _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, Image, [\n            _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                type: Shape.IMAGE\n            }, options)\n        ]);\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Image, _DisplayObject);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Image);\n}(DisplayObject);\nImage.PARSED_STYLE_LIST = new Set([].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(DisplayObject.PARSED_STYLE_LIST), [\n    \"x\",\n    \"y\",\n    \"z\",\n    \"src\",\n    \"width\",\n    \"height\",\n    \"isBillboard\",\n    \"billboardRotation\",\n    \"isSizeAttenuation\",\n    \"keepAspectRatio\"\n]));\nvar _excluded$4 = [\n    \"style\"\n];\n/**\n * Create a line connecting two points.\n * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Element/line\n *\n * Also support for using marker.\n */ var Line = /*#__PURE__*/ function(_DisplayObject) {\n    function Line() {\n        var _this;\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, style = _ref.style, rest = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_15___default()(_ref, _excluded$4);\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Line);\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, Line, [\n            _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                type: Shape.LINE,\n                style: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                    x1: 0,\n                    y1: 0,\n                    x2: 0,\n                    y2: 0,\n                    z1: 0,\n                    z2: 0\n                }, style)\n            }, rest)\n        ]);\n        _this.markerStartAngle = 0;\n        _this.markerEndAngle = 0;\n        var _this$parsedStyle = _this.parsedStyle, markerStart = _this$parsedStyle.markerStart, markerEnd = _this$parsedStyle.markerEnd;\n        if (markerStart && isDisplayObject(markerStart)) {\n            _this.markerStartAngle = markerStart.getLocalEulerAngles();\n            _this.appendChild(markerStart);\n        }\n        if (markerEnd && isDisplayObject(markerEnd)) {\n            _this.markerEndAngle = markerEnd.getLocalEulerAngles();\n            _this.appendChild(markerEnd);\n        }\n        _this.transformMarker(true);\n        _this.transformMarker(false);\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Line, _DisplayObject);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Line, [\n        {\n            key: \"attributeChangedCallback\",\n            value: function attributeChangedCallback(attrName, oldValue, newValue, prevParsedValue, newParsedValue) {\n                if (attrName === \"x1\" || attrName === \"y1\" || attrName === \"x2\" || attrName === \"y2\" || attrName === \"markerStartOffset\" || attrName === \"markerEndOffset\") {\n                    this.transformMarker(true);\n                    this.transformMarker(false);\n                } else if (attrName === \"markerStart\") {\n                    if (prevParsedValue && isDisplayObject(prevParsedValue)) {\n                        this.markerStartAngle = 0;\n                        prevParsedValue.remove();\n                    }\n                    // CSSKeyword 'unset'\n                    if (newParsedValue && isDisplayObject(newParsedValue)) {\n                        this.markerStartAngle = newParsedValue.getLocalEulerAngles();\n                        this.appendChild(newParsedValue);\n                        this.transformMarker(true);\n                    }\n                } else if (attrName === \"markerEnd\") {\n                    if (prevParsedValue && isDisplayObject(prevParsedValue)) {\n                        this.markerEndAngle = 0;\n                        prevParsedValue.remove();\n                    }\n                    if (newParsedValue && isDisplayObject(newParsedValue)) {\n                        this.markerEndAngle = newParsedValue.getLocalEulerAngles();\n                        this.appendChild(newParsedValue);\n                        this.transformMarker(false);\n                    }\n                }\n            }\n        },\n        {\n            key: \"transformMarker\",\n            value: function transformMarker(isStart) {\n                var _this$parsedStyle2 = this.parsedStyle, markerStart = _this$parsedStyle2.markerStart, markerEnd = _this$parsedStyle2.markerEnd, markerStartOffset = _this$parsedStyle2.markerStartOffset, markerEndOffset = _this$parsedStyle2.markerEndOffset, x1 = _this$parsedStyle2.x1, x2 = _this$parsedStyle2.x2, y1 = _this$parsedStyle2.y1, y2 = _this$parsedStyle2.y2;\n                var marker = isStart ? markerStart : markerEnd;\n                if (!marker || !isDisplayObject(marker)) {\n                    return;\n                }\n                var rad = 0;\n                var x;\n                var y;\n                var ox;\n                var oy;\n                var offset;\n                var originalAngle;\n                if (isStart) {\n                    ox = x1;\n                    oy = y1;\n                    x = x2 - x1;\n                    y = y2 - y1;\n                    offset = markerStartOffset || 0;\n                    originalAngle = this.markerStartAngle;\n                } else {\n                    ox = x2;\n                    oy = y2;\n                    x = x1 - x2;\n                    y = y1 - y2;\n                    offset = markerEndOffset || 0;\n                    originalAngle = this.markerEndAngle;\n                }\n                rad = Math.atan2(y, x);\n                // account for markerOffset\n                marker.setLocalEulerAngles(rad * 180 / Math.PI + originalAngle);\n                marker.setLocalPosition(ox + Math.cos(rad) * offset, oy + Math.sin(rad) * offset);\n            }\n        },\n        {\n            key: \"getPoint\",\n            value: function getPoint(ratio) {\n                var inWorldSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                // TODO: account for z1/z2 in 3D line\n                var _this$parsedStyle3 = this.parsedStyle, x1 = _this$parsedStyle3.x1, y1 = _this$parsedStyle3.y1, x2 = _this$parsedStyle3.x2, y2 = _this$parsedStyle3.y2;\n                var _linePointAt = (0,_antv_g_math__WEBPACK_IMPORTED_MODULE_11__.linePointAt)(x1, y1, x2, y2, ratio), x = _linePointAt.x, y = _linePointAt.y;\n                var transformed = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create(), gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(x, y, 0), inWorldSpace ? this.getWorldTransform() : this.getLocalTransform());\n                // apply local transformation\n                return new Point(transformed[0], transformed[1]);\n            }\n        },\n        {\n            key: \"getPointAtLength\",\n            value: function getPointAtLength(distance) {\n                var inWorldSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                return this.getPoint(distance / this.getTotalLength(), inWorldSpace);\n            }\n        },\n        {\n            key: \"getTotalLength\",\n            value: function getTotalLength() {\n                // TODO: account for z1/z2 in 3D line\n                var _this$parsedStyle4 = this.parsedStyle, x1 = _this$parsedStyle4.x1, y1 = _this$parsedStyle4.y1, x2 = _this$parsedStyle4.x2, y2 = _this$parsedStyle4.y2;\n                return (0,_antv_g_math__WEBPACK_IMPORTED_MODULE_11__.lineLength)(x1, y1, x2, y2);\n            }\n        }\n    ]);\n}(DisplayObject);\nLine.PARSED_STYLE_LIST = new Set([].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(DisplayObject.PARSED_STYLE_LIST), [\n    \"x1\",\n    \"y1\",\n    \"x2\",\n    \"y2\",\n    \"z1\",\n    \"z2\",\n    \"isBillboard\",\n    \"isSizeAttenuation\",\n    \"markerStart\",\n    \"markerEnd\",\n    \"markerStartOffset\",\n    \"markerEndOffset\"\n]));\nvar _excluded$3 = [\n    \"style\"\n];\nvar Path = /*#__PURE__*/ function(_DisplayObject) {\n    function Path() {\n        var _this;\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, style = _ref.style, rest = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_15___default()(_ref, _excluded$3);\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Path);\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, Path, [\n            _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                type: Shape.PATH,\n                style: style,\n                initialParsedStyle: {\n                    miterLimit: 4,\n                    d: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, EMPTY_PARSED_PATH)\n                }\n            }, rest)\n        ]);\n        _this.markerStartAngle = 0;\n        _this.markerEndAngle = 0;\n        /**\n     * markers placed at the mid\n     */ _this.markerMidList = [];\n        var _this$parsedStyle = _this.parsedStyle, markerStart = _this$parsedStyle.markerStart, markerEnd = _this$parsedStyle.markerEnd, markerMid = _this$parsedStyle.markerMid;\n        if (markerStart && isDisplayObject(markerStart)) {\n            _this.markerStartAngle = markerStart.getLocalEulerAngles();\n            _this.appendChild(markerStart);\n        }\n        if (markerMid && isDisplayObject(markerMid)) {\n            _this.placeMarkerMid(markerMid);\n        }\n        if (markerEnd && isDisplayObject(markerEnd)) {\n            _this.markerEndAngle = markerEnd.getLocalEulerAngles();\n            _this.appendChild(markerEnd);\n        }\n        _this.transformMarker(true);\n        _this.transformMarker(false);\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Path, _DisplayObject);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Path, [\n        {\n            key: \"attributeChangedCallback\",\n            value: function attributeChangedCallback(attrName, oldValue, newValue, prevParsedValue, newParsedValue) {\n                if (attrName === \"d\") {\n                    // recalc markers\n                    this.transformMarker(true);\n                    this.transformMarker(false);\n                    this.placeMarkerMid(this.parsedStyle.markerMid);\n                } else if (attrName === \"markerStartOffset\" || attrName === \"markerEndOffset\") {\n                    this.transformMarker(true);\n                    this.transformMarker(false);\n                } else if (attrName === \"markerStart\") {\n                    if (prevParsedValue && isDisplayObject(prevParsedValue)) {\n                        this.markerStartAngle = 0;\n                        prevParsedValue.remove();\n                    }\n                    // CSSKeyword 'unset'\n                    if (newParsedValue && isDisplayObject(newParsedValue)) {\n                        this.markerStartAngle = newParsedValue.getLocalEulerAngles();\n                        this.appendChild(newParsedValue);\n                        this.transformMarker(true);\n                    }\n                } else if (attrName === \"markerEnd\") {\n                    if (prevParsedValue && isDisplayObject(prevParsedValue)) {\n                        this.markerEndAngle = 0;\n                        prevParsedValue.remove();\n                    }\n                    if (newParsedValue && isDisplayObject(newParsedValue)) {\n                        this.markerEndAngle = newParsedValue.getLocalEulerAngles();\n                        this.appendChild(newParsedValue);\n                        this.transformMarker(false);\n                    }\n                } else if (attrName === \"markerMid\") {\n                    this.placeMarkerMid(newParsedValue);\n                }\n            }\n        },\n        {\n            key: \"transformMarker\",\n            value: function transformMarker(isStart) {\n                var _this$parsedStyle2 = this.parsedStyle, markerStart = _this$parsedStyle2.markerStart, markerEnd = _this$parsedStyle2.markerEnd, markerStartOffset = _this$parsedStyle2.markerStartOffset, markerEndOffset = _this$parsedStyle2.markerEndOffset;\n                var marker = isStart ? markerStart : markerEnd;\n                if (!marker || !isDisplayObject(marker)) {\n                    return;\n                }\n                var rad = 0;\n                var x;\n                var y;\n                var ox;\n                var oy;\n                var offset;\n                var originalAngle;\n                if (isStart) {\n                    var _this$getStartTangent = this.getStartTangent(), _this$getStartTangent2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_this$getStartTangent, 2), p1 = _this$getStartTangent2[0], p2 = _this$getStartTangent2[1];\n                    ox = p2[0];\n                    oy = p2[1];\n                    x = p1[0] - p2[0];\n                    y = p1[1] - p2[1];\n                    offset = markerStartOffset || 0;\n                    originalAngle = this.markerStartAngle;\n                } else {\n                    var _this$getEndTangent = this.getEndTangent(), _this$getEndTangent2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_this$getEndTangent, 2), _p = _this$getEndTangent2[0], _p2 = _this$getEndTangent2[1];\n                    ox = _p2[0];\n                    oy = _p2[1];\n                    x = _p[0] - _p2[0];\n                    y = _p[1] - _p2[1];\n                    offset = markerEndOffset || 0;\n                    originalAngle = this.markerEndAngle;\n                }\n                rad = Math.atan2(y, x);\n                // account for markerOffset\n                marker.setLocalEulerAngles(rad * 180 / Math.PI + originalAngle);\n                marker.setLocalPosition(ox + Math.cos(rad) * offset, oy + Math.sin(rad) * offset);\n            }\n        },\n        {\n            key: \"placeMarkerMid\",\n            value: function placeMarkerMid(marker) {\n                var segments = this.parsedStyle.d.segments;\n                // clear all existed markers\n                this.markerMidList.forEach(function(marker) {\n                    marker.remove();\n                });\n                if (marker && isDisplayObject(marker)) {\n                    for(var i = 1; i < segments.length - 1; i++){\n                        var _segments$i$currentPo = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(segments[i].currentPoint, 2), ox = _segments$i$currentPo[0], oy = _segments$i$currentPo[1];\n                        var cloned = i === 1 ? marker : marker.cloneNode(true);\n                        this.markerMidList.push(cloned);\n                        this.appendChild(cloned);\n                        cloned.setLocalPosition(ox, oy);\n                    // TODO: orient of marker\n                    }\n                }\n            }\n        },\n        {\n            key: \"getTotalLength\",\n            value: function getTotalLength() {\n                return getOrCalculatePathTotalLength(this);\n            }\n        },\n        {\n            key: \"getPointAtLength\",\n            value: function getPointAtLength$1(distance) {\n                var inWorldSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                var absolutePath = this.parsedStyle.d.absolutePath;\n                var _getPointAtLength2 = (0,_antv_util__WEBPACK_IMPORTED_MODULE_44__.getPointAtLength)(absolutePath, distance), x = _getPointAtLength2.x, y = _getPointAtLength2.y;\n                var transformed = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create(), gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(x, y, 0), inWorldSpace ? this.getWorldTransform() : this.getLocalTransform());\n                // apply local transformation\n                return new Point(transformed[0], transformed[1]);\n            }\n        },\n        {\n            key: \"getPoint\",\n            value: function getPoint(ratio) {\n                var inWorldSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                return this.getPointAtLength(ratio * getOrCalculatePathTotalLength(this), inWorldSpace);\n            }\n        },\n        {\n            key: \"getStartTangent\",\n            value: function getStartTangent() {\n                var segments = this.parsedStyle.d.segments;\n                var result = [];\n                if (segments.length > 1) {\n                    var startPoint = segments[0].currentPoint;\n                    var endPoint = segments[1].currentPoint;\n                    var tangent = segments[1].startTangent;\n                    result = [];\n                    if (tangent) {\n                        result.push([\n                            startPoint[0] - tangent[0],\n                            startPoint[1] - tangent[1]\n                        ]);\n                        result.push([\n                            startPoint[0],\n                            startPoint[1]\n                        ]);\n                    } else {\n                        result.push([\n                            endPoint[0],\n                            endPoint[1]\n                        ]);\n                        result.push([\n                            startPoint[0],\n                            startPoint[1]\n                        ]);\n                    }\n                }\n                return result;\n            }\n        },\n        {\n            key: \"getEndTangent\",\n            value: function getEndTangent() {\n                var segments = this.parsedStyle.d.segments;\n                var length = segments.length;\n                var result = [];\n                if (length > 1) {\n                    var startPoint = segments[length - 2].currentPoint;\n                    var endPoint = segments[length - 1].currentPoint;\n                    var tangent = segments[length - 1].endTangent;\n                    result = [];\n                    if (tangent) {\n                        result.push([\n                            endPoint[0] - tangent[0],\n                            endPoint[1] - tangent[1]\n                        ]);\n                        result.push([\n                            endPoint[0],\n                            endPoint[1]\n                        ]);\n                    } else {\n                        result.push([\n                            startPoint[0],\n                            startPoint[1]\n                        ]);\n                        result.push([\n                            endPoint[0],\n                            endPoint[1]\n                        ]);\n                    }\n                }\n                return result;\n            }\n        }\n    ]);\n}(DisplayObject);\nPath.PARSED_STYLE_LIST = new Set([].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(DisplayObject.PARSED_STYLE_LIST), [\n    \"d\",\n    \"markerStart\",\n    \"markerMid\",\n    \"markerEnd\",\n    \"markerStartOffset\",\n    \"markerEndOffset\",\n    \"isBillboard\",\n    \"isSizeAttenuation\"\n]));\nvar _excluded$2 = [\n    \"style\"\n];\nvar Polygon = /*#__PURE__*/ function(_DisplayObject) {\n    function Polygon() {\n        var _this;\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, style = _ref.style, rest = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_15___default()(_ref, _excluded$2);\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Polygon);\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, Polygon, [\n            _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                type: Shape.POLYGON,\n                style: style,\n                initialParsedStyle: {\n                    points: {\n                        points: [],\n                        totalLength: 0,\n                        segments: []\n                    },\n                    miterLimit: 4,\n                    isClosed: true\n                }\n            }, rest)\n        ]);\n        _this.markerStartAngle = 0;\n        _this.markerEndAngle = 0;\n        /**\n     * markers placed at the mid\n     */ _this.markerMidList = [];\n        var _this$parsedStyle = _this.parsedStyle, markerStart = _this$parsedStyle.markerStart, markerEnd = _this$parsedStyle.markerEnd, markerMid = _this$parsedStyle.markerMid;\n        if (markerStart && isDisplayObject(markerStart)) {\n            _this.markerStartAngle = markerStart.getLocalEulerAngles();\n            _this.appendChild(markerStart);\n        }\n        if (markerMid && isDisplayObject(markerMid)) {\n            _this.placeMarkerMid(markerMid);\n        }\n        if (markerEnd && isDisplayObject(markerEnd)) {\n            _this.markerEndAngle = markerEnd.getLocalEulerAngles();\n            _this.appendChild(markerEnd);\n        }\n        _this.transformMarker(true);\n        _this.transformMarker(false);\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Polygon, _DisplayObject);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Polygon, [\n        {\n            key: \"attributeChangedCallback\",\n            value: function attributeChangedCallback(attrName, oldValue, newValue, prevParsedValue, newParsedValue) {\n                if (attrName === \"points\") {\n                    // recalc markers\n                    this.transformMarker(true);\n                    this.transformMarker(false);\n                    this.placeMarkerMid(this.parsedStyle.markerMid);\n                } else if (attrName === \"markerStartOffset\" || attrName === \"markerEndOffset\") {\n                    this.transformMarker(true);\n                    this.transformMarker(false);\n                } else if (attrName === \"markerStart\") {\n                    if (prevParsedValue && isDisplayObject(prevParsedValue)) {\n                        this.markerStartAngle = 0;\n                        prevParsedValue.remove();\n                    }\n                    // CSSKeyword 'unset'\n                    if (newParsedValue && isDisplayObject(newParsedValue)) {\n                        this.markerStartAngle = newParsedValue.getLocalEulerAngles();\n                        this.appendChild(newParsedValue);\n                        this.transformMarker(true);\n                    }\n                } else if (attrName === \"markerEnd\") {\n                    if (prevParsedValue && isDisplayObject(prevParsedValue)) {\n                        this.markerEndAngle = 0;\n                        prevParsedValue.remove();\n                    }\n                    if (newParsedValue && isDisplayObject(newParsedValue)) {\n                        this.markerEndAngle = newParsedValue.getLocalEulerAngles();\n                        this.appendChild(newParsedValue);\n                        this.transformMarker(false);\n                    }\n                } else if (attrName === \"markerMid\") {\n                    this.placeMarkerMid(newParsedValue);\n                }\n            }\n        },\n        {\n            key: \"transformMarker\",\n            value: function transformMarker(isStart) {\n                var _this$parsedStyle2 = this.parsedStyle, markerStart = _this$parsedStyle2.markerStart, markerEnd = _this$parsedStyle2.markerEnd, markerStartOffset = _this$parsedStyle2.markerStartOffset, markerEndOffset = _this$parsedStyle2.markerEndOffset, P = _this$parsedStyle2.points;\n                var _ref2 = P || {}, points = _ref2.points;\n                var marker = isStart ? markerStart : markerEnd;\n                if (!marker || !isDisplayObject(marker) || !points) {\n                    return;\n                }\n                var rad = 0;\n                var x;\n                var y;\n                var ox;\n                var oy;\n                var offset;\n                var originalAngle;\n                ox = points[0][0];\n                oy = points[0][1];\n                if (isStart) {\n                    x = points[1][0] - points[0][0];\n                    y = points[1][1] - points[0][1];\n                    offset = markerStartOffset || 0;\n                    originalAngle = this.markerStartAngle;\n                } else {\n                    var length = points.length;\n                    if (!this.parsedStyle.isClosed) {\n                        ox = points[length - 1][0];\n                        oy = points[length - 1][1];\n                        x = points[length - 2][0] - points[length - 1][0];\n                        y = points[length - 2][1] - points[length - 1][1];\n                    } else {\n                        x = points[length - 1][0] - points[0][0];\n                        y = points[length - 1][1] - points[0][1];\n                    }\n                    offset = markerEndOffset || 0;\n                    originalAngle = this.markerEndAngle;\n                }\n                rad = Math.atan2(y, x);\n                // account for markerOffset\n                marker.setLocalEulerAngles(rad * 180 / Math.PI + originalAngle);\n                marker.setLocalPosition(ox + Math.cos(rad) * offset, oy + Math.sin(rad) * offset);\n            }\n        },\n        {\n            key: \"placeMarkerMid\",\n            value: function placeMarkerMid(marker) {\n                var P = this.parsedStyle.points;\n                var _ref3 = P || {}, points = _ref3.points;\n                // clear all existed markers\n                this.markerMidList.forEach(function(marker) {\n                    marker.remove();\n                });\n                this.markerMidList = [];\n                if (marker && isDisplayObject(marker) && points) {\n                    for(var i = 1; i < (this.parsedStyle.isClosed ? points.length : points.length - 1); i++){\n                        var ox = points[i][0];\n                        var oy = points[i][1];\n                        var cloned = i === 1 ? marker : marker.cloneNode(true);\n                        this.markerMidList.push(cloned);\n                        this.appendChild(cloned);\n                        cloned.setLocalPosition(ox, oy);\n                    // TODO: orient of marker\n                    }\n                }\n            }\n        }\n    ]);\n}(DisplayObject);\nPolygon.PARSED_STYLE_LIST = new Set([].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(DisplayObject.PARSED_STYLE_LIST), [\n    \"points\",\n    \"markerStart\",\n    \"markerMid\",\n    \"markerEnd\",\n    \"markerStartOffset\",\n    \"markerEndOffset\",\n    \"isClosed\",\n    \"isBillboard\",\n    \"isSizeAttenuation\"\n]));\nvar _excluded$1 = [\n    \"style\"\n];\n/**\n * Polyline inherits the marker-related capabilities of Polygon.\n */ var Polyline = /*#__PURE__*/ function(_Polygon) {\n    function Polyline() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, style = _ref.style, rest = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_15___default()(_ref, _excluded$1);\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Polyline);\n        return _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, Polyline, [\n            _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                type: Shape.POLYLINE,\n                style: style,\n                initialParsedStyle: {\n                    points: {\n                        points: [],\n                        totalLength: 0,\n                        segments: []\n                    },\n                    miterLimit: 4,\n                    isClosed: false\n                }\n            }, rest)\n        ]);\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Polyline, _Polygon);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Polyline, [\n        {\n            key: \"getTotalLength\",\n            value: function getTotalLength() {\n                return getOrCalculatePolylineTotalLength(this);\n            }\n        },\n        {\n            key: \"getPointAtLength\",\n            value: function getPointAtLength(distance) {\n                var inWorldSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                return this.getPoint(distance / this.getTotalLength(), inWorldSpace);\n            }\n        },\n        {\n            key: \"getPoint\",\n            value: function getPoint(ratio) {\n                var inWorldSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                var points = this.parsedStyle.points.points;\n                if (this.parsedStyle.points.segments.length === 0) {\n                    var segments = [];\n                    var tempLength = 0;\n                    var segmentT;\n                    var segmentL;\n                    var totalLength = this.getTotalLength();\n                    points.forEach(function(p, i) {\n                        if (points[i + 1]) {\n                            segmentT = [\n                                0,\n                                0\n                            ];\n                            segmentT[0] = tempLength / totalLength;\n                            segmentL = (0,_antv_g_math__WEBPACK_IMPORTED_MODULE_11__.lineLength)(p[0], p[1], points[i + 1][0], points[i + 1][1]);\n                            tempLength += segmentL;\n                            segmentT[1] = tempLength / totalLength;\n                            segments.push(segmentT);\n                        }\n                    });\n                    this.parsedStyle.points.segments = segments;\n                }\n                var subt = 0;\n                var index = 0;\n                this.parsedStyle.points.segments.forEach(function(v, i) {\n                    if (ratio >= v[0] && ratio <= v[1]) {\n                        subt = (ratio - v[0]) / (v[1] - v[0]);\n                        index = i;\n                    }\n                });\n                var _linePointAt = (0,_antv_g_math__WEBPACK_IMPORTED_MODULE_11__.linePointAt)(points[index][0], points[index][1], points[index + 1][0], points[index + 1][1], subt), x = _linePointAt.x, y = _linePointAt.y;\n                var transformed = gl_matrix__WEBPACK_IMPORTED_MODULE_16__.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_16__.create(), gl_matrix__WEBPACK_IMPORTED_MODULE_16__.fromValues(x, y, 0), inWorldSpace ? this.getWorldTransform() : this.getLocalTransform());\n                // apply local transformation\n                return new Point(transformed[0], transformed[1]);\n            }\n        },\n        {\n            key: \"getStartTangent\",\n            value: function getStartTangent() {\n                var points = this.parsedStyle.points.points;\n                var result = [];\n                result.push([\n                    points[1][0],\n                    points[1][1]\n                ]);\n                result.push([\n                    points[0][0],\n                    points[0][1]\n                ]);\n                return result;\n            }\n        },\n        {\n            key: \"getEndTangent\",\n            value: function getEndTangent() {\n                var points = this.parsedStyle.points.points;\n                var l = points.length - 1;\n                var result = [];\n                result.push([\n                    points[l - 1][0],\n                    points[l - 1][1]\n                ]);\n                result.push([\n                    points[l][0],\n                    points[l][1]\n                ]);\n                return result;\n            }\n        }\n    ]);\n}(Polygon);\nPolyline.PARSED_STYLE_LIST = new Set([].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(Polygon.PARSED_STYLE_LIST), [\n    \"points\",\n    \"markerStart\",\n    \"markerMid\",\n    \"markerEnd\",\n    \"markerStartOffset\",\n    \"markerEndOffset\",\n    \"isBillboard\"\n]));\nvar Rect = /*#__PURE__*/ function(_DisplayObject) {\n    function Rect() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Rect);\n        return _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, Rect, [\n            _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                type: Shape.RECT\n            }, options)\n        ]);\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Rect, _DisplayObject);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Rect);\n}(DisplayObject);\nRect.PARSED_STYLE_LIST = new Set([].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(DisplayObject.PARSED_STYLE_LIST), [\n    \"x\",\n    \"y\",\n    \"z\",\n    \"width\",\n    \"height\",\n    \"isBillboard\",\n    \"isSizeAttenuation\",\n    \"radius\"\n]));\nvar _excluded = [\n    \"style\"\n];\n/**\n * <text> @see https://developer.mozilla.org/en-US/docs/Web/API/SVGTextElement\n */ var Text = /*#__PURE__*/ function(_DisplayObject) {\n    /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/SVGTextContentElement#constants\n   */ // LENGTHADJUST_SPACING: number = 1;\n    // LENGTHADJUST_SPACINGANDGLYPHS: number = 2;\n    // LENGTHADJUST_UNKNOWN: number = 0;\n    function Text() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, style = _ref.style, rest = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_15___default()(_ref, _excluded);\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Text);\n        return _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, Text, [\n            _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                type: Shape.TEXT,\n                style: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                    fill: \"black\"\n                }, style)\n            }, rest)\n        ]);\n    }\n    /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/SVGTextContentElement\n   */ _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Text, _DisplayObject);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Text, [\n        {\n            key: \"getComputedTextLength\",\n            value: function getComputedTextLength() {\n                var _this$parsedStyle$met;\n                this.getGeometryBounds();\n                return ((_this$parsedStyle$met = this.parsedStyle.metrics) === null || _this$parsedStyle$met === void 0 ? void 0 : _this$parsedStyle$met.maxLineWidth) || 0;\n            }\n        },\n        {\n            key: \"getLineBoundingRects\",\n            value: function getLineBoundingRects() {\n                var _this$parsedStyle$met2;\n                this.getGeometryBounds();\n                return ((_this$parsedStyle$met2 = this.parsedStyle.metrics) === null || _this$parsedStyle$met2 === void 0 ? void 0 : _this$parsedStyle$met2.lineMetrics) || [];\n            }\n        },\n        {\n            key: \"isOverflowing\",\n            value: function isOverflowing() {\n                this.getGeometryBounds();\n                return !!this.parsedStyle.isOverflowing;\n            }\n        }\n    ]);\n}(DisplayObject);\nText.PARSED_STYLE_LIST = new Set([].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(DisplayObject.PARSED_STYLE_LIST), [\n    \"x\",\n    \"y\",\n    \"z\",\n    \"isBillboard\",\n    \"billboardRotation\",\n    \"isSizeAttenuation\",\n    \"text\",\n    \"textAlign\",\n    \"textBaseline\",\n    \"fontStyle\",\n    \"fontSize\",\n    \"fontFamily\",\n    \"fontWeight\",\n    \"fontVariant\",\n    \"lineHeight\",\n    \"letterSpacing\",\n    \"leading\",\n    \"wordWrap\",\n    \"wordWrapWidth\",\n    \"maxLines\",\n    \"textOverflow\",\n    \"isOverflowing\",\n    \"textPath\",\n    \"textDecorationLine\",\n    \"textDecorationColor\",\n    \"textDecorationStyle\",\n    \"textPathSide\",\n    \"textPathStartOffset\",\n    \"metrics\",\n    \"dx\",\n    \"dy\"\n]));\n/**\n * canvas.customElements\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry\n */ var CustomElementRegistry = /*#__PURE__*/ function() {\n    function CustomElementRegistry() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CustomElementRegistry);\n        this.registry = {};\n        this.define(Shape.CIRCLE, Circle);\n        this.define(Shape.ELLIPSE, Ellipse);\n        this.define(Shape.RECT, Rect);\n        this.define(Shape.IMAGE, Image);\n        this.define(Shape.LINE, Line);\n        this.define(Shape.GROUP, Group);\n        this.define(Shape.PATH, Path);\n        this.define(Shape.POLYGON, Polygon);\n        this.define(Shape.POLYLINE, Polyline);\n        this.define(Shape.TEXT, Text);\n        this.define(Shape.HTML, HTML);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CustomElementRegistry, [\n        {\n            key: \"define\",\n            value: function define(name, constructor) {\n                this.registry[name] = constructor;\n            }\n        },\n        {\n            key: \"get\",\n            value: function get(name) {\n                return this.registry[name];\n            }\n        }\n    ]);\n}();\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CSS/RegisterProperty#parameters\n */ /**\n * holds useful CSS-related methods.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CSS\n *\n * * CSS Typed OM @see https://developer.mozilla.org/en-US/docs/Web/API/CSS/factory_functions\n * * register property @see https://developer.mozilla.org/en-US/docs/Web/API/CSS/RegisterProperty\n * * CSS Layout API\n */ var CSS = {\n    /**\n   * <number>\n   * @see https://drafts.csswg.org/css-values-4/#number-value\n   */ number: function number(n) {\n        return new CSSUnitValue(n);\n    },\n    /**\n   * <percentage>\n   * @see https://drafts.csswg.org/css-values-4/#percentage-value\n   */ percent: function percent(n) {\n        return new CSSUnitValue(n, \"%\");\n    },\n    /**\n   * <length>\n   */ px: function px(n) {\n        return new CSSUnitValue(n, \"px\");\n    },\n    /**\n   * <length>\n   */ em: function em(n) {\n        return new CSSUnitValue(n, \"em\");\n    },\n    rem: function rem(n) {\n        return new CSSUnitValue(n, \"rem\");\n    },\n    /**\n   * <angle>\n   */ deg: function deg(n) {\n        return new CSSUnitValue(n, \"deg\");\n    },\n    /**\n   * <angle>\n   */ grad: function grad(n) {\n        return new CSSUnitValue(n, \"grad\");\n    },\n    /**\n   * <angle>\n   */ rad: function rad(n) {\n        return new CSSUnitValue(n, \"rad\");\n    },\n    /**\n   * <angle>\n   */ turn: function turn(n) {\n        return new CSSUnitValue(n, \"turn\");\n    },\n    /**\n   * <time>\n   */ s: function s(n) {\n        return new CSSUnitValue(n, \"s\");\n    },\n    /**\n   * <time>\n   */ ms: function ms(n) {\n        return new CSSUnitValue(n, \"ms\");\n    },\n    /**\n   * CSS Properties & Values API\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/CSS_Properties_and_Values_API\n   * @see https://drafts.css-houdini.org/css-properties-values-api/#registering-custom-properties\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/CSS/RegisterProperty\n   */ registerProperty: function registerProperty(definition) {\n        var name = definition.name, inherits = definition.inherits, interpolable = definition.interpolable, initialValue = definition.initialValue, syntax = definition.syntax;\n        runtime.styleValueRegistry.registerMetadata({\n            n: name,\n            inh: inherits,\n            \"int\": interpolable,\n            d: initialValue,\n            syntax: syntax\n        });\n    },\n    /**\n   * CSS Layout API\n   * register layout\n   *\n   * @see https://github.com/w3c/css-houdini-drafts/blob/main/css-layout-api/EXPLAINER.md\n   * @see https://developer.mozilla.org/en-US/docs/Web/Guide/Houdini#css_layout_api\n   */ registerLayout: function registerLayout(name, clazz) {\n        runtime.layoutRegistry.registerLayout(name, clazz);\n    }\n};\n/**\n * the entry of DOM tree\n * Document -> Node -> EventTarget\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Document\n */ var Document = /*#__PURE__*/ function(_Node) {\n    function Document() {\n        var _this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Document);\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, Document);\n        /**\n     * only document has defaultView, points to canvas,\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView\n     */ _this.defaultView = null;\n        _this.ownerDocument = null;\n        _this.nodeName = \"document\";\n        // create timeline\n        try {\n            _this.timeline = new runtime.AnimationTimeline(_this);\n        } catch (_unused) {}\n        /**\n     * for inherited properties, the initial value is used on the root element only,\n     * as long as no specified value is supplied.\n     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/initial_value\n     */ var initialStyle = {};\n        BUILT_IN_PROPERTIES.forEach(function(_ref) {\n            var n = _ref.n, inh = _ref.inh, d = _ref.d;\n            if (inh && d) {\n                initialStyle[n] = (0,_antv_util__WEBPACK_IMPORTED_MODULE_41__[\"default\"])(d) ? d(Shape.GROUP) : d;\n            }\n        });\n        // like <html> in DOM tree\n        _this.documentElement = new Group({\n            id: \"g-root\",\n            style: initialStyle\n        });\n        _this.documentElement.ownerDocument = _this;\n        _this.documentElement.parentNode = _this;\n        _this.childNodes = [\n            _this.documentElement\n        ];\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Document, _Node);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Document, [\n        {\n            key: \"children\",\n            get: function get() {\n                return this.childNodes;\n            }\n        },\n        {\n            key: \"childElementCount\",\n            get: function get() {\n                return this.childNodes.length;\n            }\n        },\n        {\n            key: \"firstElementChild\",\n            get: function get() {\n                return this.firstChild;\n            }\n        },\n        {\n            key: \"lastElementChild\",\n            get: function get() {\n                return this.lastChild;\n            }\n        },\n        {\n            key: \"createElement\",\n            value: /**\n     * @example const circle = document.createElement('circle', { style: { r: 10 } });\n     */ function createElement(tagName, options) {\n                // @observablehq/plot will create <svg>\n                if (tagName === \"svg\") {\n                    return this.documentElement;\n                }\n                // d3 will use <tspan>\n                var clazz = this.defaultView.customElements.get(tagName);\n                if (!clazz) {\n                    console.warn(\"Unsupported tagName: \", tagName);\n                    clazz = tagName === \"tspan\" ? Text : Group;\n                }\n                var shape = new clazz(options);\n                shape.ownerDocument = this;\n                return shape;\n            }\n        },\n        {\n            key: \"createElementNS\",\n            value: function createElementNS(namespaceURI, tagName, options) {\n                return this.createElement(tagName, options);\n            }\n        },\n        {\n            key: \"cloneNode\",\n            value: function cloneNode(deep) {\n                throw new Error(ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function destroy() {\n                try {\n                    this.documentElement.destroyChildren();\n                    this.timeline.destroy();\n                } catch (_unused2) {}\n            }\n        },\n        {\n            key: \"elementsFromBBox\",\n            value: function elementsFromBBox(minX, minY, maxX, maxY) {\n                var rBush = this.defaultView.context.rBushRoot;\n                var rBushNodes = rBush.search({\n                    minX: minX,\n                    minY: minY,\n                    maxX: maxX,\n                    maxY: maxY\n                });\n                var hitTestList = [];\n                rBushNodes.forEach(function(_ref2) {\n                    var displayObject = _ref2.displayObject;\n                    var _displayObject$parsed = displayObject.parsedStyle.pointerEvents, pointerEvents = _displayObject$parsed === void 0 ? \"auto\" : _displayObject$parsed;\n                    // account for `visibility`\n                    // @see https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events\n                    var isVisibilityAffected = [\n                        \"auto\",\n                        \"visiblepainted\",\n                        \"visiblefill\",\n                        \"visiblestroke\",\n                        \"visible\"\n                    ].includes(pointerEvents);\n                    if ((!isVisibilityAffected || isVisibilityAffected && displayObject.isVisible()) && !displayObject.isCulled() && displayObject.isInteractive()) {\n                        hitTestList.push(displayObject);\n                    }\n                });\n                // find group with max z-index\n                hitTestList.sort(function(a, b) {\n                    return b.sortable.renderOrder - a.sortable.renderOrder;\n                });\n                return hitTestList;\n            }\n        },\n        {\n            key: \"elementFromPointSync\",\n            value: function elementFromPointSync(x, y) {\n                var _this$defaultView$can = this.defaultView.canvas2Viewport({\n                    x: x,\n                    y: y\n                }), viewportX = _this$defaultView$can.x, viewportY = _this$defaultView$can.y;\n                var _this$defaultView$get = this.defaultView.getConfig(), width = _this$defaultView$get.width, height = _this$defaultView$get.height;\n                // outside canvas' viewport\n                if (viewportX < 0 || viewportY < 0 || viewportX > width || viewportY > height) {\n                    return null;\n                }\n                var _this$defaultView$vie = this.defaultView.viewport2Client({\n                    x: viewportX,\n                    y: viewportY\n                }), clientX = _this$defaultView$vie.x, clientY = _this$defaultView$vie.y;\n                var _this$defaultView$get2 = this.defaultView.getRenderingService().hooks.pickSync.call({\n                    topmost: true,\n                    position: {\n                        x: x,\n                        y: y,\n                        viewportX: viewportX,\n                        viewportY: viewportY,\n                        clientX: clientX,\n                        clientY: clientY\n                    },\n                    picked: []\n                }), picked = _this$defaultView$get2.picked;\n                return picked && picked[0] || this.documentElement;\n            }\n        },\n        {\n            key: \"elementFromPoint\",\n            value: function() {\n                var _elementFromPoint = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_13___default()(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_12___default()().mark(function _callee(x, y) {\n                    var _this$defaultView$can2, viewportX, viewportY, _this$defaultView$get3, width, height, _this$defaultView$vie2, clientX, clientY, _yield$this$defaultVi, picked;\n                    return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_12___default()().wrap(function _callee$(_context) {\n                        while(1)switch(_context.prev = _context.next){\n                            case 0:\n                                _this$defaultView$can2 = this.defaultView.canvas2Viewport({\n                                    x: x,\n                                    y: y\n                                }), viewportX = _this$defaultView$can2.x, viewportY = _this$defaultView$can2.y;\n                                _this$defaultView$get3 = this.defaultView.getConfig(), width = _this$defaultView$get3.width, height = _this$defaultView$get3.height; // outside canvas' viewport\n                                if (!(viewportX < 0 || viewportY < 0 || viewportX > width || viewportY > height)) {\n                                    _context.next = 4;\n                                    break;\n                                }\n                                return _context.abrupt(\"return\", null);\n                            case 4:\n                                _this$defaultView$vie2 = this.defaultView.viewport2Client({\n                                    x: viewportX,\n                                    y: viewportY\n                                }), clientX = _this$defaultView$vie2.x, clientY = _this$defaultView$vie2.y;\n                                _context.next = 7;\n                                return this.defaultView.getRenderingService().hooks.pick.promise({\n                                    topmost: true,\n                                    position: {\n                                        x: x,\n                                        y: y,\n                                        viewportX: viewportX,\n                                        viewportY: viewportY,\n                                        clientX: clientX,\n                                        clientY: clientY\n                                    },\n                                    picked: []\n                                });\n                            case 7:\n                                _yield$this$defaultVi = _context.sent;\n                                picked = _yield$this$defaultVi.picked;\n                                return _context.abrupt(\"return\", picked && picked[0] || this.documentElement);\n                            case 10:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }, _callee, this);\n                }));\n                function elementFromPoint(_x, _x2) {\n                    return _elementFromPoint.apply(this, arguments);\n                }\n                return elementFromPoint;\n            }()\n        },\n        {\n            key: \"elementsFromPointSync\",\n            value: function elementsFromPointSync(x, y) {\n                var _this$defaultView$can3 = this.defaultView.canvas2Viewport({\n                    x: x,\n                    y: y\n                }), viewportX = _this$defaultView$can3.x, viewportY = _this$defaultView$can3.y;\n                var _this$defaultView$get4 = this.defaultView.getConfig(), width = _this$defaultView$get4.width, height = _this$defaultView$get4.height;\n                // outside canvas' viewport\n                if (viewportX < 0 || viewportY < 0 || viewportX > width || viewportY > height) {\n                    return [];\n                }\n                var _this$defaultView$vie3 = this.defaultView.viewport2Client({\n                    x: viewportX,\n                    y: viewportY\n                }), clientX = _this$defaultView$vie3.x, clientY = _this$defaultView$vie3.y;\n                var _this$defaultView$get5 = this.defaultView.getRenderingService().hooks.pickSync.call({\n                    topmost: false,\n                    position: {\n                        x: x,\n                        y: y,\n                        viewportX: viewportX,\n                        viewportY: viewportY,\n                        clientX: clientX,\n                        clientY: clientY\n                    },\n                    picked: []\n                }), picked = _this$defaultView$get5.picked;\n                if (picked[picked.length - 1] !== this.documentElement) {\n                    picked.push(this.documentElement);\n                }\n                return picked;\n            }\n        },\n        {\n            key: \"elementsFromPoint\",\n            value: function() {\n                var _elementsFromPoint = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_13___default()(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_12___default()().mark(function _callee2(x, y) {\n                    var _this$defaultView$can4, viewportX, viewportY, _this$defaultView$get6, width, height, _this$defaultView$vie4, clientX, clientY, _yield$this$defaultVi2, picked;\n                    return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_12___default()().wrap(function _callee2$(_context2) {\n                        while(1)switch(_context2.prev = _context2.next){\n                            case 0:\n                                _this$defaultView$can4 = this.defaultView.canvas2Viewport({\n                                    x: x,\n                                    y: y\n                                }), viewportX = _this$defaultView$can4.x, viewportY = _this$defaultView$can4.y;\n                                _this$defaultView$get6 = this.defaultView.getConfig(), width = _this$defaultView$get6.width, height = _this$defaultView$get6.height; // outside canvas' viewport\n                                if (!(viewportX < 0 || viewportY < 0 || viewportX > width || viewportY > height)) {\n                                    _context2.next = 4;\n                                    break;\n                                }\n                                return _context2.abrupt(\"return\", []);\n                            case 4:\n                                _this$defaultView$vie4 = this.defaultView.viewport2Client({\n                                    x: viewportX,\n                                    y: viewportY\n                                }), clientX = _this$defaultView$vie4.x, clientY = _this$defaultView$vie4.y;\n                                _context2.next = 7;\n                                return this.defaultView.getRenderingService().hooks.pick.promise({\n                                    topmost: false,\n                                    position: {\n                                        x: x,\n                                        y: y,\n                                        viewportX: viewportX,\n                                        viewportY: viewportY,\n                                        clientX: clientX,\n                                        clientY: clientY\n                                    },\n                                    picked: []\n                                });\n                            case 7:\n                                _yield$this$defaultVi2 = _context2.sent;\n                                picked = _yield$this$defaultVi2.picked;\n                                if (picked[picked.length - 1] !== this.documentElement) {\n                                    picked.push(this.documentElement);\n                                }\n                                return _context2.abrupt(\"return\", picked);\n                            case 11:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }, _callee2, this);\n                }));\n                function elementsFromPoint(_x3, _x4) {\n                    return _elementsFromPoint.apply(this, arguments);\n                }\n                return elementsFromPoint;\n            }()\n        },\n        {\n            key: \"appendChild\",\n            value: function appendChild(newChild, index) {\n                throw new Error(ERROR_MSG_USE_DOCUMENT_ELEMENT);\n            }\n        },\n        {\n            key: \"insertBefore\",\n            value: function insertBefore(newChild, refChild) {\n                throw new Error(ERROR_MSG_USE_DOCUMENT_ELEMENT);\n            }\n        },\n        {\n            key: \"removeChild\",\n            value: function removeChild(oldChild, destroy) {\n                throw new Error(ERROR_MSG_USE_DOCUMENT_ELEMENT);\n            }\n        },\n        {\n            key: \"replaceChild\",\n            value: function replaceChild(newChild, oldChild, destroy) {\n                throw new Error(ERROR_MSG_USE_DOCUMENT_ELEMENT);\n            }\n        },\n        {\n            key: \"append\",\n            value: function append() {\n                throw new Error(ERROR_MSG_USE_DOCUMENT_ELEMENT);\n            }\n        },\n        {\n            key: \"prepend\",\n            value: function prepend() {\n                throw new Error(ERROR_MSG_USE_DOCUMENT_ELEMENT);\n            }\n        },\n        {\n            key: \"getElementById\",\n            value: function getElementById(id) {\n                return this.documentElement.getElementById(id);\n            }\n        },\n        {\n            key: \"getElementsByName\",\n            value: function getElementsByName(name) {\n                return this.documentElement.getElementsByName(name);\n            }\n        },\n        {\n            key: \"getElementsByTagName\",\n            value: function getElementsByTagName(tagName) {\n                return this.documentElement.getElementsByTagName(tagName);\n            }\n        },\n        {\n            key: \"getElementsByClassName\",\n            value: function getElementsByClassName(className) {\n                return this.documentElement.getElementsByClassName(className);\n            }\n        },\n        {\n            key: \"querySelector\",\n            value: function querySelector(selectors) {\n                return this.documentElement.querySelector(selectors);\n            }\n        },\n        {\n            key: \"querySelectorAll\",\n            value: function querySelectorAll(selectors) {\n                return this.documentElement.querySelectorAll(selectors);\n            }\n        },\n        {\n            key: \"find\",\n            value: function find(filter) {\n                return this.documentElement.find(filter);\n            }\n        },\n        {\n            key: \"findAll\",\n            value: function findAll(filter) {\n                return this.documentElement.findAll(filter);\n            }\n        }\n    ]);\n}(Node);\n/**\n * apply following rules:\n * 1. `visibility` in scenegraph node\n * 2. other custom culling strategies, eg. frustum culling\n */ var CullingPlugin = /*#__PURE__*/ function() {\n    function CullingPlugin(strategies) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CullingPlugin);\n        this.strategies = strategies;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CullingPlugin, [\n        {\n            key: \"apply\",\n            value: function apply(context) {\n                var camera = context.camera, renderingService = context.renderingService, renderingContext = context.renderingContext;\n                var strategies = this.strategies;\n                renderingService.hooks.cull.tap(CullingPlugin.tag, function(object) {\n                    if (object) {\n                        var cullable = object.cullable;\n                        // cullable.visible = true;\n                        // const renderBounds = object.getRenderBounds();\n                        // if (AABB.isEmpty(renderBounds)) {\n                        //   cullable.visible = false;\n                        // } else {\n                        //   const isShape2D = shape2D.indexOf(object.nodeName as Shape) > -1;\n                        //   const [p0, p1, p2, p3] = camera.getFrustum().planes;\n                        //   tmpAABB.setMinMax([-p1.distance, -p3.distance, 0], [p0.distance, p2.distance, 0]);\n                        //   cullable.visible = isShape2D ? renderBounds.intersects(tmpAABB) : true;\n                        // }\n                        if (strategies.length === 0) {\n                            cullable.visible = renderingContext.unculledEntities.indexOf(object.entity) > -1;\n                        } else {\n                            // eg. implemented by g-webgl(frustum culling)\n                            cullable.visible = strategies.every(function(strategy) {\n                                return strategy.isVisible(camera, object);\n                            });\n                        }\n                        if (!object.isCulled() && object.isVisible()) {\n                            return object;\n                        }\n                        // if (this.renderingContext.renderListLastFrame.indexOf(object) > -1) {\n                        object.dispatchEvent(new CustomEvent(ElementEvent.CULLED));\n                        // }\n                        return null;\n                    }\n                    return object;\n                });\n                renderingService.hooks.afterRender.tap(CullingPlugin.tag, function(object) {\n                    object.cullable.visibilityPlaneMask = -1;\n                });\n            }\n        }\n    ]);\n}();\nCullingPlugin.tag = \"Culling\";\n/**\n * support mouse & touch events\n * @see https://github.com/pixijs/pixi.js/blob/dev/packages/interaction/README.md\n *\n * also provide some extra events such as `drag`\n */ var EventPlugin = /*#__PURE__*/ function() {\n    function EventPlugin() {\n        var _this = this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, EventPlugin);\n        this.autoPreventDefault = false;\n        this.rootPointerEvent = new FederatedPointerEvent(null);\n        this.rootWheelEvent = new FederatedWheelEvent(null);\n        this.onPointerMove = function(nativeEvent) {\n            var _this$context$renderi;\n            var canvas = (_this$context$renderi = _this.context.renderingContext.root) === null || _this$context$renderi === void 0 || (_this$context$renderi = _this$context$renderi.ownerDocument) === null || _this$context$renderi === void 0 ? void 0 : _this$context$renderi.defaultView;\n            if (canvas.supportsTouchEvents && nativeEvent.pointerType === \"touch\") return;\n            var normalizedEvents = _this.normalizeToPointerEvent(nativeEvent, canvas);\n            var _iterator = _babel_runtime_helpers_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_14___default()(normalizedEvents), _step;\n            try {\n                for(_iterator.s(); !(_step = _iterator.n()).done;){\n                    var normalizedEvent = _step.value;\n                    var event = _this.bootstrapEvent(_this.rootPointerEvent, normalizedEvent, canvas, nativeEvent);\n                    _this.context.eventService.mapEvent(event);\n                }\n            } catch (err) {\n                _iterator.e(err);\n            } finally{\n                _iterator.f();\n            }\n            _this.setCursor(_this.context.eventService.cursor);\n        };\n        this.onClick = function(nativeEvent) {\n            var _this$context$renderi2;\n            var canvas = (_this$context$renderi2 = _this.context.renderingContext.root) === null || _this$context$renderi2 === void 0 || (_this$context$renderi2 = _this$context$renderi2.ownerDocument) === null || _this$context$renderi2 === void 0 ? void 0 : _this$context$renderi2.defaultView;\n            var normalizedEvents = _this.normalizeToPointerEvent(nativeEvent, canvas);\n            var _iterator2 = _babel_runtime_helpers_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_14___default()(normalizedEvents), _step2;\n            try {\n                for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){\n                    var normalizedEvent = _step2.value;\n                    var event = _this.bootstrapEvent(_this.rootPointerEvent, normalizedEvent, canvas, nativeEvent);\n                    _this.context.eventService.mapEvent(event);\n                }\n            } catch (err) {\n                _iterator2.e(err);\n            } finally{\n                _iterator2.f();\n            }\n            _this.setCursor(_this.context.eventService.cursor);\n        };\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(EventPlugin, [\n        {\n            key: \"apply\",\n            value: function apply(context) {\n                var _this2 = this;\n                this.context = context;\n                var renderingService = context.renderingService;\n                var canvas = this.context.renderingContext.root.ownerDocument.defaultView;\n                this.context.eventService.setPickHandler(function(position) {\n                    var _this2$context$render = _this2.context.renderingService.hooks.pickSync.call({\n                        position: position,\n                        picked: [],\n                        topmost: true // we only concern the topmost element\n                    }), picked = _this2$context$render.picked;\n                    return picked[0] || null;\n                });\n                renderingService.hooks.pointerWheel.tap(EventPlugin.tag, function(nativeEvent) {\n                    var wheelEvent = _this2.normalizeWheelEvent(nativeEvent);\n                    _this2.context.eventService.mapEvent(wheelEvent);\n                });\n                renderingService.hooks.pointerDown.tap(EventPlugin.tag, function(nativeEvent) {\n                    if (canvas.supportsTouchEvents && nativeEvent.pointerType === \"touch\") return;\n                    var events = _this2.normalizeToPointerEvent(nativeEvent, canvas);\n                    if (_this2.autoPreventDefault && events[0].isNormalized) {\n                        var cancelable = nativeEvent.cancelable || !(\"cancelable\" in nativeEvent);\n                        if (cancelable) {\n                            nativeEvent.preventDefault();\n                        }\n                    }\n                    var _iterator3 = _babel_runtime_helpers_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_14___default()(events), _step3;\n                    try {\n                        for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){\n                            var event = _step3.value;\n                            var federatedEvent = _this2.bootstrapEvent(_this2.rootPointerEvent, event, canvas, nativeEvent);\n                            _this2.context.eventService.mapEvent(federatedEvent);\n                        }\n                    } catch (err) {\n                        _iterator3.e(err);\n                    } finally{\n                        _iterator3.f();\n                    }\n                    _this2.setCursor(_this2.context.eventService.cursor);\n                });\n                renderingService.hooks.pointerUp.tap(EventPlugin.tag, function(nativeEvent) {\n                    if (canvas.supportsTouchEvents && nativeEvent.pointerType === \"touch\") return;\n                    // account for element in SVG\n                    var $element = _this2.context.contextService.getDomElement();\n                    var isNativeEventFromCanvas = _this2.context.eventService.isNativeEventFromCanvas($element, nativeEvent);\n                    var outside = !isNativeEventFromCanvas ? \"outside\" : \"\";\n                    var normalizedEvents = _this2.normalizeToPointerEvent(nativeEvent, canvas);\n                    var _iterator4 = _babel_runtime_helpers_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_14___default()(normalizedEvents), _step4;\n                    try {\n                        for(_iterator4.s(); !(_step4 = _iterator4.n()).done;){\n                            var normalizedEvent = _step4.value;\n                            var event = _this2.bootstrapEvent(_this2.rootPointerEvent, normalizedEvent, canvas, nativeEvent);\n                            event.type += outside;\n                            _this2.context.eventService.mapEvent(event);\n                        }\n                    } catch (err) {\n                        _iterator4.e(err);\n                    } finally{\n                        _iterator4.f();\n                    }\n                    _this2.setCursor(_this2.context.eventService.cursor);\n                });\n                renderingService.hooks.pointerMove.tap(EventPlugin.tag, this.onPointerMove);\n                renderingService.hooks.pointerOver.tap(EventPlugin.tag, this.onPointerMove);\n                renderingService.hooks.pointerOut.tap(EventPlugin.tag, this.onPointerMove);\n                renderingService.hooks.click.tap(EventPlugin.tag, this.onClick);\n                renderingService.hooks.pointerCancel.tap(EventPlugin.tag, function(nativeEvent) {\n                    var normalizedEvents = _this2.normalizeToPointerEvent(nativeEvent, canvas);\n                    var _iterator5 = _babel_runtime_helpers_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_14___default()(normalizedEvents), _step5;\n                    try {\n                        for(_iterator5.s(); !(_step5 = _iterator5.n()).done;){\n                            var normalizedEvent = _step5.value;\n                            var event = _this2.bootstrapEvent(_this2.rootPointerEvent, normalizedEvent, canvas, nativeEvent);\n                            _this2.context.eventService.mapEvent(event);\n                        }\n                    } catch (err) {\n                        _iterator5.e(err);\n                    } finally{\n                        _iterator5.f();\n                    }\n                    _this2.setCursor(_this2.context.eventService.cursor);\n                });\n            }\n        },\n        {\n            key: \"bootstrapEvent\",\n            value: function bootstrapEvent(event, normalizedEvent, view, nativeEvent) {\n                event.view = view;\n                event.originalEvent = null;\n                event.nativeEvent = nativeEvent;\n                event.pointerId = normalizedEvent.pointerId;\n                event.width = normalizedEvent.width;\n                event.height = normalizedEvent.height;\n                event.isPrimary = normalizedEvent.isPrimary;\n                event.pointerType = normalizedEvent.pointerType;\n                event.pressure = normalizedEvent.pressure;\n                event.tangentialPressure = normalizedEvent.tangentialPressure;\n                event.tiltX = normalizedEvent.tiltX;\n                event.tiltY = normalizedEvent.tiltY;\n                event.twist = normalizedEvent.twist;\n                this.transferMouseData(event, normalizedEvent);\n                var _this$context$eventSe = this.context.eventService.client2Viewport({\n                    x: normalizedEvent.clientX,\n                    y: normalizedEvent.clientY\n                }), x = _this$context$eventSe.x, y = _this$context$eventSe.y;\n                event.viewport.x = x;\n                event.viewport.y = y;\n                var _this$context$eventSe2 = this.context.eventService.viewport2Canvas(event.viewport), canvasX = _this$context$eventSe2.x, canvasY = _this$context$eventSe2.y;\n                event.canvas.x = canvasX;\n                event.canvas.y = canvasY;\n                event.global.copyFrom(event.canvas);\n                event.offset.copyFrom(event.canvas);\n                event.isTrusted = nativeEvent.isTrusted;\n                if (event.type === \"pointerleave\") {\n                    event.type = \"pointerout\";\n                }\n                if (event.type.startsWith(\"mouse\")) {\n                    event.type = event.type.replace(\"mouse\", \"pointer\");\n                }\n                if (event.type.startsWith(\"touch\")) {\n                    event.type = TOUCH_TO_POINTER[event.type] || event.type;\n                }\n                return event;\n            }\n        },\n        {\n            key: \"normalizeWheelEvent\",\n            value: function normalizeWheelEvent(nativeEvent) {\n                var event = this.rootWheelEvent;\n                this.transferMouseData(event, nativeEvent);\n                event.deltaMode = nativeEvent.deltaMode;\n                event.deltaX = nativeEvent.deltaX;\n                event.deltaY = nativeEvent.deltaY;\n                event.deltaZ = nativeEvent.deltaZ;\n                var _this$context$eventSe3 = this.context.eventService.client2Viewport({\n                    x: nativeEvent.clientX,\n                    y: nativeEvent.clientY\n                }), x = _this$context$eventSe3.x, y = _this$context$eventSe3.y;\n                event.viewport.x = x;\n                event.viewport.y = y;\n                var _this$context$eventSe4 = this.context.eventService.viewport2Canvas(event.viewport), canvasX = _this$context$eventSe4.x, canvasY = _this$context$eventSe4.y;\n                event.canvas.x = canvasX;\n                event.canvas.y = canvasY;\n                event.global.copyFrom(event.canvas);\n                event.offset.copyFrom(event.canvas);\n                event.nativeEvent = nativeEvent;\n                event.type = nativeEvent.type;\n                return event;\n            }\n        },\n        {\n            key: \"transferMouseData\",\n            value: function transferMouseData(event, nativeEvent) {\n                event.isTrusted = nativeEvent.isTrusted;\n                event.srcElement = nativeEvent.srcElement;\n                event.timeStamp = clock.now();\n                event.type = nativeEvent.type;\n                event.altKey = nativeEvent.altKey;\n                event.metaKey = nativeEvent.metaKey;\n                event.shiftKey = nativeEvent.shiftKey;\n                event.ctrlKey = nativeEvent.ctrlKey;\n                event.button = nativeEvent.button;\n                event.buttons = nativeEvent.buttons;\n                event.client.x = nativeEvent.clientX;\n                event.client.y = nativeEvent.clientY;\n                event.movement.x = nativeEvent.movementX;\n                event.movement.y = nativeEvent.movementY;\n                event.page.x = nativeEvent.pageX;\n                event.page.y = nativeEvent.pageY;\n                event.screen.x = nativeEvent.screenX;\n                event.screen.y = nativeEvent.screenY;\n                event.relatedTarget = null;\n            }\n        },\n        {\n            key: \"setCursor\",\n            value: function setCursor(cursor) {\n                this.context.contextService.applyCursorStyle(cursor || this.context.config.cursor || \"default\");\n            }\n        },\n        {\n            key: \"normalizeToPointerEvent\",\n            value: function normalizeToPointerEvent(event, canvas) {\n                var normalizedEvents = [];\n                if (canvas.isTouchEvent(event)) {\n                    for(var i = 0; i < event.changedTouches.length; i++){\n                        var touch = event.changedTouches[i];\n                        // use changedTouches instead of touches since touchend has no touches\n                        // @see https://stackoverflow.com/a/10079076\n                        if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(touch.button)) touch.button = 0;\n                        if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(touch.buttons)) touch.buttons = 1;\n                        if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(touch.isPrimary)) {\n                            touch.isPrimary = event.touches.length === 1 && event.type === \"touchstart\";\n                        }\n                        if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(touch.width)) touch.width = touch.radiusX || 1;\n                        if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(touch.height)) touch.height = touch.radiusY || 1;\n                        if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(touch.tiltX)) touch.tiltX = 0;\n                        if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(touch.tiltY)) touch.tiltY = 0;\n                        if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(touch.pointerType)) touch.pointerType = \"touch\";\n                        // @see https://developer.mozilla.org/zh-CN/docs/Web/API/Touch/identifier\n                        if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(touch.pointerId)) touch.pointerId = touch.identifier || 0;\n                        if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(touch.pressure)) touch.pressure = touch.force || 0.5;\n                        if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(touch.twist)) touch.twist = 0;\n                        if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(touch.tangentialPressure)) touch.tangentialPressure = 0;\n                        touch.isNormalized = true;\n                        touch.type = event.type;\n                        normalizedEvents.push(touch);\n                    }\n                } else if (canvas.isMouseEvent(event)) {\n                    var tempEvent = event;\n                    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(tempEvent.isPrimary)) tempEvent.isPrimary = true;\n                    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(tempEvent.width)) tempEvent.width = 1;\n                    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(tempEvent.height)) tempEvent.height = 1;\n                    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(tempEvent.tiltX)) tempEvent.tiltX = 0;\n                    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(tempEvent.tiltY)) tempEvent.tiltY = 0;\n                    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(tempEvent.pointerType)) tempEvent.pointerType = \"mouse\";\n                    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(tempEvent.pointerId)) tempEvent.pointerId = MOUSE_POINTER_ID;\n                    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(tempEvent.pressure)) tempEvent.pressure = 0.5;\n                    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(tempEvent.twist)) tempEvent.twist = 0;\n                    if ((0,_antv_util__WEBPACK_IMPORTED_MODULE_38__[\"default\"])(tempEvent.tangentialPressure)) tempEvent.tangentialPressure = 0;\n                    tempEvent.isNormalized = true;\n                    normalizedEvents.push(tempEvent);\n                } else {\n                    normalizedEvents.push(event);\n                }\n                return normalizedEvents;\n            }\n        }\n    ]);\n}();\nEventPlugin.tag = \"Event\";\n// group is not a 2d shape\nvar shape2D = [\n    Shape.CIRCLE,\n    Shape.ELLIPSE,\n    Shape.IMAGE,\n    Shape.RECT,\n    Shape.LINE,\n    Shape.POLYLINE,\n    Shape.POLYGON,\n    Shape.TEXT,\n    Shape.PATH,\n    Shape.HTML\n];\nvar FrustumCullingStrategy = /*#__PURE__*/ function() {\n    function FrustumCullingStrategy() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, FrustumCullingStrategy);\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(FrustumCullingStrategy, [\n        {\n            key: \"isVisible\",\n            value: function isVisible(camera, object) {\n                var _object$parentNode;\n                // return true;\n                var cullable = object.cullable;\n                if (!cullable.enable) {\n                    return true;\n                }\n                var renderBounds = object.getRenderBounds();\n                if (AABB.isEmpty(renderBounds)) {\n                    return false;\n                }\n                // get VP matrix from camera\n                var frustum = camera.getFrustum();\n                var parentVisibilityPlaneMask = (_object$parentNode = object.parentNode) === null || _object$parentNode === void 0 || (_object$parentNode = _object$parentNode.cullable) === null || _object$parentNode === void 0 ? void 0 : _object$parentNode.visibilityPlaneMask;\n                cullable.visibilityPlaneMask = this.computeVisibilityWithPlaneMask(object, renderBounds, parentVisibilityPlaneMask || Mask.INDETERMINATE, frustum.planes);\n                cullable.visible = cullable.visibilityPlaneMask !== Mask.OUTSIDE;\n                return cullable.visible;\n            }\n        },\n        {\n            key: \"computeVisibilityWithPlaneMask\",\n            value: function computeVisibilityWithPlaneMask(object, aabb, parentPlaneMask, planes) {\n                if (parentPlaneMask === Mask.OUTSIDE || parentPlaneMask === Mask.INSIDE) {\n                    // 父节点完全位于视锥内或者外部，直接返回\n                    return parentPlaneMask;\n                }\n                // Start with MASK_INSIDE (all zeros) so that after the loop, the return value can be compared with MASK_INSIDE.\n                // (Because if there are fewer than 31 planes, the upper bits wont be changed.)\n                var mask = Mask.INSIDE;\n                var isShape2D = shape2D.indexOf(object.nodeName) > -1;\n                // Use viewport culling for 2D shapes\n                // @see https://github.com/antvis/g/issues/914\n                for(var k = 0, len = planes.length; k < len; ++k){\n                    // For k greater than 31 (since 31 is the maximum number of INSIDE/INTERSECTING bits we can store), skip the optimization.\n                    var flag = 1 << k;\n                    if ((parentPlaneMask & flag) === 0) {\n                        continue;\n                    }\n                    // skip near & far planes when testing 2D shapes\n                    if (isShape2D && (k === 4 || k === 5)) {\n                        continue;\n                    }\n                    // p-vertex n-vertex <-|plane p-vertex n-vertex\n                    // 使用 p-vertex 和 n-vertex 加速，避免进行平面和 aabb 全部顶点的相交检测\n                    var _planes$k = planes[k], normal = _planes$k.normal, distance = _planes$k.distance;\n                    if (gl_matrix__WEBPACK_IMPORTED_MODULE_16__.dot(normal, aabb.getPositiveFarPoint(planes[k])) + distance < 0) {\n                        return Mask.OUTSIDE;\n                    }\n                    if (gl_matrix__WEBPACK_IMPORTED_MODULE_16__.dot(normal, aabb.getNegativeFarPoint(planes[k])) + distance < 0) {\n                        // 和当前面相交，对应位置为1，继续检测下一个面\n                        mask |= flag;\n                    }\n                }\n                return mask;\n            }\n        }\n    ]);\n}();\nvar PrepareRendererPlugin = /*#__PURE__*/ function() {\n    function PrepareRendererPlugin() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, PrepareRendererPlugin);\n        this.syncTasks = new Map();\n        this.isFirstTimeRendering = true;\n        this.syncing = false;\n        this.isFirstTimeRenderingFinished = false;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(PrepareRendererPlugin, [\n        {\n            key: \"apply\",\n            value: function apply(context) {\n                var _this = this, _runtime$globalThis$r;\n                var renderingService = context.renderingService, renderingContext = context.renderingContext, rBushRoot = context.rBushRoot;\n                var canvas = renderingContext.root.ownerDocument.defaultView;\n                this.rBush = rBushRoot;\n                var handleAttributeChanged = function handleAttributeChanged(e) {\n                    var object = e.target;\n                    object.renderable.dirty = true;\n                    renderingService.dirtify();\n                };\n                var handleBoundsChanged = function handleBoundsChanged(e) {\n                    _this.syncTasks.set(e.target, e.detail.affectChildren);\n                    renderingService.dirtify();\n                };\n                var handleMounted = function handleMounted(e) {\n                    var object = e.target;\n                    if (runtime.enableSizeAttenuation) {\n                        runtime.styleValueRegistry.updateSizeAttenuation(object, canvas.getCamera().getZoom());\n                    }\n                };\n                var handleUnmounted = function handleUnmounted(e) {\n                    var object = e.target;\n                    var rBushNode = object.rBushNode;\n                    if (rBushNode.aabb) {\n                        _this.rBush.remove(rBushNode.aabb);\n                    }\n                    _this.syncTasks[\"delete\"](object);\n                    runtime.sceneGraphService.dirtifyToRoot(object);\n                    renderingService.dirtify();\n                };\n                renderingService.hooks.init.tap(PrepareRendererPlugin.tag, function() {\n                    canvas.addEventListener(ElementEvent.MOUNTED, handleMounted);\n                    canvas.addEventListener(ElementEvent.UNMOUNTED, handleUnmounted);\n                    canvas.addEventListener(ElementEvent.ATTR_MODIFIED, handleAttributeChanged);\n                    canvas.addEventListener(ElementEvent.BOUNDS_CHANGED, handleBoundsChanged);\n                });\n                renderingService.hooks.destroy.tap(PrepareRendererPlugin.tag, function() {\n                    canvas.removeEventListener(ElementEvent.MOUNTED, handleMounted);\n                    canvas.removeEventListener(ElementEvent.UNMOUNTED, handleUnmounted);\n                    canvas.removeEventListener(ElementEvent.ATTR_MODIFIED, handleAttributeChanged);\n                    canvas.removeEventListener(ElementEvent.BOUNDS_CHANGED, handleBoundsChanged);\n                    _this.syncTasks.clear();\n                });\n                var ric = (_runtime$globalThis$r = runtime.globalThis.requestIdleCallback) !== null && _runtime$globalThis$r !== void 0 ? _runtime$globalThis$r : raf.bind(runtime.globalThis);\n                renderingService.hooks.endFrame.tap(PrepareRendererPlugin.tag, function() {\n                    if (_this.isFirstTimeRendering) {\n                        _this.isFirstTimeRendering = false;\n                        _this.syncing = true;\n                        ric(function() {\n                            _this.syncRTree(true);\n                            _this.isFirstTimeRenderingFinished = true;\n                        });\n                    } else {\n                        _this.syncRTree();\n                    }\n                });\n            }\n        },\n        {\n            key: \"syncNode\",\n            value: function syncNode(node) {\n                var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                if (!node.isConnected) return;\n                var rBushNode = node.rBushNode;\n                // clear dirty node\n                if (rBushNode.aabb) this.rBush.remove(rBushNode.aabb);\n                var renderBounds = node.getRenderBounds();\n                if (renderBounds) {\n                    var renderable = node.renderable;\n                    if (force) {\n                        if (!renderable.dirtyRenderBounds) {\n                            renderable.dirtyRenderBounds = new AABB();\n                        }\n                        // save last dirty aabb\n                        renderable.dirtyRenderBounds.update(renderBounds.center, renderBounds.halfExtents);\n                    }\n                    var _renderBounds$getMin = renderBounds.getMin(), _renderBounds$getMin2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_renderBounds$getMin, 2), minX = _renderBounds$getMin2[0], minY = _renderBounds$getMin2[1];\n                    var _renderBounds$getMax = renderBounds.getMax(), _renderBounds$getMax2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_renderBounds$getMax, 2), maxX = _renderBounds$getMax2[0], maxY = _renderBounds$getMax2[1];\n                    if (!rBushNode.aabb) {\n                        rBushNode.aabb = {};\n                    }\n                    rBushNode.aabb.displayObject = node;\n                    rBushNode.aabb.minX = minX;\n                    rBushNode.aabb.minY = minY;\n                    rBushNode.aabb.maxX = maxX;\n                    rBushNode.aabb.maxY = maxY;\n                }\n                if (rBushNode.aabb) {\n                    // TODO: NaN occurs when width/height of Rect is 0\n                    if (!isNaN(rBushNode.aabb.maxX) && !isNaN(rBushNode.aabb.maxX) && !isNaN(rBushNode.aabb.minX) && !isNaN(rBushNode.aabb.minY)) {\n                        return rBushNode.aabb;\n                    }\n                }\n            }\n        },\n        {\n            key: \"syncRTree\",\n            value: function syncRTree() {\n                var _this2 = this;\n                var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n                if (!force && (this.syncing || this.syncTasks.size === 0)) {\n                    return;\n                }\n                this.syncing = true;\n                // bounds changed, need re-inserting its children\n                var bulk = [];\n                var synced = new Set();\n                var sync = function sync(node) {\n                    if (!synced.has(node) && node.renderable) {\n                        var aabb = _this2.syncNode(node, force);\n                        if (aabb) {\n                            bulk.push(aabb);\n                            synced.add(node);\n                        }\n                    }\n                };\n                this.syncTasks.forEach(function(affectChildren, node) {\n                    if (affectChildren) {\n                        node.forEach(sync);\n                    }\n                    var parent = node;\n                    while(parent){\n                        sync(parent);\n                        parent = parent.parentElement;\n                    }\n                });\n                // use bulk inserting, which is ~2-3 times faster\n                // @see https://github.com/mourner/rbush#bulk-inserting-data\n                this.rBush.load(bulk);\n                bulk.length = 0;\n                this.syncing = false;\n            }\n        }\n    ]);\n}();\nPrepareRendererPlugin.tag = \"Prepare\";\nfunction isCanvas(value) {\n    return !!value.document;\n}\nvar CanvasEvent = /*#__PURE__*/ function(CanvasEvent) {\n    CanvasEvent[\"READY\"] = \"ready\";\n    CanvasEvent[\"BEFORE_RENDER\"] = \"beforerender\";\n    CanvasEvent[\"RERENDER\"] = \"rerender\";\n    CanvasEvent[\"AFTER_RENDER\"] = \"afterrender\";\n    CanvasEvent[\"BEFORE_DESTROY\"] = \"beforedestroy\";\n    CanvasEvent[\"AFTER_DESTROY\"] = \"afterdestroy\";\n    CanvasEvent[\"RESIZE\"] = \"resize\";\n    CanvasEvent[\"DIRTY_RECTANGLE\"] = \"dirtyrectangle\";\n    CanvasEvent[\"RENDERER_CHANGED\"] = \"rendererchanged\";\n    return CanvasEvent;\n}({});\nvar DEFAULT_CAMERA_Z = 500;\nvar DEFAULT_CAMERA_NEAR = 0.1;\nvar DEFAULT_CAMERA_FAR = 1000;\n/**\n * reuse custom event preventing from re-create them in every frame\n */ var mountedEvent = new CustomEvent(ElementEvent.MOUNTED);\nvar unmountedEvent = new CustomEvent(ElementEvent.UNMOUNTED);\nvar beforeRenderEvent = new CustomEvent(CanvasEvent.BEFORE_RENDER);\nvar rerenderEvent = new CustomEvent(CanvasEvent.RERENDER);\nvar afterRenderEvent = new CustomEvent(CanvasEvent.AFTER_RENDER);\n/**\n * can be treated like Window in DOM\n * provide some extra methods like `window`, such as:\n * * `window.requestAnimationFrame`\n * * `window.devicePixelRatio`\n *\n * prototype chains: Canvas(Window) -> EventTarget\n *\n * @docs https://g.antv.antgroup.com/api/canvas/intro\n */ var Canvas = /*#__PURE__*/ function(_EventTarget) {\n    function Canvas(config) {\n        var _this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Canvas);\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, Canvas);\n        // #region environment\n        /**\n     * window.document\n     */ /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element\n     */ _this.Element = DisplayObject;\n        _this.inited = false;\n        _this.context = {};\n        var container = config.container, canvas = config.canvas, renderer = config.renderer, width = config.width, height = config.height, background = config.background, cursor = config.cursor, supportsMutipleCanvasesInOneContainer = config.supportsMutipleCanvasesInOneContainer, _config$cleanUpOnDest = config.cleanUpOnDestroy, cleanUpOnDestroy = _config$cleanUpOnDest === void 0 ? true : _config$cleanUpOnDest, offscreenCanvas = config.offscreenCanvas, devicePixelRatio = config.devicePixelRatio, requestAnimationFrame = config.requestAnimationFrame, cancelAnimationFrame = config.cancelAnimationFrame, createImage = config.createImage, supportsTouchEvents = config.supportsTouchEvents, supportsPointerEvents = config.supportsPointerEvents, isTouchEvent = config.isTouchEvent, isMouseEvent = config.isMouseEvent, dblClickSpeed = config.dblClickSpeed;\n        var canvasWidth = width;\n        var canvasHeight = height;\n        var dpr = devicePixelRatio || isBrowser && window.devicePixelRatio || 1;\n        dpr = dpr >= 1 ? Math.ceil(dpr) : 1;\n        // use user-defined <canvas> or OffscreenCanvas\n        if (canvas) {\n            // infer width & height with dpr\n            canvasWidth = width || getWidth(canvas) || canvas.width / dpr;\n            canvasHeight = height || getHeight(canvas) || canvas.height / dpr;\n        }\n        /**\n     * implements `Window` interface\n     */ _this.customElements = new CustomElementRegistry();\n        _this.devicePixelRatio = dpr;\n        _this.requestAnimationFrame = requestAnimationFrame !== null && requestAnimationFrame !== void 0 ? requestAnimationFrame : raf.bind(runtime.globalThis);\n        _this.cancelAnimationFrame = cancelAnimationFrame !== null && cancelAnimationFrame !== void 0 ? cancelAnimationFrame : caf.bind(runtime.globalThis);\n        // the following feature-detect from hammer.js\n        // @see https://github.com/hammerjs/hammer.js/blob/master/src/inputjs/input-consts.js#L5\n        _this.supportsTouchEvents = supportsTouchEvents !== null && supportsTouchEvents !== void 0 ? supportsTouchEvents : \"ontouchstart\" in runtime.globalThis;\n        _this.supportsPointerEvents = supportsPointerEvents !== null && supportsPointerEvents !== void 0 ? supportsPointerEvents : !!runtime.globalThis.PointerEvent;\n        _this.isTouchEvent = isTouchEvent !== null && isTouchEvent !== void 0 ? isTouchEvent : function(event) {\n            return _this.supportsTouchEvents && event instanceof runtime.globalThis.TouchEvent;\n        };\n        _this.isMouseEvent = isMouseEvent !== null && isMouseEvent !== void 0 ? isMouseEvent : function(event) {\n            return !runtime.globalThis.MouseEvent || event instanceof runtime.globalThis.MouseEvent && (!_this.supportsPointerEvents || !(event instanceof runtime.globalThis.PointerEvent));\n        };\n        // override it in runtime\n        if (offscreenCanvas) {\n            runtime.offscreenCanvas = offscreenCanvas;\n        }\n        // create document\n        _this.document = new Document();\n        _this.document.defaultView = _this;\n        if (!supportsMutipleCanvasesInOneContainer) {\n            cleanExistedCanvas(container, _this, cleanUpOnDestroy);\n        }\n        _this.initRenderingContext(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, config), {}, {\n            width: canvasWidth,\n            height: canvasHeight,\n            background: background !== null && background !== void 0 ? background : \"transparent\",\n            cursor: cursor !== null && cursor !== void 0 ? cursor : \"default\",\n            cleanUpOnDestroy: cleanUpOnDestroy,\n            devicePixelRatio: dpr,\n            requestAnimationFrame: _this.requestAnimationFrame,\n            cancelAnimationFrame: _this.cancelAnimationFrame,\n            supportsTouchEvents: _this.supportsTouchEvents,\n            supportsPointerEvents: _this.supportsPointerEvents,\n            isTouchEvent: _this.isTouchEvent,\n            isMouseEvent: _this.isMouseEvent,\n            dblClickSpeed: dblClickSpeed !== null && dblClickSpeed !== void 0 ? dblClickSpeed : 200,\n            createImage: createImage !== null && createImage !== void 0 ? createImage : function() {\n                return new window.Image();\n            }\n        }));\n        _this.initDefaultCamera(canvasWidth, canvasHeight, renderer.clipSpaceNearZ);\n        _this.initRenderer(renderer, true);\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Canvas, _EventTarget);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Canvas, [\n        {\n            key: \"initRenderingContext\",\n            value: function initRenderingContext(mergedConfig) {\n                this.context.config = mergedConfig;\n                // bind rendering context, shared by all renderers\n                this.context.renderingContext = {\n                    /**\n         * the root node in scene graph\n         */ root: this.document.documentElement,\n                    renderListCurrentFrame: [],\n                    unculledEntities: [],\n                    renderReasons: new Set(),\n                    force: false,\n                    dirty: false\n                };\n            }\n        },\n        {\n            key: \"initDefaultCamera\",\n            value: function initDefaultCamera(width, height, clipSpaceNearZ) {\n                var _this2 = this;\n                // set a default ortho camera\n                var camera = new runtime.CameraContribution();\n                camera.clipSpaceNearZ = clipSpaceNearZ;\n                camera.setType(CameraType.EXPLORING, CameraTrackingMode.DEFAULT).setPosition(width / 2, height / 2, DEFAULT_CAMERA_Z).setFocalPoint(width / 2, height / 2, 0).setOrthographic(width / -2, width / 2, height / 2, height / -2, DEFAULT_CAMERA_NEAR, DEFAULT_CAMERA_FAR);\n                // keep ref since it will use raf in camera animation\n                camera.canvas = this;\n                // redraw when camera changed\n                camera.eventEmitter.on(CameraEvent.UPDATED, function() {\n                    _this2.context.renderingContext.renderReasons.add(RenderReason.CAMERA_CHANGED);\n                    if (runtime.enableSizeAttenuation && _this2.getConfig().renderer.getConfig().enableSizeAttenuation) {\n                        _this2.updateSizeAttenuation();\n                    }\n                });\n                // bind camera\n                this.context.camera = camera;\n            }\n        },\n        {\n            key: \"updateSizeAttenuation\",\n            value: function updateSizeAttenuation() {\n                var zoom = this.getCamera().getZoom();\n                this.document.documentElement.forEach(function(node) {\n                    runtime.styleValueRegistry.updateSizeAttenuation(node, zoom);\n                });\n            }\n        },\n        {\n            key: \"getConfig\",\n            value: function getConfig() {\n                return this.context.config;\n            }\n        },\n        {\n            key: \"getRoot\",\n            value: function getRoot() {\n                return this.document.documentElement;\n            }\n        },\n        {\n            key: \"getCamera\",\n            value: function getCamera() {\n                return this.context.camera;\n            }\n        },\n        {\n            key: \"getContextService\",\n            value: function getContextService() {\n                return this.context.contextService;\n            }\n        },\n        {\n            key: \"getEventService\",\n            value: function getEventService() {\n                return this.context.eventService;\n            }\n        },\n        {\n            key: \"getRenderingService\",\n            value: function getRenderingService() {\n                return this.context.renderingService;\n            }\n        },\n        {\n            key: \"getRenderingContext\",\n            value: function getRenderingContext() {\n                return this.context.renderingContext;\n            }\n        },\n        {\n            key: \"getStats\",\n            value: function getStats() {\n                return this.getRenderingService().getStats();\n            }\n        },\n        {\n            key: \"ready\",\n            get: function get() {\n                var _this3 = this;\n                if (!this.readyPromise) {\n                    this.readyPromise = new Promise(function(resolve) {\n                        _this3.resolveReadyPromise = function() {\n                            resolve(_this3);\n                        };\n                    });\n                    if (this.inited) {\n                        this.resolveReadyPromise();\n                    }\n                }\n                return this.readyPromise;\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function destroy() {\n                var cleanUp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n                var skipTriggerEvent = arguments.length > 1 ? arguments[1] : undefined;\n                memoize.clearCache();\n                if (!skipTriggerEvent) {\n                    this.dispatchEvent(new CustomEvent(CanvasEvent.BEFORE_DESTROY));\n                }\n                if (this.frameId) {\n                    this.cancelAnimationFrame(this.frameId);\n                }\n                // unmount all children\n                var root = this.getRoot();\n                if (cleanUp) {\n                    this.unmountChildren(root);\n                    // destroy Document\n                    this.document.destroy();\n                    this.getEventService().destroy();\n                }\n                // destroy services\n                this.getRenderingService().destroy();\n                this.getContextService().destroy();\n                // clear root after render service destroyed\n                if (this.context.rBushRoot) {\n                    // clear rbush\n                    this.context.rBushRoot.clear();\n                }\n                if (!skipTriggerEvent) {\n                    this.dispatchEvent(new CustomEvent(CanvasEvent.AFTER_DESTROY));\n                }\n                var clearEventRetain = function clearEventRetain(event) {\n                    event.currentTarget = null;\n                    event.manager = null;\n                    event.target = null;\n                    event.relatedNode = null;\n                };\n                clearEventRetain(mountedEvent);\n                clearEventRetain(unmountedEvent);\n                clearEventRetain(beforeRenderEvent);\n                clearEventRetain(rerenderEvent);\n                clearEventRetain(afterRenderEvent);\n                clearEventRetain(attrModifiedEvent);\n                clearEventRetain(insertedEvent);\n                clearEventRetain(removedEvent);\n                clearEventRetain(destroyEvent);\n            }\n        },\n        {\n            key: \"changeSize\",\n            value: function changeSize(width, height) {\n                this.resize(width, height);\n            }\n        },\n        {\n            key: \"resize\",\n            value: function resize(width, height) {\n                // update canvas' config\n                var canvasConfig = this.context.config;\n                canvasConfig.width = width;\n                canvasConfig.height = height;\n                // resize context\n                this.getContextService().resize(width, height);\n                // resize camera\n                var camera = this.context.camera;\n                var projectionMode = camera.getProjectionMode();\n                camera.setPosition(width / 2, height / 2, DEFAULT_CAMERA_Z).setFocalPoint(width / 2, height / 2, 0);\n                if (projectionMode === CameraProjectionMode.ORTHOGRAPHIC) {\n                    camera.setOrthographic(width / -2, width / 2, height / 2, height / -2, camera.getNear(), camera.getFar());\n                } else {\n                    camera.setAspect(width / height);\n                }\n                this.dispatchEvent(new CustomEvent(CanvasEvent.RESIZE, {\n                    width: width,\n                    height: height\n                }));\n            }\n        },\n        {\n            key: \"appendChild\",\n            value: function appendChild(child, index) {\n                return this.document.documentElement.appendChild(child, index);\n            }\n        },\n        {\n            key: \"insertBefore\",\n            value: function insertBefore(newChild, refChild) {\n                return this.document.documentElement.insertBefore(newChild, refChild);\n            }\n        },\n        {\n            key: \"removeChild\",\n            value: function removeChild(child) {\n                return this.document.documentElement.removeChild(child);\n            }\n        },\n        {\n            key: \"removeChildren\",\n            value: function removeChildren() {\n                this.document.documentElement.removeChildren();\n            }\n        },\n        {\n            key: \"destroyChildren\",\n            value: function destroyChildren() {\n                this.document.documentElement.destroyChildren();\n            }\n        },\n        {\n            key: \"render\",\n            value: function render(frame) {\n                var _this4 = this;\n                // console.log('render ----------------------');\n                if (frame) {\n                    beforeRenderEvent.detail = frame;\n                    afterRenderEvent.detail = frame;\n                }\n                this.dispatchEvent(beforeRenderEvent);\n                var renderingService = this.getRenderingService();\n                renderingService.render(this.getConfig(), frame, function() {\n                    // trigger actual rerender event\n                    // @see https://github.com/antvis/G/issues/1268\n                    _this4.dispatchEvent(rerenderEvent);\n                });\n                this.dispatchEvent(afterRenderEvent);\n            }\n        },\n        {\n            key: \"run\",\n            value: function run() {\n                var _this5 = this;\n                var _tick = function tick(time, frame) {\n                    _this5.render(frame);\n                    _this5.frameId = _this5.requestAnimationFrame(_tick);\n                };\n                _tick();\n            }\n        },\n        {\n            key: \"initRenderer\",\n            value: function initRenderer(renderer) {\n                var _this6 = this;\n                var firstContentfullPaint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                if (!renderer) {\n                    throw new Error(\"Renderer is required.\");\n                }\n                // reset\n                this.inited = false;\n                this.readyPromise = undefined;\n                // FIXME: should re-create here?\n                this.context.rBushRoot = new RBush();\n                // reset rendering plugins\n                this.context.renderingPlugins = [];\n                this.context.renderingPlugins.push(new EventPlugin(), new PrepareRendererPlugin(), // new DirtyCheckPlugin(),\n                new CullingPlugin([\n                    new FrustumCullingStrategy()\n                ]));\n                //\n                this.loadRendererContainerModule(renderer);\n                // init context service\n                this.context.contextService = new this.context.ContextService(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, runtime), this.context));\n                // init rendering service\n                this.context.renderingService = new RenderingService(runtime, this.context);\n                // init event service\n                this.context.eventService = new EventService(runtime, this.context);\n                this.context.eventService.init();\n                if (this.context.contextService.init) {\n                    this.context.contextService.init();\n                    this.initRenderingService(renderer, firstContentfullPaint, true);\n                } else {\n                    this.context.contextService.initAsync().then(function() {\n                        _this6.initRenderingService(renderer, firstContentfullPaint);\n                    })[\"catch\"](function(err) {\n                        console.error(err);\n                    });\n                }\n            }\n        },\n        {\n            key: \"initRenderingService\",\n            value: function initRenderingService(renderer) {\n                var _this7 = this;\n                var firstContentfullPaint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                var async = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                this.context.renderingService.init(function() {\n                    _this7.inited = true;\n                    if (firstContentfullPaint) {\n                        if (async) {\n                            _this7.requestAnimationFrame(function() {\n                                _this7.dispatchEvent(new CustomEvent(CanvasEvent.READY));\n                            });\n                        } else {\n                            _this7.dispatchEvent(new CustomEvent(CanvasEvent.READY));\n                        }\n                    } else {\n                        _this7.dispatchEvent(new CustomEvent(CanvasEvent.RENDERER_CHANGED));\n                    }\n                    if (_this7.readyPromise) {\n                        _this7.resolveReadyPromise();\n                    }\n                    if (!firstContentfullPaint) {\n                        _this7.getRoot().forEach(function(node) {\n                            var _ref = node, renderable = _ref.renderable;\n                            if (renderable) {\n                                renderable.renderBoundsDirty = true;\n                                renderable.boundsDirty = true;\n                                renderable.dirty = true;\n                            }\n                        });\n                    }\n                    // keep current scenegraph unchanged, just trigger mounted event\n                    _this7.mountChildren(_this7.getRoot());\n                    if (renderer.getConfig().enableAutoRendering) {\n                        _this7.run();\n                    }\n                });\n            }\n        },\n        {\n            key: \"loadRendererContainerModule\",\n            value: function loadRendererContainerModule(renderer) {\n                var _this8 = this;\n                // load other container modules provided by g-canvas/g-svg/g-webgl\n                var plugins = renderer.getPlugins();\n                plugins.forEach(function(plugin) {\n                    plugin.context = _this8.context;\n                    plugin.init(runtime);\n                });\n            }\n        },\n        {\n            key: \"setRenderer\",\n            value: function setRenderer(renderer) {\n                // update canvas' config\n                var canvasConfig = this.getConfig();\n                if (canvasConfig.renderer === renderer) {\n                    return;\n                }\n                var oldRenderer = canvasConfig.renderer;\n                canvasConfig.renderer = renderer;\n                // keep all children undestroyed\n                this.destroy(false, true);\n                // destroy all plugins, reverse will mutate origin array\n                _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()((oldRenderer === null || oldRenderer === void 0 ? void 0 : oldRenderer.getPlugins()) || []).reverse().forEach(function(plugin) {\n                    plugin.destroy(runtime);\n                });\n                this.initRenderer(renderer);\n            }\n        },\n        {\n            key: \"setCursor\",\n            value: function setCursor(cursor) {\n                var canvasConfig = this.getConfig();\n                canvasConfig.cursor = cursor;\n                this.getContextService().applyCursorStyle(cursor);\n            }\n        },\n        {\n            key: \"unmountChildren\",\n            value: function unmountChildren(parent) {\n                var _this9 = this;\n                // unmountChildren recursively\n                parent.childNodes.forEach(function(child) {\n                    _this9.unmountChildren(child);\n                });\n                if (this.inited) {\n                    if (parent.isMutationObserved) {\n                        parent.dispatchEvent(unmountedEvent);\n                    } else {\n                        unmountedEvent.target = parent;\n                        this.dispatchEvent(unmountedEvent, true);\n                    }\n                    // skip document.documentElement\n                    if (parent !== this.document.documentElement) {\n                        parent.ownerDocument = null;\n                    }\n                    parent.isConnected = false;\n                }\n                // trigger after unmounted\n                if (parent.isCustomElement) {\n                    if (parent.disconnectedCallback) {\n                        parent.disconnectedCallback();\n                    }\n                }\n            }\n        },\n        {\n            key: \"mountChildren\",\n            value: function mountChildren(child) {\n                var _this10 = this;\n                var skipTriggerEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : isInFragment(child);\n                if (this.inited) {\n                    if (!child.isConnected) {\n                        child.ownerDocument = this.document;\n                        child.isConnected = true;\n                        if (!skipTriggerEvent) {\n                            if (child.isMutationObserved) {\n                                child.dispatchEvent(mountedEvent);\n                            } else {\n                                mountedEvent.target = child;\n                                this.dispatchEvent(mountedEvent, true);\n                            }\n                        }\n                    }\n                } else {\n                    console.warn(\"[g]: You are trying to call `canvas.appendChild` before canvas' initialization finished. You can either await `canvas.ready` or listen to `CanvasEvent.READY` manually.\", \"appended child: \", child.nodeName);\n                }\n                // recursively mount children\n                child.childNodes.forEach(function(c) {\n                    _this10.mountChildren(c, skipTriggerEvent);\n                });\n                // trigger after mounted\n                if (child.isCustomElement) {\n                    if (child.connectedCallback) {\n                        child.connectedCallback();\n                    }\n                }\n            }\n        },\n        {\n            key: \"mountFragment\",\n            value: function mountFragment(child) {\n                this.mountChildren(child, false);\n            }\n        },\n        {\n            key: \"client2Viewport\",\n            value: function client2Viewport(client) {\n                return this.getEventService().client2Viewport(client);\n            }\n        },\n        {\n            key: \"viewport2Client\",\n            value: function viewport2Client(canvas) {\n                return this.getEventService().viewport2Client(canvas);\n            }\n        },\n        {\n            key: \"viewport2Canvas\",\n            value: function viewport2Canvas(viewport) {\n                return this.getEventService().viewport2Canvas(viewport);\n            }\n        },\n        {\n            key: \"canvas2Viewport\",\n            value: function canvas2Viewport(canvas) {\n                return this.getEventService().canvas2Viewport(canvas);\n            }\n        },\n        {\n            key: \"getPointByClient\",\n            value: function getPointByClient(clientX, clientY) {\n                return this.client2Viewport({\n                    x: clientX,\n                    y: clientY\n                });\n            }\n        },\n        {\n            key: \"getClientByPoint\",\n            value: function getClientByPoint(x, y) {\n                return this.viewport2Client({\n                    x: x,\n                    y: y\n                });\n            }\n        }\n    ]);\n}(EventTarget);\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@antv+g-lite@2.2.16/node_modules/@antv/g-lite/dist/index.esm.js\n");

/***/ })

};
;