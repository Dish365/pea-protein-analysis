"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@antv+g-dom-mutation-observer-api@2.0.32";
exports.ids = ["vendor-chunks/@antv+g-dom-mutation-observer-api@2.0.32"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@antv+g-dom-mutation-observer-api@2.0.32/node_modules/@antv/g-dom-mutation-observer-api/dist/index.esm.js":
/*!***************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@antv+g-dom-mutation-observer-api@2.0.32/node_modules/@antv/g-dom-mutation-observer-api/dist/index.esm.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MutationObserver: () => (/* binding */ MutationObserver),\n/* harmony export */   MutationRecord: () => (/* binding */ MutationRecord),\n/* harmony export */   Registration: () => (/* binding */ Registration)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _antv_g_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @antv/g-lite */ \"(ssr)/../node_modules/.pnpm/@antv+g-lite@2.2.16/node_modules/@antv/g-lite/dist/index.esm.js\");\n/*!\n * @antv/g-dom-mutation-observer-api\n * @description A simple implementation of DOM MutationObserver API.\n * @version 2.0.32\n * @date 1/23/2025, 8:32:22 AM\n * @author AntVis\n * @docs https://g.antv.antgroup.com/\n */ \n\n\nvar MutationRecord = /*#__PURE__*/ function() {\n    function MutationRecord(type, target) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, MutationRecord);\n        this.addedNodes = [];\n        this.attributeName = null;\n        this.attributeNamespace = null;\n        this.nextSibling = null;\n        this.oldValue = null;\n        this.previousSibling = null;\n        this.removedNodes = [];\n        this.type = type;\n        this.target = target;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(MutationRecord, null, [\n        {\n            key: \"copy\",\n            value: function copy(original) {\n                var record = new MutationRecord(original.type, original.target);\n                record.addedNodes = original.addedNodes.slice();\n                record.removedNodes = original.removedNodes.slice();\n                record.previousSibling = original.previousSibling;\n                record.nextSibling = original.nextSibling;\n                record.attributeName = original.attributeName;\n                record.attributeNamespace = original.attributeNamespace;\n                record.oldValue = original.oldValue;\n                return record;\n            }\n        }\n    ]);\n}();\nvar uidCounter = 0;\nvar registrationsTable = new WeakMap();\nvar Registration = /*#__PURE__*/ function() {\n    function Registration(observer, target, options) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Registration);\n        this.transientObservedNodes = [];\n        this.observer = observer;\n        this.target = target;\n        this.options = options;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Registration, [\n        {\n            key: \"enqueue\",\n            value: function enqueue(record) {\n                var records = this.observer.records;\n                var length = records.length;\n                // There are cases where we replace the last record with the new record.\n                // For example if the record represents the same mutation we need to use\n                // the one with the oldValue. If we get same record (this can happen as we\n                // walk up the tree) we ignore the new record.\n                if (records.length > 0) {\n                    var lastRecord = records[length - 1];\n                    var recordToReplaceLast = selectRecord(lastRecord, record);\n                    if (recordToReplaceLast) {\n                        records[length - 1] = recordToReplaceLast;\n                        return;\n                    }\n                } else {\n                    scheduleCallback(this.observer);\n                }\n                records[length] = record;\n            }\n        },\n        {\n            key: \"addListeners\",\n            value: function addListeners() {\n                this.addListeners_(this.target);\n            }\n        },\n        {\n            key: \"addListeners_\",\n            value: function addListeners_(node) {\n                var options = this.options;\n                if (options.attributes) node.addEventListener(_antv_g_lite__WEBPACK_IMPORTED_MODULE_2__.ElementEvent.ATTR_MODIFIED, this, true);\n                // if (options.characterData) node.addEventListener('DOMCharacterDataModified', this, true);\n                if (options.childList) node.addEventListener(_antv_g_lite__WEBPACK_IMPORTED_MODULE_2__.ElementEvent.INSERTED, this, true);\n                if (options.childList || options.subtree) node.addEventListener(_antv_g_lite__WEBPACK_IMPORTED_MODULE_2__.ElementEvent.REMOVED, this, true);\n            }\n        },\n        {\n            key: \"removeListeners\",\n            value: function removeListeners() {\n                this.removeListeners_(this.target);\n            }\n        },\n        {\n            key: \"removeListeners_\",\n            value: function removeListeners_(node) {\n                var options = this.options;\n                if (options.attributes) node.removeEventListener(_antv_g_lite__WEBPACK_IMPORTED_MODULE_2__.ElementEvent.ATTR_MODIFIED, this, true);\n                // if (options.characterData) node.removeEventListener('DOMCharacterDataModified', this, true);\n                if (options.childList) node.removeEventListener(_antv_g_lite__WEBPACK_IMPORTED_MODULE_2__.ElementEvent.INSERTED, this, true);\n                if (options.childList || options.subtree) node.removeEventListener(_antv_g_lite__WEBPACK_IMPORTED_MODULE_2__.ElementEvent.REMOVED, this, true);\n            }\n        },\n        {\n            key: \"removeTransientObservers\",\n            value: function removeTransientObservers() {\n                var transientObservedNodes = this.transientObservedNodes;\n                this.transientObservedNodes = [];\n                transientObservedNodes.forEach(function(node) {\n                    // Transient observers are never added to the target.\n                    this.removeListeners_(node);\n                    var registrations = registrationsTable.get(node);\n                    for(var i = 0; i < registrations.length; i++){\n                        if (registrations[i] === this) {\n                            registrations.splice(i, 1);\n                            break;\n                        }\n                    }\n                }, this);\n            }\n        },\n        {\n            key: \"handleEvent\",\n            value: function handleEvent(e) {\n                // Stop propagation since we are managing the propagation manually.\n                // This means that other mutation events on the page will not work\n                // correctly but that is by design.\n                e.stopImmediatePropagation();\n                var record;\n                var target;\n                switch(e.type){\n                    case _antv_g_lite__WEBPACK_IMPORTED_MODULE_2__.ElementEvent.ATTR_MODIFIED:\n                        // http://dom.spec.whatwg.org/#concept-mo-queue-attributes\n                        var name = e.attrName;\n                        // @ts-ignore\n                        var namespace = e.relatedNode.namespaceURI;\n                        target = e.target;\n                        // 1.\n                        record = getRecord(\"attributes\", target);\n                        record.attributeName = name;\n                        record.attributeNamespace = namespace;\n                        // 2.\n                        var oldValue = e.attrChange === _antv_g_lite__WEBPACK_IMPORTED_MODULE_2__.MutationEvent.ADDITION ? null : e.prevValue;\n                        forEachAncestorAndObserverEnqueueRecord(target, function(options) {\n                            // 3.1, 4.2\n                            if (!options.attributes) return;\n                            // 3.2, 4.3\n                            if (options.attributeFilter && options.attributeFilter.length && options.attributeFilter.indexOf(name) === -1 && options.attributeFilter.indexOf(namespace) === -1) {\n                                return;\n                            }\n                            // 3.3, 4.4\n                            if (options.attributeOldValue) return getRecordWithOldValue(oldValue);\n                            // 3.4, 4.5\n                            return record;\n                        });\n                        break;\n                    // case 'DOMCharacterDataModified':\n                    //   // http://dom.spec.whatwg.org/#concept-mo-queue-characterdata\n                    //   var target = e.target;\n                    //   // 1.\n                    //   var record = getRecord('characterData', target);\n                    //   // 2.\n                    //   var oldValue = e.prevValue;\n                    //   forEachAncestorAndObserverEnqueueRecord(target, function(options) {\n                    //     // 3.1, 4.2\n                    //     if (!options.characterData)\n                    //       return;\n                    //     // 3.2, 4.3\n                    //     if (options.characterDataOldValue)\n                    //       return getRecordWithOldValue(oldValue);\n                    //     // 3.3, 4.4\n                    //     return record;\n                    //   });\n                    //   break;\n                    case _antv_g_lite__WEBPACK_IMPORTED_MODULE_2__.ElementEvent.REMOVED:\n                    // this.addTransientObserver(e.target as IElement);\n                    // Fall through.\n                    case _antv_g_lite__WEBPACK_IMPORTED_MODULE_2__.ElementEvent.INSERTED:\n                        // http://dom.spec.whatwg.org/#concept-mo-queue-childlist\n                        target = e.relatedNode;\n                        var changedNode = e.target;\n                        var addedNodes;\n                        var removedNodes;\n                        if (e.type === _antv_g_lite__WEBPACK_IMPORTED_MODULE_2__.ElementEvent.INSERTED) {\n                            addedNodes = [\n                                changedNode\n                            ];\n                            removedNodes = [];\n                        } else {\n                            addedNodes = [];\n                            removedNodes = [\n                                changedNode\n                            ];\n                        }\n                        var previousSibling = changedNode.previousSibling;\n                        var nextSibling = changedNode.nextSibling;\n                        // 1.\n                        record = getRecord(\"childList\", target);\n                        record.addedNodes = addedNodes;\n                        record.removedNodes = removedNodes;\n                        record.previousSibling = previousSibling;\n                        record.nextSibling = nextSibling;\n                        forEachAncestorAndObserverEnqueueRecord(target, function(options) {\n                            // 2.1, 3.2\n                            if (!options.childList) return;\n                            // 2.2, 3.3\n                            return record;\n                        });\n                }\n                clearRecords();\n            }\n        }\n    ]);\n}();\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n * @see https://github.com/googlearchive/MutationObservers/blob/master/MutationObserver.js\n */ var MutationObserver = /*#__PURE__*/ function() {\n    function MutationObserver(callback) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, MutationObserver);\n        this.nodes = [];\n        this.records = [];\n        this.uid = uidCounter++;\n        this.callback = callback;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(MutationObserver, [\n        {\n            key: \"observe\",\n            value: function observe(target, options) {\n                // 1.1\n                if (!options.childList && !options.attributes && !options.characterData || // 1.2\n                options.attributeOldValue && !options.attributes || // 1.3\n                options.attributeFilter && options.attributeFilter.length && !options.attributes || // 1.4\n                options.characterDataOldValue && !options.characterData) {\n                    throw new SyntaxError();\n                }\n                var registrations = registrationsTable.get(target);\n                if (!registrations) registrationsTable.set(target, registrations = []);\n                // 2\n                // If target's list of registered observers already includes a registered\n                // observer associated with the context object, replace that registered\n                // observer's options with options.\n                var registration;\n                for(var i = 0; i < registrations.length; i++){\n                    if (registrations[i].observer === this) {\n                        registration = registrations[i];\n                        registration.removeListeners();\n                        registration.options = options;\n                        break;\n                    }\n                }\n                // 3.\n                // Otherwise, add a new registered observer to target's list of registered\n                // observers with the context object as the observer and options as the\n                // options, and add target to context object's list of nodes on which it\n                // is registered.\n                if (!registration) {\n                    registration = new Registration(this, target, options);\n                    registrations.push(registration);\n                    this.nodes.push(target);\n                }\n                registration.addListeners();\n            }\n        },\n        {\n            key: \"disconnect\",\n            value: function disconnect() {\n                var _this = this;\n                this.nodes.forEach(function(node) {\n                    var registrations = registrationsTable.get(node);\n                    for(var i = 0; i < registrations.length; i++){\n                        var registration = registrations[i];\n                        if (registration.observer === _this) {\n                            registration.removeListeners();\n                            registrations.splice(i, 1);\n                            break;\n                        }\n                    }\n                }, this);\n                this.records = [];\n            }\n        },\n        {\n            key: \"takeRecords\",\n            value: function takeRecords() {\n                var copyOfRecords = this.records;\n                this.records = [];\n                return copyOfRecords;\n            }\n        }\n    ]);\n}();\n// We keep track of the two (possibly one) records used in a single mutation.\nvar currentRecord;\nvar recordWithOldValue;\n/**\n * Creates a record without |oldValue| and caches it as |currentRecord| for\n * later use.\n */ function getRecord(type, target) {\n    return currentRecord = new MutationRecord(type, target);\n}\n/**\n * Gets or creates a record with |oldValue| based in the |currentRecord|\n */ function getRecordWithOldValue(oldValue) {\n    if (recordWithOldValue) return recordWithOldValue;\n    recordWithOldValue = MutationRecord.copy(currentRecord);\n    recordWithOldValue.oldValue = oldValue;\n    return recordWithOldValue;\n}\nfunction clearRecords() {\n    currentRecord = recordWithOldValue = undefined;\n}\n/**\n * Whether the record represents a record from the current\n * mutation event.\n */ function recordRepresentsCurrentMutation(record) {\n    return record === recordWithOldValue || record === currentRecord;\n}\n/**\n * Selects which record, if any, to replace the last record in the queue.\n * This returns |null| if no record should be replaced.\n */ function selectRecord(lastRecord, newRecord) {\n    if (lastRecord === newRecord) return lastRecord;\n    // Check if the the record we are adding represents the same record. If\n    // so, we keep the one with the oldValue in it.\n    if (recordWithOldValue && recordRepresentsCurrentMutation(lastRecord)) return recordWithOldValue;\n    return null;\n}\nfunction removeTransientObserversFor(observer) {\n    observer.nodes.forEach(function(node) {\n        var registrations = registrationsTable.get(node);\n        if (!registrations) return;\n        registrations.forEach(function(registration) {\n            if (registration.observer === observer) registration.removeTransientObservers();\n        });\n    });\n}\n/**\n * This function is used for the \"For each registered observer observer (with\n * observer's options as options) in target's list of registered observers,\n * run these substeps:\" and the \"For each ancestor ancestor of target, and for\n * each registered observer observer (with options options) in ancestor's list\n * of registered observers, run these substeps:\" part of the algorithms. The\n * |options.subtree| is checked to ensure that the callback is called\n * correctly.\n *\n * @param {Node} target\n * @param {function(MutationObserverInit):MutationRecord} callback\n */ function forEachAncestorAndObserverEnqueueRecord(target, callback) {\n    for(var node = target; node; node = node.parentNode){\n        var registrations = registrationsTable.get(node);\n        if (registrations) {\n            for(var j = 0; j < registrations.length; j++){\n                var registration = registrations[j];\n                var _options = registration.options;\n                // Only target ignores subtree.\n                if (node !== target && !_options.subtree) continue;\n                var record = callback(_options);\n                if (record) registration.enqueue(record);\n            }\n        }\n    }\n}\n// This is used to ensure that we never schedule 2 callas to setImmediate\nvar isScheduled = false;\n// Keep track of observers that needs to be notified next time.\nvar scheduledObservers = [];\n/**\n * Schedules |dispatchCallback| to be called in the future.\n */ function scheduleCallback(observer) {\n    scheduledObservers.push(observer);\n    if (!isScheduled) {\n        isScheduled = true;\n        // setImmediate(dispatchCallbacks);\n        if (typeof _antv_g_lite__WEBPACK_IMPORTED_MODULE_2__.runtime.globalThis !== \"undefined\") {\n            _antv_g_lite__WEBPACK_IMPORTED_MODULE_2__.runtime.globalThis.setTimeout(dispatchCallbacks);\n        } else {\n            dispatchCallbacks();\n        }\n    }\n}\nfunction dispatchCallbacks() {\n    // http://dom.spec.whatwg.org/#mutation-observers\n    isScheduled = false; // Used to allow a new setImmediate call above.\n    var observers = scheduledObservers;\n    scheduledObservers = [];\n    // Sort observers based on their creation UID (incremental).\n    observers.sort(function(o1, o2) {\n        return o1.uid - o2.uid;\n    });\n    var anyNonEmpty = false;\n    observers.forEach(function(observer) {\n        // 2.1, 2.2\n        var queue = observer.takeRecords();\n        // 2.3. Remove all transient registered observers whose observer is mo.\n        removeTransientObserversFor(observer);\n        // 2.4\n        if (queue.length) {\n            // @ts-ignore\n            observer.callback(queue, observer);\n            anyNonEmpty = true;\n        }\n    });\n    // 3.\n    if (anyNonEmpty) dispatchCallbacks();\n}\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@antv+g-dom-mutation-observer-api@2.0.32/node_modules/@antv/g-dom-mutation-observer-api/dist/index.esm.js\n");

/***/ })

};
;