"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@antv+g-plugin-canvas-renderer@2.2.18";
exports.ids = ["vendor-chunks/@antv+g-plugin-canvas-renderer@2.2.18"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@antv+g-plugin-canvas-renderer@2.2.18/node_modules/@antv/g-plugin-canvas-renderer/dist/index.esm.js":
/*!*********************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@antv+g-plugin-canvas-renderer@2.2.18/node_modules/@antv/g-plugin-canvas-renderer/dist/index.esm.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CircleRenderer: () => (/* binding */ DefaultRenderer),\n/* harmony export */   DefaultRenderer: () => (/* binding */ DefaultRenderer),\n/* harmony export */   EllipseRenderer: () => (/* binding */ DefaultRenderer),\n/* harmony export */   ImageRenderer: () => (/* binding */ ImageRenderer),\n/* harmony export */   LineRenderer: () => (/* binding */ DefaultRenderer),\n/* harmony export */   PathRenderer: () => (/* binding */ DefaultRenderer),\n/* harmony export */   Plugin: () => (/* binding */ Plugin),\n/* harmony export */   PolygonRenderer: () => (/* binding */ DefaultRenderer),\n/* harmony export */   PolylineRenderer: () => (/* binding */ DefaultRenderer),\n/* harmony export */   RectRenderer: () => (/* binding */ DefaultRenderer),\n/* harmony export */   TextRenderer: () => (/* binding */ TextRenderer)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/callSuper */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/callSuper.js\");\n/* harmony import */ var _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @antv/g-lite */ \"(ssr)/../node_modules/.pnpm/@antv+g-lite@2.2.16/node_modules/@antv/g-lite/dist/index.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/slicedToArray.js\");\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _babel_runtime_helpers_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @babel/runtime/helpers/classPrivateFieldLooseBase */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/classPrivateFieldLooseBase.js\");\n/* harmony import */ var _babel_runtime_helpers_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _babel_runtime_helpers_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @babel/runtime/helpers/classPrivateFieldLooseKey */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/classPrivateFieldLooseKey.js\");\n/* harmony import */ var _babel_runtime_helpers_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! gl-matrix */ \"(ssr)/../node_modules/.pnpm/gl-matrix@3.4.3/node_modules/gl-matrix/esm/mat4.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! gl-matrix */ \"(ssr)/../node_modules/.pnpm/gl-matrix@3.4.3/node_modules/gl-matrix/esm/vec3.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/is-nil.js\");\n/* harmony import */ var _antv_g_plugin_image_loader__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @antv/g-plugin-image-loader */ \"(ssr)/../node_modules/.pnpm/@antv+g-plugin-image-loader@2.1.18/node_modules/@antv/g-plugin-image-loader/dist/index.esm.js\");\n/*!\n * @antv/g-plugin-canvas-renderer\n * @description A G plugin of renderer implementation with Canvas2D API\n * @version 2.2.18\n * @date 1/23/2025, 8:34:11 AM\n * @author AntVis\n * @docs https://g.antv.antgroup.com/\n */ \n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _renderState = /*#__PURE__*/ _babel_runtime_helpers_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_10___default()(\"renderState\");\n/**\n * support 2 modes in rendering:\n * * immediate\n * * delayed: render at the end of frame with dirty-rectangle\n */ var CanvasRendererPlugin = /*#__PURE__*/ function() {\n    /**\n   * RBush used in dirty rectangle rendering\n   */ function CanvasRendererPlugin(canvasRendererPluginOptions // private styleRendererFactory: Record<Shape, StyleRenderer>,\n    ) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, CanvasRendererPlugin);\n        this.removedRBushNodeAABBs = [];\n        this.renderQueue = [];\n        Object.defineProperty(this, _renderState, {\n            writable: true,\n            value: {\n                restoreStack: [],\n                prevObject: null,\n                currentContext: new Map()\n            }\n        });\n        this.clearFullScreenLastFrame = false;\n        this.clearFullScreen = false;\n        /**\n     * view projection matrix\n     */ this.vpMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_12__.create();\n        this.dprMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_12__.create();\n        this.tmpMat4 = gl_matrix__WEBPACK_IMPORTED_MODULE_12__.create();\n        this.vec3a = gl_matrix__WEBPACK_IMPORTED_MODULE_13__.create();\n        this.vec3b = gl_matrix__WEBPACK_IMPORTED_MODULE_13__.create();\n        this.vec3c = gl_matrix__WEBPACK_IMPORTED_MODULE_13__.create();\n        this.vec3d = gl_matrix__WEBPACK_IMPORTED_MODULE_13__.create();\n        this.canvasRendererPluginOptions = canvasRendererPluginOptions;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(CanvasRendererPlugin, [\n        {\n            key: \"apply\",\n            value: function apply(context, runtime) {\n                var _this = this;\n                this.context = context;\n                var _this$context = this.context, config = _this$context.config, camera = _this$context.camera, renderingService = _this$context.renderingService, renderingContext = _this$context.renderingContext, rBushRoot = _this$context.rBushRoot, pathGeneratorFactory = _this$context.pathGeneratorFactory;\n                var enableRenderingOptimization = config.renderer.getConfig().enableRenderingOptimization;\n                config.renderer.getConfig().enableDirtyCheck = false;\n                config.renderer.getConfig().enableDirtyRectangleRendering = false;\n                this.rBush = rBushRoot;\n                this.pathGeneratorFactory = pathGeneratorFactory;\n                var contextService = context.contextService;\n                var canvas = renderingContext.root.ownerDocument.defaultView;\n                var handleUnmounted = function handleUnmounted(e) {\n                    var object = e.target;\n                    // remove r-bush node\n                    // @ts-ignore\n                    var rBushNode = object.rBushNode;\n                    if (rBushNode.aabb) {\n                        // save removed aabbs for dirty-rectangle rendering later\n                        _this.removedRBushNodeAABBs.push(rBushNode.aabb);\n                    }\n                };\n                var handleCulled = function handleCulled(e) {\n                    var object = e.target;\n                    // @ts-ignore\n                    var rBushNode = object.rBushNode;\n                    if (rBushNode.aabb) {\n                        // save removed aabbs for dirty-rectangle rendering later\n                        _this.removedRBushNodeAABBs.push(rBushNode.aabb);\n                    }\n                };\n                renderingService.hooks.init.tap(CanvasRendererPlugin.tag, function() {\n                    canvas.addEventListener(_antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.ElementEvent.UNMOUNTED, handleUnmounted);\n                    canvas.addEventListener(_antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.ElementEvent.CULLED, handleCulled);\n                    // clear fullscreen\n                    var dpr = contextService.getDPR();\n                    var width = config.width, height = config.height;\n                    var context = contextService.getContext();\n                    _this.clearRect(context, 0, 0, width * dpr, height * dpr, config.background);\n                });\n                renderingService.hooks.destroy.tap(CanvasRendererPlugin.tag, function() {\n                    canvas.removeEventListener(_antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.ElementEvent.UNMOUNTED, handleUnmounted);\n                    canvas.removeEventListener(_antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.ElementEvent.CULLED, handleCulled);\n                    _this.renderQueue = [];\n                    _this.removedRBushNodeAABBs = [];\n                    _babel_runtime_helpers_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_9___default()(_this, _renderState)[_renderState] = {\n                        restoreStack: [],\n                        prevObject: null,\n                        currentContext: null\n                    };\n                });\n                renderingService.hooks.beginFrame.tap(CanvasRendererPlugin.tag, function() {\n                    var _canvas$context$rende;\n                    var context = contextService.getContext();\n                    var dpr = contextService.getDPR();\n                    var width = config.width, height = config.height;\n                    var _this$canvasRendererP = _this.canvasRendererPluginOptions, dirtyObjectNumThreshold = _this$canvasRendererP.dirtyObjectNumThreshold, dirtyObjectRatioThreshold = _this$canvasRendererP.dirtyObjectRatioThreshold;\n                    // some heuristic conditions such as 80% object changed\n                    var _renderingService$get = renderingService.getStats(), total = _renderingService$get.total, rendered = _renderingService$get.rendered;\n                    var ratio = rendered / total;\n                    _this.clearFullScreen = _this.clearFullScreenLastFrame || // @ts-ignore\n                    !((_canvas$context$rende = canvas.context.renderingPlugins[1]) !== null && _canvas$context$rende !== void 0 && _canvas$context$rende.isFirstTimeRenderingFinished) || renderingService.disableDirtyRectangleRendering() || rendered > dirtyObjectNumThreshold && ratio > dirtyObjectRatioThreshold;\n                    if (context) {\n                        if (typeof context.resetTransform === \"function\") {\n                            context.resetTransform();\n                        } else {\n                            context.setTransform(1, 0, 0, 1, 0, 0);\n                        }\n                        if (_this.clearFullScreen) {\n                            _this.clearRect(context, 0, 0, width * dpr, height * dpr, config.background);\n                        }\n                    }\n                });\n                /**\n       * render objects by z-index\n       *\n       * - The level of the child node will be affected by the level of the parent node\n       */ var renderByZIndex = function renderByZIndex(object, context) {\n                    var stack = [\n                        object\n                    ];\n                    while(stack.length > 0){\n                        var currentObject = stack.pop();\n                        if (currentObject.isVisible() && !currentObject.isCulled()) {\n                            if (enableRenderingOptimization) {\n                                _this.renderDisplayObjectOptimized(currentObject, context, _this.context, _babel_runtime_helpers_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_9___default()(_this, _renderState)[_renderState], runtime);\n                            } else {\n                                _this.renderDisplayObject(currentObject, context, _this.context, _babel_runtime_helpers_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_9___default()(_this, _renderState)[_renderState], runtime);\n                            }\n                        }\n                        var objects = currentObject.sortable.sorted || currentObject.childNodes;\n                        // should account for z-index\n                        for(var i = objects.length - 1; i >= 0; i--){\n                            stack.push(objects[i]);\n                        }\n                    }\n                };\n                // render at the end of frame\n                renderingService.hooks.endFrame.tap(CanvasRendererPlugin.tag, function() {\n                    // Skip rendering.\n                    if (renderingContext.root.childNodes.length === 0) {\n                        _this.clearFullScreenLastFrame = true;\n                        return;\n                    }\n                    enableRenderingOptimization = config.renderer.getConfig().enableRenderingOptimization;\n                    // init\n                    _babel_runtime_helpers_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_9___default()(_this, _renderState)[_renderState] = {\n                        restoreStack: [],\n                        prevObject: null,\n                        currentContext: _babel_runtime_helpers_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_9___default()(_this, _renderState)[_renderState].currentContext\n                    };\n                    _babel_runtime_helpers_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_9___default()(_this, _renderState)[_renderState].currentContext.clear();\n                    _this.clearFullScreenLastFrame = false;\n                    var context = contextService.getContext();\n                    // clear & clip dirty rectangle\n                    var dpr = contextService.getDPR();\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_12__.fromScaling(_this.dprMatrix, [\n                        dpr,\n                        dpr,\n                        1\n                    ]);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_12__.multiply(_this.vpMatrix, _this.dprMatrix, camera.getOrthoMatrix());\n                    if (_this.clearFullScreen) {\n                        // console.time('renderByZIndex');\n                        if (enableRenderingOptimization) {\n                            context.save();\n                            renderByZIndex(renderingContext.root, context);\n                            context.restore();\n                        } else {\n                            renderByZIndex(renderingContext.root, context);\n                        }\n                        // console.timeEnd('renderByZIndex');\n                        _this.removedRBushNodeAABBs = [];\n                    } else {\n                        // console.log('canvas renderer next...', this.renderQueue);\n                        // merge removed AABB\n                        var dirtyRenderBounds = _this.safeMergeAABB.apply(_this, [\n                            _this.mergeDirtyAABBs(_this.renderQueue)\n                        ].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_8___default()(_this.removedRBushNodeAABBs.map(function(_ref) {\n                            var minX = _ref.minX, minY = _ref.minY, maxX = _ref.maxX, maxY = _ref.maxY;\n                            var aabb = new _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.AABB();\n                            aabb.setMinMax(// vec3.fromValues(minX, minY, 0),\n                            // vec3.fromValues(maxX, maxY, 0),\n                            [\n                                minX,\n                                minY,\n                                0\n                            ], [\n                                maxX,\n                                maxY,\n                                0\n                            ]);\n                            return aabb;\n                        }))));\n                        _this.removedRBushNodeAABBs = [];\n                        if (_antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.AABB.isEmpty(dirtyRenderBounds)) {\n                            _this.renderQueue = [];\n                            return;\n                        }\n                        var dirtyRect = _this.convertAABB2Rect(dirtyRenderBounds);\n                        var x = dirtyRect.x, y = dirtyRect.y, width = dirtyRect.width, height = dirtyRect.height;\n                        var tl = gl_matrix__WEBPACK_IMPORTED_MODULE_13__.transformMat4(_this.vec3a, [\n                            x,\n                            y,\n                            0\n                        ], _this.vpMatrix);\n                        var tr = gl_matrix__WEBPACK_IMPORTED_MODULE_13__.transformMat4(_this.vec3b, [\n                            x + width,\n                            y,\n                            0\n                        ], _this.vpMatrix);\n                        var bl = gl_matrix__WEBPACK_IMPORTED_MODULE_13__.transformMat4(_this.vec3c, [\n                            x,\n                            y + height,\n                            0\n                        ], _this.vpMatrix);\n                        var br = gl_matrix__WEBPACK_IMPORTED_MODULE_13__.transformMat4(_this.vec3d, [\n                            x + width,\n                            y + height,\n                            0\n                        ], _this.vpMatrix);\n                        var minx = Math.min(tl[0], tr[0], br[0], bl[0]);\n                        var miny = Math.min(tl[1], tr[1], br[1], bl[1]);\n                        var maxx = Math.max(tl[0], tr[0], br[0], bl[0]);\n                        var maxy = Math.max(tl[1], tr[1], br[1], bl[1]);\n                        var ix = Math.floor(minx);\n                        var iy = Math.floor(miny);\n                        var iwidth = Math.ceil(maxx - minx);\n                        var iheight = Math.ceil(maxy - miny);\n                        context.save();\n                        _this.clearRect(context, ix, iy, iwidth, iheight, config.background);\n                        context.beginPath();\n                        context.rect(ix, iy, iwidth, iheight);\n                        context.clip();\n                        // @see https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Transformations\n                        context.setTransform(_this.vpMatrix[0], _this.vpMatrix[1], _this.vpMatrix[4], _this.vpMatrix[5], _this.vpMatrix[12], _this.vpMatrix[13]);\n                        // draw dirty rectangle\n                        var _config$renderer$getC = config.renderer.getConfig(), enableDirtyRectangleRenderingDebug = _config$renderer$getC.enableDirtyRectangleRenderingDebug;\n                        if (enableDirtyRectangleRenderingDebug) {\n                            canvas.dispatchEvent(new _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.CustomEvent(_antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.CanvasEvent.DIRTY_RECTANGLE, {\n                                dirtyRect: {\n                                    x: ix,\n                                    y: iy,\n                                    width: iwidth,\n                                    height: iheight\n                                }\n                            }));\n                        }\n                        // search objects intersect with dirty rectangle\n                        var dirtyObjects = _this.searchDirtyObjects(dirtyRenderBounds);\n                        // do rendering\n                        dirtyObjects// sort by z-index\n                        .sort(function(a, b) {\n                            return a.sortable.renderOrder - b.sortable.renderOrder;\n                        }).forEach(function(object) {\n                            // culled object should not be rendered\n                            if (object && object.isVisible() && !object.isCulled()) {\n                                _this.renderDisplayObject(object, context, _this.context, _babel_runtime_helpers_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_9___default()(_this, _renderState)[_renderState], runtime);\n                            }\n                        });\n                        context.restore();\n                        // save dirty AABBs in last frame\n                        _this.renderQueue.forEach(function(object) {\n                            _this.saveDirtyAABB(object);\n                        });\n                        // clear queue\n                        _this.renderQueue = [];\n                    }\n                    // pop restore stack, eg. root -> parent -> child\n                    _babel_runtime_helpers_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_9___default()(_this, _renderState)[_renderState].restoreStack.forEach(function() {\n                        context.restore();\n                    });\n                    // clear restore stack\n                    _babel_runtime_helpers_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_9___default()(_this, _renderState)[_renderState].restoreStack = [];\n                });\n                renderingService.hooks.render.tap(CanvasRendererPlugin.tag, function(object) {\n                    if (!_this.clearFullScreen) {\n                        // render at the end of frame\n                        _this.renderQueue.push(object);\n                    }\n                });\n            }\n        },\n        {\n            key: \"clearRect\",\n            value: function clearRect(context, x, y, width, height, background) {\n                // clearRect is faster than fillRect @see https://stackoverflow.com/a/30830253\n                context.clearRect(x, y, width, height);\n                if (background) {\n                    context.fillStyle = background;\n                    context.fillRect(x, y, width, height);\n                }\n            }\n        },\n        {\n            key: \"renderDisplayObjectOptimized\",\n            value: function renderDisplayObjectOptimized(object, context, canvasContext, renderState, runtime) {\n                var nodeName = object.nodeName;\n                var updateTransform = false;\n                var clipDraw = false;\n                // @ts-ignore\n                var styleRenderer = this.context.styleRendererFactory[nodeName];\n                var generatePath = this.pathGeneratorFactory[nodeName];\n                // clip path\n                var clipPath = object.parsedStyle.clipPath;\n                if (clipPath) {\n                    updateTransform = !renderState.prevObject || !gl_matrix__WEBPACK_IMPORTED_MODULE_12__.exactEquals(clipPath.getWorldTransform(), renderState.prevObject.getWorldTransform());\n                    if (updateTransform) {\n                        this.applyWorldTransform(context, clipPath);\n                        renderState.prevObject = null;\n                    }\n                    // generate path in local space\n                    var _generatePath = this.pathGeneratorFactory[clipPath.nodeName];\n                    if (_generatePath) {\n                        context.save();\n                        clipDraw = true;\n                        context.beginPath();\n                        _generatePath(context, clipPath.parsedStyle);\n                        context.closePath();\n                        context.clip();\n                    }\n                }\n                // fill & stroke\n                if (styleRenderer) {\n                    updateTransform = !renderState.prevObject || !gl_matrix__WEBPACK_IMPORTED_MODULE_12__.exactEquals(object.getWorldTransform(), renderState.prevObject.getWorldTransform());\n                    if (updateTransform) {\n                        this.applyWorldTransform(context, object);\n                    }\n                    var forceUpdateStyle = !renderState.prevObject;\n                    if (!forceUpdateStyle) {\n                        var prevNodeName = renderState.prevObject.nodeName;\n                        if (nodeName === _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.TEXT) {\n                            forceUpdateStyle = prevNodeName !== _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.TEXT;\n                        } else if (nodeName === _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.IMAGE) {\n                            forceUpdateStyle = prevNodeName !== _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.IMAGE;\n                        } else {\n                            forceUpdateStyle = prevNodeName === _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.TEXT || prevNodeName === _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.IMAGE;\n                        }\n                    }\n                    styleRenderer.applyStyleToContext(context, object, forceUpdateStyle, renderState);\n                    renderState.prevObject = object;\n                }\n                if (generatePath) {\n                    context.beginPath();\n                    generatePath(context, object.parsedStyle);\n                    if (nodeName !== _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.LINE && nodeName !== _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.PATH && nodeName !== _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.POLYLINE) {\n                        context.closePath();\n                    }\n                }\n                // fill & stroke\n                if (styleRenderer) {\n                    styleRenderer.drawToContext(context, object, _babel_runtime_helpers_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_9___default()(this, _renderState)[_renderState], this, runtime);\n                }\n                if (clipDraw) {\n                    context.restore();\n                }\n                // finish rendering, clear dirty flag\n                object.renderable.dirty = false;\n            }\n        },\n        {\n            key: \"renderDisplayObject\",\n            value: function renderDisplayObject(object, context, canvasContext, renderState, runtime) {\n                var nodeName = object.nodeName;\n                // restore to its ancestor\n                var parent = renderState.restoreStack[renderState.restoreStack.length - 1];\n                if (parent && !(object.compareDocumentPosition(parent) & _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Node.DOCUMENT_POSITION_CONTAINS)) {\n                    context.restore();\n                    renderState.restoreStack.pop();\n                }\n                // @ts-ignore\n                var styleRenderer = this.context.styleRendererFactory[nodeName];\n                var generatePath = this.pathGeneratorFactory[nodeName];\n                // clip path\n                var clipPath = object.parsedStyle.clipPath;\n                if (clipPath) {\n                    this.applyWorldTransform(context, clipPath);\n                    // generate path in local space\n                    var _generatePath2 = this.pathGeneratorFactory[clipPath.nodeName];\n                    if (_generatePath2) {\n                        context.save();\n                        // save clip\n                        renderState.restoreStack.push(object);\n                        context.beginPath();\n                        _generatePath2(context, clipPath.parsedStyle);\n                        context.closePath();\n                        context.clip();\n                    }\n                }\n                // fill & stroke\n                if (styleRenderer) {\n                    this.applyWorldTransform(context, object);\n                    context.save();\n                    // apply attributes to context\n                    this.applyAttributesToContext(context, object);\n                }\n                if (generatePath) {\n                    context.beginPath();\n                    generatePath(context, object.parsedStyle);\n                    if (nodeName !== _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.LINE && nodeName !== _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.PATH && nodeName !== _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.POLYLINE) {\n                        context.closePath();\n                    }\n                }\n                // fill & stroke\n                if (styleRenderer) {\n                    styleRenderer.render(context, object.parsedStyle, object, canvasContext, this, runtime);\n                    // restore applied attributes, eg. shadowBlur shadowColor...\n                    context.restore();\n                }\n                // finish rendering, clear dirty flag\n                object.renderable.dirty = false;\n            }\n        },\n        {\n            key: \"applyAttributesToContext\",\n            value: function applyAttributesToContext(context, object) {\n                var _ref2 = object.parsedStyle, stroke = _ref2.stroke, fill = _ref2.fill, opacity = _ref2.opacity, lineDash = _ref2.lineDash, lineDashOffset = _ref2.lineDashOffset;\n                // @see https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/setLineDash\n                if (lineDash) {\n                    context.setLineDash(lineDash);\n                }\n                // @see https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/lineDashOffset\n                if (!(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(lineDashOffset)) {\n                    context.lineDashOffset = lineDashOffset;\n                }\n                if (!(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(opacity)) {\n                    context.globalAlpha *= opacity;\n                }\n                if (!(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(stroke) && !Array.isArray(stroke) && !stroke.isNone) {\n                    context.strokeStyle = object.attributes.stroke;\n                }\n                if (!(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(fill) && !Array.isArray(fill) && !fill.isNone) {\n                    context.fillStyle = object.attributes.fill;\n                }\n            }\n        },\n        {\n            key: \"convertAABB2Rect\",\n            value: function convertAABB2Rect(aabb) {\n                var min = aabb.getMin();\n                var max = aabb.getMax();\n                // expand the rectangle a bit to avoid artifacts\n                // @see https://www.yuque.com/antv/ou292n/bi8nix#ExvCu\n                var minX = Math.floor(min[0]);\n                var minY = Math.floor(min[1]);\n                var maxX = Math.ceil(max[0]);\n                var maxY = Math.ceil(max[1]);\n                var width = maxX - minX;\n                var height = maxY - minY;\n                return {\n                    x: minX,\n                    y: minY,\n                    width: width,\n                    height: height\n                };\n            }\n        },\n        {\n            key: \"mergeDirtyAABBs\",\n            value: function mergeDirtyAABBs(dirtyObjects) {\n                // merge into a big AABB\n                // TODO: skip descendant if ancestor is caculated, but compareNodePosition is really slow\n                var aabb = new _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.AABB();\n                dirtyObjects.forEach(function(object) {\n                    var renderBounds = object.getRenderBounds();\n                    aabb.add(renderBounds);\n                    var dirtyRenderBounds = object.renderable.dirtyRenderBounds;\n                    if (dirtyRenderBounds) {\n                        aabb.add(dirtyRenderBounds);\n                    }\n                });\n                return aabb;\n            }\n        },\n        {\n            key: \"searchDirtyObjects\",\n            value: function searchDirtyObjects(dirtyRectangle) {\n                // search in r-tree, get all affected nodes\n                var _dirtyRectangle$getMi = dirtyRectangle.getMin(), _dirtyRectangle$getMi2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7___default()(_dirtyRectangle$getMi, 2), minX = _dirtyRectangle$getMi2[0], minY = _dirtyRectangle$getMi2[1];\n                var _dirtyRectangle$getMa = dirtyRectangle.getMax(), _dirtyRectangle$getMa2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7___default()(_dirtyRectangle$getMa, 2), maxX = _dirtyRectangle$getMa2[0], maxY = _dirtyRectangle$getMa2[1];\n                var rBushNodes = this.rBush.search({\n                    minX: minX,\n                    minY: minY,\n                    maxX: maxX,\n                    maxY: maxY\n                });\n                return rBushNodes.map(function(_ref3) {\n                    var displayObject = _ref3.displayObject;\n                    return displayObject;\n                });\n            }\n        },\n        {\n            key: \"saveDirtyAABB\",\n            value: function saveDirtyAABB(object) {\n                var renderable = object.renderable;\n                if (!renderable.dirtyRenderBounds) {\n                    renderable.dirtyRenderBounds = new _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.AABB();\n                }\n                var renderBounds = object.getRenderBounds();\n                if (renderBounds) {\n                    // save last dirty aabb\n                    renderable.dirtyRenderBounds.update(renderBounds.center, renderBounds.halfExtents);\n                }\n            }\n        },\n        {\n            key: \"applyWorldTransform\",\n            value: function applyWorldTransform(context, object, matrix) {\n                // apply clip shape's RTS\n                if (matrix) {\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_12__.copy(this.tmpMat4, object.getLocalTransform());\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_12__.multiply(this.tmpMat4, matrix, this.tmpMat4);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_12__.multiply(this.tmpMat4, this.vpMatrix, this.tmpMat4);\n                } else {\n                    // apply RTS transformation in world space\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_12__.copy(this.tmpMat4, object.getWorldTransform());\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_12__.multiply(this.tmpMat4, this.vpMatrix, this.tmpMat4);\n                }\n                // @see https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Transformations\n                context.setTransform(this.tmpMat4[0], this.tmpMat4[1], this.tmpMat4[4], this.tmpMat4[5], this.tmpMat4[12], this.tmpMat4[13]);\n            }\n        },\n        {\n            key: \"safeMergeAABB\",\n            value: function safeMergeAABB() {\n                var merged = new _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.AABB();\n                for(var _len = arguments.length, aabbs = new Array(_len), _key = 0; _key < _len; _key++){\n                    aabbs[_key] = arguments[_key];\n                }\n                aabbs.forEach(function(aabb) {\n                    merged.add(aabb);\n                });\n                return merged;\n            }\n        }\n    ]);\n}();\nCanvasRendererPlugin.tag = \"CanvasRenderer\";\nfunction getPattern(pattern, object, context, canvasContext, plugin, runtime, imagePool) {\n    var $offscreenCanvas;\n    var dpr;\n    if (pattern.image.nodeName === \"rect\") {\n        var _parsedStyle = pattern.image.parsedStyle, width = _parsedStyle.width, height = _parsedStyle.height;\n        dpr = canvasContext.contextService.getDPR();\n        var offscreenCanvas = canvasContext.config.offscreenCanvas;\n        $offscreenCanvas = runtime.offscreenCanvasCreator.getOrCreateCanvas(offscreenCanvas);\n        $offscreenCanvas.width = width * dpr;\n        $offscreenCanvas.height = height * dpr;\n        var offscreenCanvasContext = runtime.offscreenCanvasCreator.getOrCreateContext(offscreenCanvas);\n        var renderState = {\n            restoreStack: [],\n            prevObject: null,\n            currentContext: new Map()\n        };\n        // offscreenCanvasContext.scale(1 / dpr, 1 / dpr);\n        pattern.image.forEach(function(object) {\n            plugin.renderDisplayObject(object, offscreenCanvasContext, canvasContext, renderState, runtime);\n        });\n        renderState.restoreStack.forEach(function() {\n            offscreenCanvasContext.restore();\n        });\n    }\n    var canvasPattern = imagePool.getOrCreatePatternSync(object, pattern, context, $offscreenCanvas, dpr, object.getGeometryBounds().min, function() {\n        // set dirty rectangle flag\n        object.renderable.dirty = true;\n        canvasContext.renderingService.dirtify();\n    });\n    return canvasPattern;\n}\nfunction getColor(parsedColor, object, context, imagePool) {\n    var color;\n    if (parsedColor.type === _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.GradientType.LinearGradient || parsedColor.type === _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.GradientType.RadialGradient) {\n        var bounds = object.getGeometryBounds();\n        var width = bounds && bounds.halfExtents[0] * 2 || 1;\n        var height = bounds && bounds.halfExtents[1] * 2 || 1;\n        var min = bounds && bounds.min || [\n            0,\n            0\n        ];\n        color = imagePool.getOrCreateGradient(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({\n            type: parsedColor.type\n        }, parsedColor.value), {}, {\n            min: min,\n            width: width,\n            height: height\n        }), context);\n    }\n    return color;\n}\nvar SHADOW_NUMBER_STYLE = [\n    \"shadowBlur\",\n    \"shadowOffsetX\",\n    \"shadowOffsetY\"\n];\nvar STROKE_STYLE = [\n    \"lineCap\",\n    \"lineJoin\",\n    \"miterLimit\"\n];\nvar DEFAULT_STYLE = {\n    // common\n    globalAlpha: 1,\n    shadowBlur: 0,\n    shadowOffsetX: 0,\n    shadowOffsetY: 0,\n    shadowColor: \"#000\",\n    filter: \"none\",\n    globalCompositeOperation: \"source-over\",\n    // stroke/fill\n    strokeStyle: \"#000\",\n    strokeOpacity: 1,\n    lineWidth: 1,\n    lineDash: [],\n    lineDashOffset: 0,\n    lineCap: \"butt\",\n    lineJoin: \"miter\",\n    miterLimit: 10,\n    fillStyle: \"#000\",\n    fillOpacity: 1\n};\nvar defaultParsedStyle = {};\n/**\n * Updating the canvas context is an expensive operation. The state of the context is cached and the actual update operation is performed only when the cache is not hit.\n *\n * In any case, the previous value is returned, which is convenient for temporarily updating the context and restoring it later.\n */ function updateContextIfNotHitCache(context, key, value, cache) {\n    var prevValue = cache.has(key) ? cache.get(key) : DEFAULT_STYLE[key];\n    if (prevValue !== value) {\n        // console.log('not hit cache', key, value, prevValue, cache);\n        if (key === \"lineDash\") {\n            context.setLineDash(value);\n        } else {\n            // @ts-ignore\n            context[key] = value;\n        }\n        cache.set(key, value);\n    }\n    return prevValue;\n}\nvar OptimizedDefaultRenderer = /*#__PURE__*/ function() {\n    function OptimizedDefaultRenderer(imagePool) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, OptimizedDefaultRenderer);\n        this.imagePool = imagePool;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(OptimizedDefaultRenderer, [\n        {\n            key: \"applyAttributesToContext\",\n            value: function applyAttributesToContext(context, object) {}\n        },\n        {\n            key: \"render\",\n            value: function render(context, parsedStyle, object, canvasContext, plugin, runtime) {}\n        },\n        {\n            key: \"applyCommonStyleToContext\",\n            value: function applyCommonStyleToContext(context, object, forceUpdate, renderState) {\n                // const dpr = object.ownerDocument.defaultView.getContextService().getDPR();\n                var prevStyle = forceUpdate ? defaultParsedStyle : renderState.prevObject.parsedStyle;\n                var style = object.parsedStyle;\n                if (forceUpdate || style.opacity !== prevStyle.opacity) {\n                    updateContextIfNotHitCache(context, \"globalAlpha\", !(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(style.opacity) ? style.opacity : DEFAULT_STYLE.globalAlpha, renderState.currentContext);\n                }\n                // TODO blend prop\n                // @ts-ignore\n                if (forceUpdate || style.blend !== prevStyle.blend) {\n                    updateContextIfNotHitCache(context, \"globalCompositeOperation\", // @ts-ignore\n                    !(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(style.blend) ? // @ts-ignore\n                    style.blend : DEFAULT_STYLE.globalCompositeOperation, renderState.currentContext);\n                }\n            }\n        },\n        {\n            key: \"applyStrokeFillStyleToContext\",\n            value: function applyStrokeFillStyleToContext(context, object, forceUpdate, renderState) {\n                var prevStyle = forceUpdate ? defaultParsedStyle : renderState.prevObject.parsedStyle;\n                var style = object.parsedStyle;\n                var _style$lineWidth = style.lineWidth, lineWidth = _style$lineWidth === void 0 ? DEFAULT_STYLE.lineWidth : _style$lineWidth;\n                var hasFill = style.fill && !style.fill.isNone;\n                var hasStroke = style.stroke && !style.stroke.isNone && lineWidth > 0;\n                if (hasStroke) {\n                    if (forceUpdate || object.attributes.stroke !== renderState.prevObject.attributes.stroke) {\n                        var value = !(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(style.stroke) && !Array.isArray(style.stroke) && !style.stroke.isNone ? object.attributes.stroke : DEFAULT_STYLE.strokeStyle;\n                        updateContextIfNotHitCache(context, \"strokeStyle\", value, renderState.currentContext);\n                    }\n                    if (forceUpdate || style.lineWidth !== prevStyle.lineWidth) {\n                        updateContextIfNotHitCache(context, \"lineWidth\", !(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(style.lineWidth) ? style.lineWidth : DEFAULT_STYLE.lineWidth, renderState.currentContext);\n                    }\n                    if (forceUpdate || style.lineDash !== prevStyle.lineDash) {\n                        updateContextIfNotHitCache(context, \"lineDash\", style.lineDash || DEFAULT_STYLE.lineDash, renderState.currentContext);\n                    }\n                    if (forceUpdate || style.lineDashOffset !== prevStyle.lineDashOffset) {\n                        updateContextIfNotHitCache(context, \"lineDashOffset\", !(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(style.lineDashOffset) ? style.lineDashOffset : DEFAULT_STYLE.lineDashOffset, renderState.currentContext);\n                    }\n                    for(var i = 0; i < STROKE_STYLE.length; i++){\n                        var styleName = STROKE_STYLE[i];\n                        if (forceUpdate || style[styleName] !== prevStyle[styleName]) {\n                            updateContextIfNotHitCache(context, styleName, !(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(style[styleName]) ? style[styleName] : DEFAULT_STYLE[styleName], renderState.currentContext);\n                        }\n                    }\n                }\n                if (hasFill && (forceUpdate || object.attributes.fill !== renderState.prevObject.attributes.fill)) {\n                    var _value = !(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(style.fill) && !Array.isArray(style.fill) && !style.fill.isNone ? object.attributes.fill : DEFAULT_STYLE.fillStyle;\n                    updateContextIfNotHitCache(context, \"fillStyle\", _value, renderState.currentContext);\n                }\n            }\n        },\n        {\n            key: \"applyStyleToContext\",\n            value: function applyStyleToContext(context, object, forceUpdate, renderState) {\n                var nodeName = object.nodeName;\n                this.applyCommonStyleToContext(context, object, forceUpdate, renderState);\n                if (nodeName === _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.IMAGE) ;\n                else {\n                    this.applyStrokeFillStyleToContext(context, object, forceUpdate, renderState);\n                }\n            }\n        },\n        {\n            key: \"applyShadowAndFilterStyleToContext\",\n            value: function applyShadowAndFilterStyleToContext(context, object, hasShadow, renderState) {\n                var style = object.parsedStyle;\n                if (hasShadow) {\n                    updateContextIfNotHitCache(context, \"shadowColor\", style.shadowColor.toString(), renderState.currentContext);\n                    for(var i = 0; i < SHADOW_NUMBER_STYLE.length; i++){\n                        var styleName = SHADOW_NUMBER_STYLE[i];\n                        updateContextIfNotHitCache(context, styleName, style[styleName] || DEFAULT_STYLE[styleName], renderState.currentContext);\n                    }\n                }\n                if (style.filter && style.filter.length) {\n                    updateContextIfNotHitCache(context, \"filter\", // use raw filter string\n                    object.attributes.filter, renderState.currentContext);\n                }\n            }\n        },\n        {\n            key: \"clearShadowAndFilterStyleForContext\",\n            value: function clearShadowAndFilterStyleForContext(context, hasShadow, hasFilter, renderState) {\n                var onlyClearShadowFilter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n                if (hasShadow) {\n                    updateContextIfNotHitCache(context, \"shadowColor\", DEFAULT_STYLE.shadowColor, renderState.currentContext);\n                    for(var i = 0; i < SHADOW_NUMBER_STYLE.length; i++){\n                        var styleName = SHADOW_NUMBER_STYLE[i];\n                        updateContextIfNotHitCache(context, styleName, DEFAULT_STYLE[styleName], renderState.currentContext);\n                    }\n                }\n                if (hasFilter) {\n                    if (hasShadow && onlyClearShadowFilter) {\n                        // save drop-shadow filter\n                        var oldFilter = context.filter;\n                        if (!(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(oldFilter) && oldFilter.indexOf(\"drop-shadow\") > -1) {\n                            updateContextIfNotHitCache(context, \"filter\", oldFilter.replace(/drop-shadow\\([^)]*\\)/, \"\").trim() || DEFAULT_STYLE.filter, renderState.currentContext);\n                        }\n                    } else {\n                        updateContextIfNotHitCache(context, \"filter\", DEFAULT_STYLE.filter, renderState.currentContext);\n                    }\n                }\n            }\n        },\n        {\n            key: \"fillToContext\",\n            value: function fillToContext(context, object, renderState, plugin, runtime) {\n                var _this = this;\n                var _object$parsedStyle = object.parsedStyle, fill = _object$parsedStyle.fill, fillRule = _object$parsedStyle.fillRule;\n                var resetStyle = null;\n                if (Array.isArray(fill) && fill.length > 0) {\n                    fill.forEach(function(gradient) {\n                        var prevStyle = updateContextIfNotHitCache(context, \"fillStyle\", getColor(gradient, object, context, _this.imagePool), renderState.currentContext);\n                        resetStyle = resetStyle !== null && resetStyle !== void 0 ? resetStyle : prevStyle;\n                        if (fillRule) {\n                            context.fill(fillRule);\n                        } else {\n                            context.fill();\n                        }\n                    });\n                } else {\n                    if ((0,_antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.isPattern)(fill)) {\n                        var pattern = getPattern(fill, object, context, object.ownerDocument.defaultView.context, plugin, runtime, this.imagePool);\n                        if (pattern) {\n                            context.fillStyle = pattern;\n                            resetStyle = true;\n                        }\n                    }\n                    if (fillRule) {\n                        context.fill(fillRule);\n                    } else {\n                        context.fill();\n                    }\n                }\n                if (resetStyle !== null) {\n                    updateContextIfNotHitCache(context, \"fillStyle\", resetStyle, renderState.currentContext);\n                }\n            }\n        },\n        {\n            key: \"strokeToContext\",\n            value: function strokeToContext(context, object, renderState, plugin, runtime) {\n                var _this2 = this;\n                var stroke = object.parsedStyle.stroke;\n                var resetStyle = null;\n                if (Array.isArray(stroke) && stroke.length > 0) {\n                    stroke.forEach(function(gradient) {\n                        var prevStyle = updateContextIfNotHitCache(context, \"strokeStyle\", getColor(gradient, object, context, _this2.imagePool), renderState.currentContext);\n                        resetStyle = resetStyle !== null && resetStyle !== void 0 ? resetStyle : prevStyle;\n                        context.stroke();\n                    });\n                } else {\n                    if ((0,_antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.isPattern)(stroke)) {\n                        var pattern = getPattern(stroke, object, context, object.ownerDocument.defaultView.context, plugin, runtime, this.imagePool);\n                        if (pattern) {\n                            var prevStyle = updateContextIfNotHitCache(context, \"strokeStyle\", pattern, renderState.currentContext);\n                            resetStyle = resetStyle !== null && resetStyle !== void 0 ? resetStyle : prevStyle;\n                        }\n                    }\n                    context.stroke();\n                }\n                if (resetStyle !== null) {\n                    updateContextIfNotHitCache(context, \"strokeStyle\", resetStyle, renderState.currentContext);\n                }\n            }\n        },\n        {\n            key: \"drawToContext\",\n            value: function drawToContext(context, object, renderState, plugin, runtime) {\n                var _style$fill;\n                var nodeName = object.nodeName;\n                var style = object.parsedStyle;\n                var _style$opacity = style.opacity, opacity = _style$opacity === void 0 ? DEFAULT_STYLE.globalAlpha : _style$opacity, _style$fillOpacity = style.fillOpacity, fillOpacity = _style$fillOpacity === void 0 ? DEFAULT_STYLE.fillOpacity : _style$fillOpacity, _style$strokeOpacity = style.strokeOpacity, strokeOpacity = _style$strokeOpacity === void 0 ? DEFAULT_STYLE.strokeOpacity : _style$strokeOpacity, _style$lineWidth2 = style.lineWidth, lineWidth = _style$lineWidth2 === void 0 ? DEFAULT_STYLE.lineWidth : _style$lineWidth2;\n                var hasFill = style.fill && !style.fill.isNone;\n                var hasStroke = style.stroke && !style.stroke.isNone && lineWidth > 0;\n                if (!hasFill && !hasStroke) {\n                    return;\n                }\n                var hasShadow = !(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(style.shadowColor) && style.shadowBlur > 0;\n                var isInnerShadow = style.shadowType === \"inner\";\n                var isFillTransparent = ((_style$fill = style.fill) === null || _style$fill === void 0 ? void 0 : _style$fill.alpha) === 0;\n                var hasFilter = !!(style.filter && style.filter.length);\n                // Shadows can only be applied to fill() or stroke(), the default is fill()\n                var shouldDrawShadowWithStroke = hasShadow && hasStroke && (nodeName === _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.PATH || nodeName === _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.LINE || nodeName === _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.POLYLINE || isFillTransparent || isInnerShadow);\n                // TODO https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/paint-order\n                var originGlobalAlpha = null;\n                if (hasFill) {\n                    if (!shouldDrawShadowWithStroke) {\n                        this.applyShadowAndFilterStyleToContext(context, object, hasShadow, renderState);\n                    }\n                    var updateOpacity = opacity * fillOpacity;\n                    originGlobalAlpha = updateContextIfNotHitCache(context, \"globalAlpha\", updateOpacity, renderState.currentContext);\n                    this.fillToContext(context, object, renderState, plugin, runtime);\n                    if (!shouldDrawShadowWithStroke) {\n                        this.clearShadowAndFilterStyleForContext(context, hasShadow, hasFilter, renderState);\n                    }\n                }\n                if (hasStroke) {\n                    var clearShadowAndFilter = false;\n                    var _updateOpacity = opacity * strokeOpacity;\n                    var prevOpacity = updateContextIfNotHitCache(context, \"globalAlpha\", _updateOpacity, renderState.currentContext);\n                    originGlobalAlpha = hasFill ? originGlobalAlpha : prevOpacity;\n                    if (shouldDrawShadowWithStroke) {\n                        this.applyShadowAndFilterStyleToContext(context, object, hasShadow, renderState);\n                        clearShadowAndFilter = true;\n                        if (isInnerShadow) {\n                            var originBlend = context.globalCompositeOperation;\n                            context.globalCompositeOperation = \"source-atop\";\n                            this.strokeToContext(context, object, renderState, plugin, runtime);\n                            context.globalCompositeOperation = originBlend;\n                            this.clearShadowAndFilterStyleForContext(context, hasShadow, hasFilter, renderState, true);\n                        }\n                    }\n                    this.strokeToContext(context, object, renderState, plugin, runtime);\n                    if (clearShadowAndFilter) {\n                        this.clearShadowAndFilterStyleForContext(context, hasShadow, hasFilter, renderState);\n                    }\n                }\n                // clear\n                if (originGlobalAlpha !== null) {\n                    updateContextIfNotHitCache(context, \"globalAlpha\", originGlobalAlpha, renderState.currentContext);\n                }\n            }\n        }\n    ]);\n}();\nvar DefaultRenderer = /*#__PURE__*/ function(_OptimizedDefaultRend) {\n    function DefaultRenderer() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, DefaultRenderer);\n        return _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, DefaultRenderer, arguments);\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(DefaultRenderer, _OptimizedDefaultRend);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(DefaultRenderer, [\n        {\n            key: \"render\",\n            value: function render(context, parsedStyle, object, canvasContext, plugin, runtime) {\n                var fill = parsedStyle.fill, fillRule = parsedStyle.fillRule, _parsedStyle$opacity = parsedStyle.opacity, opacity = _parsedStyle$opacity === void 0 ? 1 : _parsedStyle$opacity, _parsedStyle$fillOpac = parsedStyle.fillOpacity, fillOpacity = _parsedStyle$fillOpac === void 0 ? 1 : _parsedStyle$fillOpac, stroke = parsedStyle.stroke, _parsedStyle$strokeOp = parsedStyle.strokeOpacity, strokeOpacity = _parsedStyle$strokeOp === void 0 ? 1 : _parsedStyle$strokeOp, _parsedStyle$lineWidt = parsedStyle.lineWidth, lineWidth = _parsedStyle$lineWidt === void 0 ? 1 : _parsedStyle$lineWidt, lineCap = parsedStyle.lineCap, lineJoin = parsedStyle.lineJoin, shadowType = parsedStyle.shadowType, shadowColor = parsedStyle.shadowColor, shadowBlur = parsedStyle.shadowBlur, filter = parsedStyle.filter, miterLimit = parsedStyle.miterLimit;\n                var hasFill = fill && !fill.isNone;\n                var hasStroke = stroke && !stroke.isNone && lineWidth > 0;\n                var isFillTransparent = (fill === null || fill === void 0 ? void 0 : fill.alpha) === 0;\n                var hasFilter = !!(filter && filter.length);\n                var hasShadow = !(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(shadowColor) && shadowBlur > 0;\n                var nodeName = object.nodeName;\n                var isInnerShadow = shadowType === \"inner\";\n                var shouldDrawShadowWithStroke = hasStroke && hasShadow && (nodeName === _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.PATH || nodeName === _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.LINE || nodeName === _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.POLYLINE || isFillTransparent || isInnerShadow);\n                if (hasFill) {\n                    context.globalAlpha = opacity * fillOpacity;\n                    if (!shouldDrawShadowWithStroke) {\n                        setShadowAndFilter(object, context, hasShadow);\n                    }\n                    applyFill(context, object, fill, fillRule, canvasContext, plugin, runtime, this.imagePool);\n                    if (!shouldDrawShadowWithStroke) {\n                        this.clearShadowAndFilter(context, hasFilter, hasShadow);\n                    }\n                }\n                if (hasStroke) {\n                    context.globalAlpha = opacity * strokeOpacity;\n                    context.lineWidth = lineWidth;\n                    if (!(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(miterLimit)) {\n                        context.miterLimit = miterLimit;\n                    }\n                    if (!(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(lineCap)) {\n                        context.lineCap = lineCap;\n                    }\n                    if (!(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(lineJoin)) {\n                        context.lineJoin = lineJoin;\n                    }\n                    if (shouldDrawShadowWithStroke) {\n                        if (isInnerShadow) {\n                            context.globalCompositeOperation = \"source-atop\";\n                        }\n                        setShadowAndFilter(object, context, true);\n                        if (isInnerShadow) {\n                            applyStroke(context, object, stroke, canvasContext, plugin, runtime, this.imagePool);\n                            context.globalCompositeOperation = DEFAULT_STYLE.globalCompositeOperation;\n                            this.clearShadowAndFilter(context, hasFilter, true);\n                        }\n                    }\n                    applyStroke(context, object, stroke, canvasContext, plugin, runtime, this.imagePool);\n                }\n            }\n        },\n        {\n            key: \"clearShadowAndFilter\",\n            value: function clearShadowAndFilter(context, hasFilter, hasShadow) {\n                if (hasShadow) {\n                    context.shadowColor = \"transparent\";\n                    context.shadowBlur = 0;\n                }\n                if (hasFilter) {\n                    // save drop-shadow filter\n                    var oldFilter = context.filter;\n                    if (!(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(oldFilter) && oldFilter.indexOf(\"drop-shadow\") > -1) {\n                        context.filter = oldFilter.replace(/drop-shadow\\([^)]*\\)/, \"\").trim() || \"none\";\n                    }\n                }\n            }\n        }\n    ]);\n}(OptimizedDefaultRenderer);\n/**\n * apply before fill and stroke but only once\n */ function setShadowAndFilter(object, context, hasShadow) {\n    var _object$parsedStyle = object.parsedStyle, filter = _object$parsedStyle.filter, shadowColor = _object$parsedStyle.shadowColor, shadowBlur = _object$parsedStyle.shadowBlur, shadowOffsetX = _object$parsedStyle.shadowOffsetX, shadowOffsetY = _object$parsedStyle.shadowOffsetY;\n    if (filter && filter.length) {\n        // use raw filter string\n        context.filter = object.style.filter;\n    }\n    if (hasShadow) {\n        context.shadowColor = shadowColor.toString();\n        context.shadowBlur = shadowBlur || 0;\n        context.shadowOffsetX = shadowOffsetX || 0;\n        context.shadowOffsetY = shadowOffsetY || 0;\n    }\n}\nfunction applyFill(context, object, fill, fillRule, canvasContext, plugin, runtime, imagePool) {\n    var skipFill = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n    if (Array.isArray(fill)) {\n        fill.forEach(function(gradient) {\n            context.fillStyle = getColor(gradient, object, context, imagePool);\n            if (!skipFill) {\n                fillRule ? context.fill(fillRule) : context.fill();\n            }\n        });\n    } else {\n        if ((0,_antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.isPattern)(fill)) {\n            context.fillStyle = getPattern(fill, object, context, canvasContext, plugin, runtime, imagePool);\n        }\n        if (!skipFill) {\n            fillRule ? context.fill(fillRule) : context.fill();\n        }\n    }\n}\nfunction applyStroke(context, object, stroke, canvasContext, plugin, runtime, imagePool) {\n    var skipStroke = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n    if (Array.isArray(stroke)) {\n        stroke.forEach(function(gradient) {\n            context.strokeStyle = getColor(gradient, object, context, imagePool);\n            if (!skipStroke) {\n                context.stroke();\n            }\n        });\n    } else {\n        if ((0,_antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.isPattern)(stroke)) {\n            context.strokeStyle = getPattern(stroke, object, context, canvasContext, plugin, runtime, imagePool);\n        }\n        if (!skipStroke) {\n            context.stroke();\n        }\n    }\n}\nfunction calculateOverlapRect(rect1, rect2) {\n    var _rect = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7___default()(rect1, 4), x1 = _rect[0], y1 = _rect[1], w1 = _rect[2], h1 = _rect[3];\n    var _rect2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7___default()(rect2, 4), x2 = _rect2[0], y2 = _rect2[1], w2 = _rect2[2], h2 = _rect2[3];\n    // 计算重叠区域的左上角和右下角\n    var overlapLeft = Math.max(x1, x2);\n    var overlapTop = Math.max(y1, y2);\n    var overlapRight = Math.min(x1 + w1, x2 + w2);\n    var overlapBottom = Math.min(y1 + h1, y2 + h2);\n    if (overlapRight <= overlapLeft || overlapBottom <= overlapTop) {\n        return null;\n    }\n    return [\n        overlapLeft,\n        overlapTop,\n        overlapRight - overlapLeft,\n        overlapBottom - overlapTop\n    ];\n}\nfunction transformRect(rect, matrix) {\n    var tl = gl_matrix__WEBPACK_IMPORTED_MODULE_13__.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_13__.create(), [\n        rect[0],\n        rect[1],\n        0\n    ], matrix);\n    var tr = gl_matrix__WEBPACK_IMPORTED_MODULE_13__.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_13__.create(), [\n        rect[0] + rect[2],\n        rect[1],\n        0\n    ], matrix);\n    var bl = gl_matrix__WEBPACK_IMPORTED_MODULE_13__.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_13__.create(), [\n        rect[0],\n        rect[1] + rect[3],\n        0\n    ], matrix);\n    var br = gl_matrix__WEBPACK_IMPORTED_MODULE_13__.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_13__.create(), [\n        rect[0] + rect[2],\n        rect[1] + rect[3],\n        0\n    ], matrix);\n    return [\n        Math.min(tl[0], tr[0], bl[0], br[0]),\n        Math.min(tl[1], tr[1], bl[1], br[1]),\n        Math.max(tl[0], tr[0], bl[0], br[0]) - Math.min(tl[0], tr[0], bl[0], br[0]),\n        Math.max(tl[1], tr[1], bl[1], br[1]) - Math.min(tl[1], tr[1], bl[1], br[1])\n    ];\n}\nvar ImageRenderer = /*#__PURE__*/ function(_DefaultRenderer) {\n    function ImageRenderer() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, ImageRenderer);\n        return _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, ImageRenderer, arguments);\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(ImageRenderer, _DefaultRenderer);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(ImageRenderer, [\n        {\n            key: \"renderDownSampled\",\n            value: function renderDownSampled(context, parsedStyle, object, data) {\n                var src = data.src, imageCache = data.imageCache;\n                if (!imageCache.downSampled) {\n                    this.imagePool.createDownSampledImage(src, object).then(function(res) {\n                        // rerender\n                        // object.dirty();\n                        object.renderable.dirty = true;\n                        object.ownerDocument.defaultView.context.renderingService.dirtify();\n                    })[\"catch\"](function() {\n                    //\n                    });\n                    return;\n                }\n                context.drawImage(imageCache.downSampled, Math.floor(data.drawRect[0]), Math.floor(data.drawRect[1]), Math.ceil(data.drawRect[2]), Math.ceil(data.drawRect[3]));\n            }\n        },\n        {\n            key: \"renderTile\",\n            value: function renderTile(context, parsedStyle, object, data) {\n                var src = data.src, imageCache = data.imageCache, imageRect = data.imageRect, drawRect = data.drawRect;\n                var originalSize = imageCache.size;\n                var _context$getTransform = context.getTransform(), a = _context$getTransform.a, b = _context$getTransform.b, c = _context$getTransform.c, d = _context$getTransform.d, e = _context$getTransform.e, f = _context$getTransform.f;\n                context.resetTransform();\n                if (!(imageCache !== null && imageCache !== void 0 && imageCache.gridSize)) {\n                    this.imagePool.createImageTiles(src, [], function() {\n                        // rerender\n                        // object.dirty();\n                        object.renderable.dirty = true;\n                        object.ownerDocument.defaultView.context.renderingService.dirtify();\n                    }, object)[\"catch\"](function() {\n                    //\n                    });\n                    return;\n                }\n                var scaleToOrigin = [\n                    originalSize[0] / imageRect[2],\n                    originalSize[1] / imageRect[3]\n                ];\n                var scaledTileSize = [\n                    imageCache.tileSize[0] / scaleToOrigin[0],\n                    imageCache.tileSize[1] / scaleToOrigin[1]\n                ];\n                var _ref = [\n                    Math.floor((drawRect[0] - imageRect[0]) / scaledTileSize[0]),\n                    Math.ceil((drawRect[0] + drawRect[2] - imageRect[0]) / scaledTileSize[0])\n                ], startTileX = _ref[0], endTileX = _ref[1];\n                var _ref2 = [\n                    Math.floor((drawRect[1] - imageRect[1]) / scaledTileSize[1]),\n                    Math.ceil((drawRect[1] + drawRect[3] - imageRect[1]) / scaledTileSize[1])\n                ], startTileY = _ref2[0], endTileY = _ref2[1];\n                for(var tileY = startTileY; tileY <= endTileY; tileY++){\n                    for(var tileX = startTileX; tileX <= endTileX; tileX++){\n                        var item = imageCache.tiles[tileY][tileX];\n                        if (item) {\n                            var tileRect = [\n                                Math.floor(imageRect[0] + item.tileX * scaledTileSize[0]),\n                                Math.floor(imageRect[1] + item.tileY * scaledTileSize[1]),\n                                Math.ceil(scaledTileSize[0]),\n                                Math.ceil(scaledTileSize[1])\n                            ];\n                            context.drawImage(item.data, tileRect[0], tileRect[1], tileRect[2], tileRect[3]);\n                        }\n                    }\n                }\n                context.setTransform(a, b, c, d, e, f);\n            }\n        },\n        {\n            key: \"render\",\n            value: function render(context, parsedStyle, object) {\n                var _parsedStyle$x = parsedStyle.x, x = _parsedStyle$x === void 0 ? 0 : _parsedStyle$x, _parsedStyle$y = parsedStyle.y, y = _parsedStyle$y === void 0 ? 0 : _parsedStyle$y, width = parsedStyle.width, height = parsedStyle.height, src = parsedStyle.src, shadowColor = parsedStyle.shadowColor, shadowBlur = parsedStyle.shadowBlur;\n                var imageCache = this.imagePool.getImageSync(src, object);\n                var image = imageCache === null || imageCache === void 0 ? void 0 : imageCache.img;\n                var iw = width;\n                var ih = height;\n                if (!image) {\n                    return;\n                }\n                iw || (iw = image.width);\n                ih || (ih = image.height);\n                var hasShadow = !(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(shadowColor) && shadowBlur > 0;\n                setShadowAndFilter(object, context, hasShadow);\n                // node-canvas will throw the following err:\n                // Error: Image given has not completed loading\n                try {\n                    var _object$ownerDocument = object.ownerDocument.defaultView.getContextService().getDomElement(), viewWidth = _object$ownerDocument.width, viewHeight = _object$ownerDocument.height;\n                    var currentTransform = context.getTransform();\n                    var a = currentTransform.a, b = currentTransform.b, c = currentTransform.c, d = currentTransform.d, e = currentTransform.e, f = currentTransform.f;\n                    // 构建 mat4 矩阵\n                    // prettier-ignore\n                    var transformMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_12__.fromValues(a, c, 0, 0, b, d, 0, 0, 0, 0, 1, 0, e, f, 0, 1);\n                    var imageRect = transformRect([\n                        x,\n                        y,\n                        iw,\n                        ih\n                    ], transformMatrix);\n                    var drawRect = calculateOverlapRect([\n                        0,\n                        0,\n                        viewWidth,\n                        viewHeight\n                    ], imageRect);\n                    if (!drawRect) {\n                        return;\n                    }\n                    if (!object.ownerDocument.defaultView.getConfig().enableLargeImageOptimization) {\n                        ImageRenderer.renderFull(context, parsedStyle, object, {\n                            image: image,\n                            drawRect: [\n                                x,\n                                y,\n                                iw,\n                                ih\n                            ]\n                        });\n                        return;\n                    }\n                    var sizeOfOrigin = imageRect[2] / imageCache.size[0];\n                    if (sizeOfOrigin < (imageCache.downSamplingRate || 0.5)) {\n                        this.renderDownSampled(context, parsedStyle, object, {\n                            src: src,\n                            imageCache: imageCache,\n                            drawRect: [\n                                x,\n                                y,\n                                iw,\n                                ih\n                            ]\n                        });\n                        return;\n                    }\n                    if (!_antv_g_plugin_image_loader__WEBPACK_IMPORTED_MODULE_11__.ImagePool.isSupportTile) {\n                        ImageRenderer.renderFull(context, parsedStyle, object, {\n                            image: image,\n                            drawRect: [\n                                x,\n                                y,\n                                iw,\n                                ih\n                            ]\n                        });\n                        return;\n                    }\n                    this.renderTile(context, parsedStyle, object, {\n                        src: src,\n                        imageCache: imageCache,\n                        imageRect: imageRect,\n                        drawRect: drawRect\n                    });\n                } catch (_unused) {}\n            }\n        },\n        {\n            key: \"drawToContext\",\n            value: function drawToContext(context, object, renderState, plugin, runtime) {\n                this.render(context, object.parsedStyle, object);\n            }\n        }\n    ], [\n        {\n            key: \"renderFull\",\n            value: function renderFull(context, parsedStyle, object, data) {\n                context.drawImage(data.image, Math.floor(data.drawRect[0]), Math.floor(data.drawRect[1]), Math.ceil(data.drawRect[2]), Math.ceil(data.drawRect[3]));\n            }\n        }\n    ]);\n}(DefaultRenderer);\nvar TextRenderer = /*#__PURE__*/ function(_DefaultRenderer) {\n    function TextRenderer() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, TextRenderer);\n        return _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, TextRenderer, arguments);\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(TextRenderer, _DefaultRenderer);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(TextRenderer, [\n        {\n            key: \"render\",\n            value: function render(context, parsedStyle, object, canvasContext, plugin, runtime) {\n                // Trigger text geometry calculation.\n                object.getBounds();\n                var _parsedStyle$lineWidt = parsedStyle.lineWidth, lineWidth = _parsedStyle$lineWidt === void 0 ? 1 : _parsedStyle$lineWidt, _parsedStyle$textAlig = parsedStyle.textAlign, textAlign = _parsedStyle$textAlig === void 0 ? \"start\" : _parsedStyle$textAlig, _parsedStyle$textBase = parsedStyle.textBaseline, textBaseline = _parsedStyle$textBase === void 0 ? \"alphabetic\" : _parsedStyle$textBase, _parsedStyle$lineJoin = parsedStyle.lineJoin, lineJoin = _parsedStyle$lineJoin === void 0 ? \"miter\" : _parsedStyle$lineJoin, _parsedStyle$miterLim = parsedStyle.miterLimit, miterLimit = _parsedStyle$miterLim === void 0 ? 10 : _parsedStyle$miterLim, _parsedStyle$letterSp = parsedStyle.letterSpacing, letterSpacing = _parsedStyle$letterSp === void 0 ? 0 : _parsedStyle$letterSp, stroke = parsedStyle.stroke, fill = parsedStyle.fill, fillRule = parsedStyle.fillRule, _parsedStyle$fillOpac = parsedStyle.fillOpacity, fillOpacity = _parsedStyle$fillOpac === void 0 ? 1 : _parsedStyle$fillOpac, _parsedStyle$strokeOp = parsedStyle.strokeOpacity, strokeOpacity = _parsedStyle$strokeOp === void 0 ? 1 : _parsedStyle$strokeOp, _parsedStyle$opacity = parsedStyle.opacity, opacity = _parsedStyle$opacity === void 0 ? 1 : _parsedStyle$opacity, metrics = parsedStyle.metrics, _parsedStyle$x = parsedStyle.x, x = _parsedStyle$x === void 0 ? 0 : _parsedStyle$x, _parsedStyle$y = parsedStyle.y, y = _parsedStyle$y === void 0 ? 0 : _parsedStyle$y, dx = parsedStyle.dx, dy = parsedStyle.dy, shadowColor = parsedStyle.shadowColor, shadowBlur = parsedStyle.shadowBlur;\n                var font = metrics.font, lines = metrics.lines, height = metrics.height, lineHeight = metrics.lineHeight, lineMetrics = metrics.lineMetrics;\n                context.font = font;\n                context.lineWidth = lineWidth;\n                context.textAlign = textAlign === \"middle\" ? \"center\" : textAlign;\n                var formattedTextBaseline = textBaseline;\n                if (formattedTextBaseline === \"alphabetic\") {\n                    formattedTextBaseline = \"bottom\";\n                }\n                context.lineJoin = lineJoin;\n                if (!(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(miterLimit)) {\n                    context.miterLimit = miterLimit;\n                }\n                var linePositionY = y;\n                // handle vertical text baseline\n                if (textBaseline === \"middle\") {\n                    linePositionY += -height / 2 - lineHeight / 2;\n                } else if (textBaseline === \"bottom\" || textBaseline === \"alphabetic\" || textBaseline === \"ideographic\") {\n                    linePositionY += -height;\n                } else if (textBaseline === \"top\" || textBaseline === \"hanging\") {\n                    linePositionY += -lineHeight;\n                }\n                // account for dx & dy\n                var offsetX = x + (dx || 0);\n                linePositionY += dy || 0;\n                if (lines.length === 1) {\n                    if (formattedTextBaseline === \"bottom\") {\n                        formattedTextBaseline = \"middle\";\n                        linePositionY -= 0.5 * height;\n                    } else if (formattedTextBaseline === \"top\") {\n                        formattedTextBaseline = \"middle\";\n                        linePositionY += 0.5 * height;\n                    }\n                }\n                context.textBaseline = formattedTextBaseline;\n                var hasShadow = !(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(shadowColor) && shadowBlur > 0;\n                setShadowAndFilter(object, context, hasShadow);\n                // draw lines line by line\n                for(var i = 0; i < lines.length; i++){\n                    var linePositionX = lineWidth / 2 + offsetX;\n                    linePositionY += lineHeight;\n                    // no need to re-position X, cause we already set text align\n                    // @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign\n                    if (!(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(stroke) && !stroke.isNone && lineWidth) {\n                        this.drawLetterSpacing(context, object, lines[i], lineMetrics[i], textAlign, linePositionX, linePositionY, letterSpacing, fill, fillRule, fillOpacity, stroke, strokeOpacity, opacity, true, canvasContext, plugin, runtime);\n                    }\n                    if (!(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(fill)) {\n                        this.drawLetterSpacing(context, object, lines[i], lineMetrics[i], textAlign, linePositionX, linePositionY, letterSpacing, fill, fillRule, fillOpacity, stroke, strokeOpacity, opacity, false, canvasContext, plugin, runtime);\n                    }\n                }\n            }\n        },\n        {\n            key: \"drawLetterSpacing\",\n            value: function drawLetterSpacing(context, object, text, lineMetrics, textAlign, x, y, letterSpacing, fill, fillRule, fillOpacity, stroke, strokeOpacity, opacity, isStroke, canvasContext, plugin, runtime) {\n                // letterSpacing of 0 means normal, render all texts directly\n                if (letterSpacing === 0) {\n                    if (isStroke) {\n                        this.strokeText(context, object, text, x, y, stroke, strokeOpacity, canvasContext, plugin, runtime);\n                    } else {\n                        this.fillText(context, object, text, x, y, fill, fillRule, fillOpacity, opacity, canvasContext, plugin, runtime);\n                    }\n                    return;\n                }\n                // draw text using left align\n                var currentTextAlign = context.textAlign;\n                context.textAlign = \"left\";\n                var currentPosition = x;\n                if (textAlign === \"center\" || textAlign === \"middle\") {\n                    currentPosition = x - lineMetrics.width / 2;\n                } else if (textAlign === \"right\" || textAlign === \"end\") {\n                    currentPosition = x - lineMetrics.width;\n                }\n                var stringArray = Array.from(text);\n                var previousWidth = context.measureText(text).width;\n                var currentWidth = 0;\n                for(var i = 0; i < stringArray.length; ++i){\n                    var currentChar = stringArray[i];\n                    if (isStroke) {\n                        this.strokeText(context, object, currentChar, currentPosition, y, stroke, strokeOpacity, canvasContext, plugin, runtime);\n                    } else {\n                        this.fillText(context, object, currentChar, currentPosition, y, fill, fillRule, fillOpacity, opacity, canvasContext, plugin, runtime);\n                    }\n                    currentWidth = context.measureText(text.substring(i + 1)).width;\n                    currentPosition += previousWidth - currentWidth + letterSpacing;\n                    previousWidth = currentWidth;\n                }\n                context.textAlign = currentTextAlign;\n            }\n        },\n        {\n            key: \"fillText\",\n            value: function fillText(context, object, text, x, y, fill, fillRule, fillOpacity, opacity, canvasContext, plugin, runtime) {\n                applyFill(context, object, fill, fillRule, canvasContext, plugin, runtime, this.imagePool, true);\n                var currentGlobalAlpha;\n                var applyOpacity = !(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(fillOpacity) && fillOpacity !== 1;\n                if (applyOpacity) {\n                    currentGlobalAlpha = context.globalAlpha;\n                    context.globalAlpha = fillOpacity * opacity;\n                }\n                context.fillText(text, x, y);\n                if (applyOpacity) {\n                    context.globalAlpha = currentGlobalAlpha;\n                }\n            }\n        },\n        {\n            key: \"strokeText\",\n            value: function strokeText(context, object, text, x, y, stroke, strokeOpacity, canvasContext, plugin, runtime) {\n                applyStroke(context, object, stroke, canvasContext, plugin, runtime, this.imagePool, true);\n                var currentGlobalAlpha;\n                var applyOpacity = !(0,_antv_util__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(strokeOpacity) && strokeOpacity !== 1;\n                if (applyOpacity) {\n                    currentGlobalAlpha = context.globalAlpha;\n                    context.globalAlpha = strokeOpacity;\n                }\n                context.strokeText(text, x, y);\n                if (applyOpacity) {\n                    context.globalAlpha = currentGlobalAlpha;\n                }\n            }\n        },\n        {\n            key: \"drawToContext\",\n            value: function drawToContext(context, object, renderState, plugin, runtime) {\n                this.render(context, object.parsedStyle, object, object.ownerDocument.defaultView.context, plugin, runtime);\n            }\n        }\n    ]);\n}(DefaultRenderer);\nvar Plugin = /*#__PURE__*/ function(_AbstractRendererPlug) {\n    function Plugin() {\n        var _this;\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, Plugin);\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_4___default()(this, Plugin);\n        _this.name = \"canvas-renderer\";\n        _this.options = options;\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Plugin, _AbstractRendererPlug);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(Plugin, [\n        {\n            key: \"init\",\n            value: function init() {\n                var _defaultStyleRenderer;\n                var canvasRendererPluginOptions = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({\n                    dirtyObjectNumThreshold: 500,\n                    dirtyObjectRatioThreshold: 0.8\n                }, this.options);\n                // @ts-ignore\n                var imagePool = this.context.imagePool;\n                var defaultRenderer = new DefaultRenderer(imagePool);\n                var defaultStyleRendererFactory = (_defaultStyleRenderer = {}, _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_defaultStyleRenderer, _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.CIRCLE, defaultRenderer), _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.ELLIPSE, defaultRenderer), _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.RECT, defaultRenderer), _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.IMAGE, new ImageRenderer(imagePool)), _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.TEXT, new TextRenderer(imagePool)), _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.LINE, defaultRenderer), _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.POLYLINE, defaultRenderer), _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.POLYGON, defaultRenderer), _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.PATH, defaultRenderer), _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.GROUP, undefined), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_defaultStyleRenderer, _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.HTML, undefined), _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.MESH, undefined), _antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.Shape.FRAGMENT, undefined));\n                this.context.defaultStyleRendererFactory = defaultStyleRendererFactory;\n                this.context.styleRendererFactory = defaultStyleRendererFactory;\n                this.addRenderingPlugin(new CanvasRendererPlugin(canvasRendererPluginOptions));\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function destroy() {\n                this.removeAllRenderingPlugins();\n                delete this.context.defaultStyleRendererFactory;\n                delete this.context.styleRendererFactory;\n            }\n        }\n    ]);\n}(_antv_g_lite__WEBPACK_IMPORTED_MODULE_6__.AbstractRendererPlugin);\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbnR2K2ctcGx1Z2luLWNhbnZhcy1yZW5kZXJlckAyLjIuMTgvbm9kZV9tb2R1bGVzL0BhbnR2L2ctcGx1Z2luLWNhbnZhcy1yZW5kZXJlci9kaXN0L2luZGV4LmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7OztDQU9DLEdBQ21FO0FBQ0g7QUFDRztBQUNOO0FBQ0o7QUFDRjtBQUNrRjtBQUN4RTtBQUNRO0FBQ2tCO0FBQ0Y7QUFDbkQ7QUFDSjtBQUNxQjtBQUV4RCxJQUFJdUIsZUFBZSxXQUFXLEdBQUVMLHdGQUEwQkEsQ0FBQztBQUMzRDs7OztDQUlDLEdBQ0QsSUFBSU0sdUJBQXVCLFdBQVcsR0FBRTtJQUN0Qzs7R0FFQyxHQUVELFNBQVNBLHFCQUFxQkMsNEJBQTRCLDhEQUE4RDtJQUEvRDtRQUV2RHZCLDRFQUFlQSxDQUFDLElBQUksRUFBRXNCO1FBQ3RCLElBQUksQ0FBQ0UscUJBQXFCLEdBQUcsRUFBRTtRQUMvQixJQUFJLENBQUNDLFdBQVcsR0FBRyxFQUFFO1FBQ3JCQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFTixjQUFjO1lBQ3hDTyxVQUFVO1lBQ1ZDLE9BQU87Z0JBQ0xDLGNBQWMsRUFBRTtnQkFDaEJDLFlBQVk7Z0JBQ1pDLGdCQUFnQixJQUFJQztZQUN0QjtRQUNGO1FBQ0EsSUFBSSxDQUFDQyx3QkFBd0IsR0FBRztRQUNoQyxJQUFJLENBQUNDLGVBQWUsR0FBRztRQUN2Qjs7S0FFQyxHQUNELElBQUksQ0FBQ0MsUUFBUSxHQUFHbkIsOENBQVc7UUFDM0IsSUFBSSxDQUFDcUIsU0FBUyxHQUFHckIsOENBQVc7UUFDNUIsSUFBSSxDQUFDc0IsT0FBTyxHQUFHdEIsOENBQVc7UUFDMUIsSUFBSSxDQUFDdUIsS0FBSyxHQUFHdEIsOENBQVc7UUFDeEIsSUFBSSxDQUFDdUIsS0FBSyxHQUFHdkIsOENBQVc7UUFDeEIs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L2EsT0FBTyxDQUFDcWEsMkJBQTJCO2dCQUMvQyxPQUFPLElBQUksQ0FBQ3JhLE9BQU8sQ0FBQzJJLG9CQUFvQjtZQUMxQztRQUNGO0tBQUU7QUFDSixFQUFFN0ssZ0VBQXNCQTtBQUUyUixDQUNuVCxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9jZXNzLWFuYWx5c2lzLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AYW50ditnLXBsdWdpbi1jYW52YXMtcmVuZGVyZXJAMi4yLjE4L25vZGVfbW9kdWxlcy9AYW50di9nLXBsdWdpbi1jYW52YXMtcmVuZGVyZXIvZGlzdC9pbmRleC5lc20uanM/ZDBhYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBhbnR2L2ctcGx1Z2luLWNhbnZhcy1yZW5kZXJlclxuICogQGRlc2NyaXB0aW9uIEEgRyBwbHVnaW4gb2YgcmVuZGVyZXIgaW1wbGVtZW50YXRpb24gd2l0aCBDYW52YXMyRCBBUElcbiAqIEB2ZXJzaW9uIDIuMi4xOFxuICogQGRhdGUgMS8yMy8yMDI1LCA4OjM0OjExIEFNXG4gKiBAYXV0aG9yIEFudFZpc1xuICogQGRvY3MgaHR0cHM6Ly9nLmFudHYuYW50Z3JvdXAuY29tL1xuICovXG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9jYWxsU3VwZXIgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jYWxsU3VwZXInO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCB7IEVsZW1lbnRFdmVudCwgQUFCQiwgQ3VzdG9tRXZlbnQsIENhbnZhc0V2ZW50LCBTaGFwZSwgTm9kZSwgR3JhZGllbnRUeXBlLCBpc1BhdHRlcm4sIEFic3RyYWN0UmVuZGVyZXJQbHVnaW4gfSBmcm9tICdAYW50di9nLWxpdGUnO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheSc7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXknO1xuaW1wb3J0IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlJztcbmltcG9ydCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXknO1xuaW1wb3J0IHsgbWF0NCwgdmVjMyB9IGZyb20gJ2dsLW1hdHJpeCc7XG5pbXBvcnQgeyBpc05pbCB9IGZyb20gJ0BhbnR2L3V0aWwnO1xuaW1wb3J0IHsgSW1hZ2VQb29sIH0gZnJvbSAnQGFudHYvZy1wbHVnaW4taW1hZ2UtbG9hZGVyJztcblxudmFyIF9yZW5kZXJTdGF0ZSA9IC8qI19fUFVSRV9fKi9fY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInJlbmRlclN0YXRlXCIpO1xuLyoqXG4gKiBzdXBwb3J0IDIgbW9kZXMgaW4gcmVuZGVyaW5nOlxuICogKiBpbW1lZGlhdGVcbiAqICogZGVsYXllZDogcmVuZGVyIGF0IHRoZSBlbmQgb2YgZnJhbWUgd2l0aCBkaXJ0eS1yZWN0YW5nbGVcbiAqL1xudmFyIENhbnZhc1JlbmRlcmVyUGx1Z2luID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIFJCdXNoIHVzZWQgaW4gZGlydHkgcmVjdGFuZ2xlIHJlbmRlcmluZ1xuICAgKi9cblxuICBmdW5jdGlvbiBDYW52YXNSZW5kZXJlclBsdWdpbihjYW52YXNSZW5kZXJlclBsdWdpbk9wdGlvbnMgLy8gcHJpdmF0ZSBzdHlsZVJlbmRlcmVyRmFjdG9yeTogUmVjb3JkPFNoYXBlLCBTdHlsZVJlbmRlcmVyPixcbiAgKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhbnZhc1JlbmRlcmVyUGx1Z2luKTtcbiAgICB0aGlzLnJlbW92ZWRSQnVzaE5vZGVBQUJCcyA9IFtdO1xuICAgIHRoaXMucmVuZGVyUXVldWUgPSBbXTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX3JlbmRlclN0YXRlLCB7XG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIHJlc3RvcmVTdGFjazogW10sXG4gICAgICAgIHByZXZPYmplY3Q6IG51bGwsXG4gICAgICAgIGN1cnJlbnRDb250ZXh0OiBuZXcgTWFwKClcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmNsZWFyRnVsbFNjcmVlbkxhc3RGcmFtZSA9IGZhbHNlO1xuICAgIHRoaXMuY2xlYXJGdWxsU2NyZWVuID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogdmlldyBwcm9qZWN0aW9uIG1hdHJpeFxuICAgICAqL1xuICAgIHRoaXMudnBNYXRyaXggPSBtYXQ0LmNyZWF0ZSgpO1xuICAgIHRoaXMuZHByTWF0cml4ID0gbWF0NC5jcmVhdGUoKTtcbiAgICB0aGlzLnRtcE1hdDQgPSBtYXQ0LmNyZWF0ZSgpO1xuICAgIHRoaXMudmVjM2EgPSB2ZWMzLmNyZWF0ZSgpO1xuICAgIHRoaXMudmVjM2IgPSB2ZWMzLmNyZWF0ZSgpO1xuICAgIHRoaXMudmVjM2MgPSB2ZWMzLmNyZWF0ZSgpO1xuICAgIHRoaXMudmVjM2QgPSB2ZWMzLmNyZWF0ZSgpO1xuICAgIHRoaXMuY2FudmFzUmVuZGVyZXJQbHVnaW5PcHRpb25zID0gY2FudmFzUmVuZGVyZXJQbHVnaW5PcHRpb25zO1xuICB9XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoQ2FudmFzUmVuZGVyZXJQbHVnaW4sIFt7XG4gICAga2V5OiBcImFwcGx5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5KGNvbnRleHQsIHJ1bnRpbWUpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgdmFyIF90aGlzJGNvbnRleHQgPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIGNvbmZpZyA9IF90aGlzJGNvbnRleHQuY29uZmlnLFxuICAgICAgICBjYW1lcmEgPSBfdGhpcyRjb250ZXh0LmNhbWVyYSxcbiAgICAgICAgcmVuZGVyaW5nU2VydmljZSA9IF90aGlzJGNvbnRleHQucmVuZGVyaW5nU2VydmljZSxcbiAgICAgICAgcmVuZGVyaW5nQ29udGV4dCA9IF90aGlzJGNvbnRleHQucmVuZGVyaW5nQ29udGV4dCxcbiAgICAgICAgckJ1c2hSb290ID0gX3RoaXMkY29udGV4dC5yQnVzaFJvb3QsXG4gICAgICAgIHBhdGhHZW5lcmF0b3JGYWN0b3J5ID0gX3RoaXMkY29udGV4dC5wYXRoR2VuZXJhdG9yRmFjdG9yeTtcbiAgICAgIHZhciBlbmFibGVSZW5kZXJpbmdPcHRpbWl6YXRpb24gPSBjb25maWcucmVuZGVyZXIuZ2V0Q29uZmlnKCkuZW5hYmxlUmVuZGVyaW5nT3B0aW1pemF0aW9uO1xuICAgICAgY29uZmlnLnJlbmRlcmVyLmdldENvbmZpZygpLmVuYWJsZURpcnR5Q2hlY2sgPSBmYWxzZTtcbiAgICAgIGNvbmZpZy5yZW5kZXJlci5nZXRDb25maWcoKS5lbmFibGVEaXJ0eVJlY3RhbmdsZVJlbmRlcmluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5yQnVzaCA9IHJCdXNoUm9vdDtcbiAgICAgIHRoaXMucGF0aEdlbmVyYXRvckZhY3RvcnkgPSBwYXRoR2VuZXJhdG9yRmFjdG9yeTtcbiAgICAgIHZhciBjb250ZXh0U2VydmljZSA9IGNvbnRleHQuY29udGV4dFNlcnZpY2U7XG4gICAgICB2YXIgY2FudmFzID0gcmVuZGVyaW5nQ29udGV4dC5yb290Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gICAgICB2YXIgaGFuZGxlVW5tb3VudGVkID0gZnVuY3Rpb24gaGFuZGxlVW5tb3VudGVkKGUpIHtcbiAgICAgICAgdmFyIG9iamVjdCA9IGUudGFyZ2V0O1xuXG4gICAgICAgIC8vIHJlbW92ZSByLWJ1c2ggbm9kZVxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHZhciByQnVzaE5vZGUgPSBvYmplY3QuckJ1c2hOb2RlO1xuICAgICAgICBpZiAockJ1c2hOb2RlLmFhYmIpIHtcbiAgICAgICAgICAvLyBzYXZlIHJlbW92ZWQgYWFiYnMgZm9yIGRpcnR5LXJlY3RhbmdsZSByZW5kZXJpbmcgbGF0ZXJcbiAgICAgICAgICBfdGhpcy5yZW1vdmVkUkJ1c2hOb2RlQUFCQnMucHVzaChyQnVzaE5vZGUuYWFiYik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgaGFuZGxlQ3VsbGVkID0gZnVuY3Rpb24gaGFuZGxlQ3VsbGVkKGUpIHtcbiAgICAgICAgdmFyIG9iamVjdCA9IGUudGFyZ2V0O1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHZhciByQnVzaE5vZGUgPSBvYmplY3QuckJ1c2hOb2RlO1xuICAgICAgICBpZiAockJ1c2hOb2RlLmFhYmIpIHtcbiAgICAgICAgICAvLyBzYXZlIHJlbW92ZWQgYWFiYnMgZm9yIGRpcnR5LXJlY3RhbmdsZSByZW5kZXJpbmcgbGF0ZXJcbiAgICAgICAgICBfdGhpcy5yZW1vdmVkUkJ1c2hOb2RlQUFCQnMucHVzaChyQnVzaE5vZGUuYWFiYik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZW5kZXJpbmdTZXJ2aWNlLmhvb2tzLmluaXQudGFwKENhbnZhc1JlbmRlcmVyUGx1Z2luLnRhZywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihFbGVtZW50RXZlbnQuVU5NT1VOVEVELCBoYW5kbGVVbm1vdW50ZWQpO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihFbGVtZW50RXZlbnQuQ1VMTEVELCBoYW5kbGVDdWxsZWQpO1xuXG4gICAgICAgIC8vIGNsZWFyIGZ1bGxzY3JlZW5cbiAgICAgICAgdmFyIGRwciA9IGNvbnRleHRTZXJ2aWNlLmdldERQUigpO1xuICAgICAgICB2YXIgd2lkdGggPSBjb25maWcud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gY29uZmlnLmhlaWdodDtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBjb250ZXh0U2VydmljZS5nZXRDb250ZXh0KCk7XG4gICAgICAgIF90aGlzLmNsZWFyUmVjdChjb250ZXh0LCAwLCAwLCB3aWR0aCAqIGRwciwgaGVpZ2h0ICogZHByLCBjb25maWcuYmFja2dyb3VuZCk7XG4gICAgICB9KTtcbiAgICAgIHJlbmRlcmluZ1NlcnZpY2UuaG9va3MuZGVzdHJveS50YXAoQ2FudmFzUmVuZGVyZXJQbHVnaW4udGFnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKEVsZW1lbnRFdmVudC5VTk1PVU5URUQsIGhhbmRsZVVubW91bnRlZCk7XG4gICAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKEVsZW1lbnRFdmVudC5DVUxMRUQsIGhhbmRsZUN1bGxlZCk7XG4gICAgICAgIF90aGlzLnJlbmRlclF1ZXVlID0gW107XG4gICAgICAgIF90aGlzLnJlbW92ZWRSQnVzaE5vZGVBQUJCcyA9IFtdO1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXMsIF9yZW5kZXJTdGF0ZSlbX3JlbmRlclN0YXRlXSA9IHtcbiAgICAgICAgICByZXN0b3JlU3RhY2s6IFtdLFxuICAgICAgICAgIHByZXZPYmplY3Q6IG51bGwsXG4gICAgICAgICAgY3VycmVudENvbnRleHQ6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgcmVuZGVyaW5nU2VydmljZS5ob29rcy5iZWdpbkZyYW1lLnRhcChDYW52YXNSZW5kZXJlclBsdWdpbi50YWcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9jYW52YXMkY29udGV4dCRyZW5kZTtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBjb250ZXh0U2VydmljZS5nZXRDb250ZXh0KCk7XG4gICAgICAgIHZhciBkcHIgPSBjb250ZXh0U2VydmljZS5nZXREUFIoKTtcbiAgICAgICAgdmFyIHdpZHRoID0gY29uZmlnLndpZHRoLFxuICAgICAgICAgIGhlaWdodCA9IGNvbmZpZy5oZWlnaHQ7XG4gICAgICAgIHZhciBfdGhpcyRjYW52YXNSZW5kZXJlclAgPSBfdGhpcy5jYW52YXNSZW5kZXJlclBsdWdpbk9wdGlvbnMsXG4gICAgICAgICAgZGlydHlPYmplY3ROdW1UaHJlc2hvbGQgPSBfdGhpcyRjYW52YXNSZW5kZXJlclAuZGlydHlPYmplY3ROdW1UaHJlc2hvbGQsXG4gICAgICAgICAgZGlydHlPYmplY3RSYXRpb1RocmVzaG9sZCA9IF90aGlzJGNhbnZhc1JlbmRlcmVyUC5kaXJ0eU9iamVjdFJhdGlvVGhyZXNob2xkO1xuXG4gICAgICAgIC8vIHNvbWUgaGV1cmlzdGljIGNvbmRpdGlvbnMgc3VjaCBhcyA4MCUgb2JqZWN0IGNoYW5nZWRcbiAgICAgICAgdmFyIF9yZW5kZXJpbmdTZXJ2aWNlJGdldCA9IHJlbmRlcmluZ1NlcnZpY2UuZ2V0U3RhdHMoKSxcbiAgICAgICAgICB0b3RhbCA9IF9yZW5kZXJpbmdTZXJ2aWNlJGdldC50b3RhbCxcbiAgICAgICAgICByZW5kZXJlZCA9IF9yZW5kZXJpbmdTZXJ2aWNlJGdldC5yZW5kZXJlZDtcbiAgICAgICAgdmFyIHJhdGlvID0gcmVuZGVyZWQgLyB0b3RhbDtcbiAgICAgICAgX3RoaXMuY2xlYXJGdWxsU2NyZWVuID0gX3RoaXMuY2xlYXJGdWxsU2NyZWVuTGFzdEZyYW1lIHx8XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgISgoX2NhbnZhcyRjb250ZXh0JHJlbmRlID0gY2FudmFzLmNvbnRleHQucmVuZGVyaW5nUGx1Z2luc1sxXSkgIT09IG51bGwgJiYgX2NhbnZhcyRjb250ZXh0JHJlbmRlICE9PSB2b2lkIDAgJiYgX2NhbnZhcyRjb250ZXh0JHJlbmRlLmlzRmlyc3RUaW1lUmVuZGVyaW5nRmluaXNoZWQpIHx8IHJlbmRlcmluZ1NlcnZpY2UuZGlzYWJsZURpcnR5UmVjdGFuZ2xlUmVuZGVyaW5nKCkgfHwgcmVuZGVyZWQgPiBkaXJ0eU9iamVjdE51bVRocmVzaG9sZCAmJiByYXRpbyA+IGRpcnR5T2JqZWN0UmF0aW9UaHJlc2hvbGQ7XG4gICAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0LnJlc2V0VHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb250ZXh0LnJlc2V0VHJhbnNmb3JtKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoX3RoaXMuY2xlYXJGdWxsU2NyZWVuKSB7XG4gICAgICAgICAgICBfdGhpcy5jbGVhclJlY3QoY29udGV4dCwgMCwgMCwgd2lkdGggKiBkcHIsIGhlaWdodCAqIGRwciwgY29uZmlnLmJhY2tncm91bmQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8qKlxuICAgICAgICogcmVuZGVyIG9iamVjdHMgYnkgei1pbmRleFxuICAgICAgICpcbiAgICAgICAqIC0gVGhlIGxldmVsIG9mIHRoZSBjaGlsZCBub2RlIHdpbGwgYmUgYWZmZWN0ZWQgYnkgdGhlIGxldmVsIG9mIHRoZSBwYXJlbnQgbm9kZVxuICAgICAgICovXG4gICAgICB2YXIgcmVuZGVyQnlaSW5kZXggPSBmdW5jdGlvbiByZW5kZXJCeVpJbmRleChvYmplY3QsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIHN0YWNrID0gW29iamVjdF07XG4gICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnRPYmplY3QgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICBpZiAoY3VycmVudE9iamVjdC5pc1Zpc2libGUoKSAmJiAhY3VycmVudE9iamVjdC5pc0N1bGxlZCgpKSB7XG4gICAgICAgICAgICBpZiAoZW5hYmxlUmVuZGVyaW5nT3B0aW1pemF0aW9uKSB7XG4gICAgICAgICAgICAgIF90aGlzLnJlbmRlckRpc3BsYXlPYmplY3RPcHRpbWl6ZWQoY3VycmVudE9iamVjdCwgY29udGV4dCwgX3RoaXMuY29udGV4dCwgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzLCBfcmVuZGVyU3RhdGUpW19yZW5kZXJTdGF0ZV0sIHJ1bnRpbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgX3RoaXMucmVuZGVyRGlzcGxheU9iamVjdChjdXJyZW50T2JqZWN0LCBjb250ZXh0LCBfdGhpcy5jb250ZXh0LCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXMsIF9yZW5kZXJTdGF0ZSlbX3JlbmRlclN0YXRlXSwgcnVudGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvYmplY3RzID0gY3VycmVudE9iamVjdC5zb3J0YWJsZS5zb3J0ZWQgfHwgY3VycmVudE9iamVjdC5jaGlsZE5vZGVzO1xuICAgICAgICAgIC8vIHNob3VsZCBhY2NvdW50IGZvciB6LWluZGV4XG4gICAgICAgICAgZm9yICh2YXIgaSA9IG9iamVjdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHN0YWNrLnB1c2gob2JqZWN0c1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvLyByZW5kZXIgYXQgdGhlIGVuZCBvZiBmcmFtZVxuICAgICAgcmVuZGVyaW5nU2VydmljZS5ob29rcy5lbmRGcmFtZS50YXAoQ2FudmFzUmVuZGVyZXJQbHVnaW4udGFnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFNraXAgcmVuZGVyaW5nLlxuICAgICAgICBpZiAocmVuZGVyaW5nQ29udGV4dC5yb290LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgX3RoaXMuY2xlYXJGdWxsU2NyZWVuTGFzdEZyYW1lID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZW5hYmxlUmVuZGVyaW5nT3B0aW1pemF0aW9uID0gY29uZmlnLnJlbmRlcmVyLmdldENvbmZpZygpLmVuYWJsZVJlbmRlcmluZ09wdGltaXphdGlvbjtcblxuICAgICAgICAvLyBpbml0XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpcywgX3JlbmRlclN0YXRlKVtfcmVuZGVyU3RhdGVdID0ge1xuICAgICAgICAgIHJlc3RvcmVTdGFjazogW10sXG4gICAgICAgICAgcHJldk9iamVjdDogbnVsbCxcbiAgICAgICAgICBjdXJyZW50Q29udGV4dDogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzLCBfcmVuZGVyU3RhdGUpW19yZW5kZXJTdGF0ZV0uY3VycmVudENvbnRleHRcbiAgICAgICAgfTtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzLCBfcmVuZGVyU3RhdGUpW19yZW5kZXJTdGF0ZV0uY3VycmVudENvbnRleHQuY2xlYXIoKTtcbiAgICAgICAgX3RoaXMuY2xlYXJGdWxsU2NyZWVuTGFzdEZyYW1lID0gZmFsc2U7XG4gICAgICAgIHZhciBjb250ZXh0ID0gY29udGV4dFNlcnZpY2UuZ2V0Q29udGV4dCgpO1xuICAgICAgICAvLyBjbGVhciAmIGNsaXAgZGlydHkgcmVjdGFuZ2xlXG4gICAgICAgIHZhciBkcHIgPSBjb250ZXh0U2VydmljZS5nZXREUFIoKTtcbiAgICAgICAgbWF0NC5mcm9tU2NhbGluZyhfdGhpcy5kcHJNYXRyaXgsIFtkcHIsIGRwciwgMV0pO1xuICAgICAgICBtYXQ0Lm11bHRpcGx5KF90aGlzLnZwTWF0cml4LCBfdGhpcy5kcHJNYXRyaXgsIGNhbWVyYS5nZXRPcnRob01hdHJpeCgpKTtcbiAgICAgICAgaWYgKF90aGlzLmNsZWFyRnVsbFNjcmVlbikge1xuICAgICAgICAgIC8vIGNvbnNvbGUudGltZSgncmVuZGVyQnlaSW5kZXgnKTtcbiAgICAgICAgICBpZiAoZW5hYmxlUmVuZGVyaW5nT3B0aW1pemF0aW9uKSB7XG4gICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcbiAgICAgICAgICAgIHJlbmRlckJ5WkluZGV4KHJlbmRlcmluZ0NvbnRleHQucm9vdCwgY29udGV4dCk7XG4gICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVuZGVyQnlaSW5kZXgocmVuZGVyaW5nQ29udGV4dC5yb290LCBjb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gY29uc29sZS50aW1lRW5kKCdyZW5kZXJCeVpJbmRleCcpO1xuXG4gICAgICAgICAgX3RoaXMucmVtb3ZlZFJCdXNoTm9kZUFBQkJzID0gW107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ2NhbnZhcyByZW5kZXJlciBuZXh0Li4uJywgdGhpcy5yZW5kZXJRdWV1ZSk7XG4gICAgICAgICAgLy8gbWVyZ2UgcmVtb3ZlZCBBQUJCXG4gICAgICAgICAgdmFyIGRpcnR5UmVuZGVyQm91bmRzID0gX3RoaXMuc2FmZU1lcmdlQUFCQi5hcHBseShfdGhpcywgW190aGlzLm1lcmdlRGlydHlBQUJCcyhfdGhpcy5yZW5kZXJRdWV1ZSldLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoX3RoaXMucmVtb3ZlZFJCdXNoTm9kZUFBQkJzLm1hcChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgdmFyIG1pblggPSBfcmVmLm1pblgsXG4gICAgICAgICAgICAgIG1pblkgPSBfcmVmLm1pblksXG4gICAgICAgICAgICAgIG1heFggPSBfcmVmLm1heFgsXG4gICAgICAgICAgICAgIG1heFkgPSBfcmVmLm1heFk7XG4gICAgICAgICAgICB2YXIgYWFiYiA9IG5ldyBBQUJCKCk7XG4gICAgICAgICAgICBhYWJiLnNldE1pbk1heChcbiAgICAgICAgICAgIC8vIHZlYzMuZnJvbVZhbHVlcyhtaW5YLCBtaW5ZLCAwKSxcbiAgICAgICAgICAgIC8vIHZlYzMuZnJvbVZhbHVlcyhtYXhYLCBtYXhZLCAwKSxcbiAgICAgICAgICAgIFttaW5YLCBtaW5ZLCAwXSwgW21heFgsIG1heFksIDBdKTtcbiAgICAgICAgICAgIHJldHVybiBhYWJiO1xuICAgICAgICAgIH0pKSkpO1xuICAgICAgICAgIF90aGlzLnJlbW92ZWRSQnVzaE5vZGVBQUJCcyA9IFtdO1xuICAgICAgICAgIGlmIChBQUJCLmlzRW1wdHkoZGlydHlSZW5kZXJCb3VuZHMpKSB7XG4gICAgICAgICAgICBfdGhpcy5yZW5kZXJRdWV1ZSA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZGlydHlSZWN0ID0gX3RoaXMuY29udmVydEFBQkIyUmVjdChkaXJ0eVJlbmRlckJvdW5kcyk7XG4gICAgICAgICAgdmFyIHggPSBkaXJ0eVJlY3QueCxcbiAgICAgICAgICAgIHkgPSBkaXJ0eVJlY3QueSxcbiAgICAgICAgICAgIHdpZHRoID0gZGlydHlSZWN0LndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0ID0gZGlydHlSZWN0LmhlaWdodDtcbiAgICAgICAgICB2YXIgdGwgPSB2ZWMzLnRyYW5zZm9ybU1hdDQoX3RoaXMudmVjM2EsIFt4LCB5LCAwXSwgX3RoaXMudnBNYXRyaXgpO1xuICAgICAgICAgIHZhciB0ciA9IHZlYzMudHJhbnNmb3JtTWF0NChfdGhpcy52ZWMzYiwgW3ggKyB3aWR0aCwgeSwgMF0sIF90aGlzLnZwTWF0cml4KTtcbiAgICAgICAgICB2YXIgYmwgPSB2ZWMzLnRyYW5zZm9ybU1hdDQoX3RoaXMudmVjM2MsIFt4LCB5ICsgaGVpZ2h0LCAwXSwgX3RoaXMudnBNYXRyaXgpO1xuICAgICAgICAgIHZhciBiciA9IHZlYzMudHJhbnNmb3JtTWF0NChfdGhpcy52ZWMzZCwgW3ggKyB3aWR0aCwgeSArIGhlaWdodCwgMF0sIF90aGlzLnZwTWF0cml4KTtcbiAgICAgICAgICB2YXIgbWlueCA9IE1hdGgubWluKHRsWzBdLCB0clswXSwgYnJbMF0sIGJsWzBdKTtcbiAgICAgICAgICB2YXIgbWlueSA9IE1hdGgubWluKHRsWzFdLCB0clsxXSwgYnJbMV0sIGJsWzFdKTtcbiAgICAgICAgICB2YXIgbWF4eCA9IE1hdGgubWF4KHRsWzBdLCB0clswXSwgYnJbMF0sIGJsWzBdKTtcbiAgICAgICAgICB2YXIgbWF4eSA9IE1hdGgubWF4KHRsWzFdLCB0clsxXSwgYnJbMV0sIGJsWzFdKTtcbiAgICAgICAgICB2YXIgaXggPSBNYXRoLmZsb29yKG1pbngpO1xuICAgICAgICAgIHZhciBpeSA9IE1hdGguZmxvb3IobWlueSk7XG4gICAgICAgICAgdmFyIGl3aWR0aCA9IE1hdGguY2VpbChtYXh4IC0gbWlueCk7XG4gICAgICAgICAgdmFyIGloZWlnaHQgPSBNYXRoLmNlaWwobWF4eSAtIG1pbnkpO1xuICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xuICAgICAgICAgIF90aGlzLmNsZWFyUmVjdChjb250ZXh0LCBpeCwgaXksIGl3aWR0aCwgaWhlaWdodCwgY29uZmlnLmJhY2tncm91bmQpO1xuICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgY29udGV4dC5yZWN0KGl4LCBpeSwgaXdpZHRoLCBpaGVpZ2h0KTtcbiAgICAgICAgICBjb250ZXh0LmNsaXAoKTtcblxuICAgICAgICAgIC8vIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NhbnZhc19BUEkvVHV0b3JpYWwvVHJhbnNmb3JtYXRpb25zXG4gICAgICAgICAgY29udGV4dC5zZXRUcmFuc2Zvcm0oX3RoaXMudnBNYXRyaXhbMF0sIF90aGlzLnZwTWF0cml4WzFdLCBfdGhpcy52cE1hdHJpeFs0XSwgX3RoaXMudnBNYXRyaXhbNV0sIF90aGlzLnZwTWF0cml4WzEyXSwgX3RoaXMudnBNYXRyaXhbMTNdKTtcblxuICAgICAgICAgIC8vIGRyYXcgZGlydHkgcmVjdGFuZ2xlXG4gICAgICAgICAgdmFyIF9jb25maWckcmVuZGVyZXIkZ2V0QyA9IGNvbmZpZy5yZW5kZXJlci5nZXRDb25maWcoKSxcbiAgICAgICAgICAgIGVuYWJsZURpcnR5UmVjdGFuZ2xlUmVuZGVyaW5nRGVidWcgPSBfY29uZmlnJHJlbmRlcmVyJGdldEMuZW5hYmxlRGlydHlSZWN0YW5nbGVSZW5kZXJpbmdEZWJ1ZztcbiAgICAgICAgICBpZiAoZW5hYmxlRGlydHlSZWN0YW5nbGVSZW5kZXJpbmdEZWJ1Zykge1xuICAgICAgICAgICAgY2FudmFzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KENhbnZhc0V2ZW50LkRJUlRZX1JFQ1RBTkdMRSwge1xuICAgICAgICAgICAgICBkaXJ0eVJlY3Q6IHtcbiAgICAgICAgICAgICAgICB4OiBpeCxcbiAgICAgICAgICAgICAgICB5OiBpeSxcbiAgICAgICAgICAgICAgICB3aWR0aDogaXdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaWhlaWdodFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gc2VhcmNoIG9iamVjdHMgaW50ZXJzZWN0IHdpdGggZGlydHkgcmVjdGFuZ2xlXG4gICAgICAgICAgdmFyIGRpcnR5T2JqZWN0cyA9IF90aGlzLnNlYXJjaERpcnR5T2JqZWN0cyhkaXJ0eVJlbmRlckJvdW5kcyk7XG5cbiAgICAgICAgICAvLyBkbyByZW5kZXJpbmdcbiAgICAgICAgICBkaXJ0eU9iamVjdHNcbiAgICAgICAgICAvLyBzb3J0IGJ5IHotaW5kZXhcbiAgICAgICAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGEuc29ydGFibGUucmVuZGVyT3JkZXIgLSBiLnNvcnRhYmxlLnJlbmRlck9yZGVyO1xuICAgICAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgICAgICAgLy8gY3VsbGVkIG9iamVjdCBzaG91bGQgbm90IGJlIHJlbmRlcmVkXG4gICAgICAgICAgICBpZiAob2JqZWN0ICYmIG9iamVjdC5pc1Zpc2libGUoKSAmJiAhb2JqZWN0LmlzQ3VsbGVkKCkpIHtcbiAgICAgICAgICAgICAgX3RoaXMucmVuZGVyRGlzcGxheU9iamVjdChvYmplY3QsIGNvbnRleHQsIF90aGlzLmNvbnRleHQsIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpcywgX3JlbmRlclN0YXRlKVtfcmVuZGVyU3RhdGVdLCBydW50aW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcblxuICAgICAgICAgIC8vIHNhdmUgZGlydHkgQUFCQnMgaW4gbGFzdCBmcmFtZVxuICAgICAgICAgIF90aGlzLnJlbmRlclF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgICAgICAgX3RoaXMuc2F2ZURpcnR5QUFCQihvYmplY3QpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gY2xlYXIgcXVldWVcbiAgICAgICAgICBfdGhpcy5yZW5kZXJRdWV1ZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcG9wIHJlc3RvcmUgc3RhY2ssIGVnLiByb290IC0+IHBhcmVudCAtPiBjaGlsZFxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXMsIF9yZW5kZXJTdGF0ZSlbX3JlbmRlclN0YXRlXS5yZXN0b3JlU3RhY2suZm9yRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBjbGVhciByZXN0b3JlIHN0YWNrXG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpcywgX3JlbmRlclN0YXRlKVtfcmVuZGVyU3RhdGVdLnJlc3RvcmVTdGFjayA9IFtdO1xuICAgICAgfSk7XG4gICAgICByZW5kZXJpbmdTZXJ2aWNlLmhvb2tzLnJlbmRlci50YXAoQ2FudmFzUmVuZGVyZXJQbHVnaW4udGFnLCBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICAgIGlmICghX3RoaXMuY2xlYXJGdWxsU2NyZWVuKSB7XG4gICAgICAgICAgLy8gcmVuZGVyIGF0IHRoZSBlbmQgb2YgZnJhbWVcbiAgICAgICAgICBfdGhpcy5yZW5kZXJRdWV1ZS5wdXNoKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjbGVhclJlY3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJSZWN0KGNvbnRleHQsIHgsIHksIHdpZHRoLCBoZWlnaHQsIGJhY2tncm91bmQpIHtcbiAgICAgIC8vIGNsZWFyUmVjdCBpcyBmYXN0ZXIgdGhhbiBmaWxsUmVjdCBAc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zMDgzMDI1M1xuICAgICAgY29udGV4dC5jbGVhclJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICBpZiAoYmFja2dyb3VuZCkge1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGJhY2tncm91bmQ7XG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlckRpc3BsYXlPYmplY3RPcHRpbWl6ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyRGlzcGxheU9iamVjdE9wdGltaXplZChvYmplY3QsIGNvbnRleHQsIGNhbnZhc0NvbnRleHQsIHJlbmRlclN0YXRlLCBydW50aW1lKSB7XG4gICAgICB2YXIgbm9kZU5hbWUgPSBvYmplY3Qubm9kZU5hbWU7XG4gICAgICB2YXIgdXBkYXRlVHJhbnNmb3JtID0gZmFsc2U7XG4gICAgICB2YXIgY2xpcERyYXcgPSBmYWxzZTtcblxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIHN0eWxlUmVuZGVyZXIgPSB0aGlzLmNvbnRleHQuc3R5bGVSZW5kZXJlckZhY3Rvcnlbbm9kZU5hbWVdO1xuICAgICAgdmFyIGdlbmVyYXRlUGF0aCA9IHRoaXMucGF0aEdlbmVyYXRvckZhY3Rvcnlbbm9kZU5hbWVdO1xuXG4gICAgICAvLyBjbGlwIHBhdGhcbiAgICAgIHZhciBjbGlwUGF0aCA9IG9iamVjdC5wYXJzZWRTdHlsZS5jbGlwUGF0aDtcbiAgICAgIGlmIChjbGlwUGF0aCkge1xuICAgICAgICB1cGRhdGVUcmFuc2Zvcm0gPSAhcmVuZGVyU3RhdGUucHJldk9iamVjdCB8fCAhbWF0NC5leGFjdEVxdWFscyhjbGlwUGF0aC5nZXRXb3JsZFRyYW5zZm9ybSgpLCByZW5kZXJTdGF0ZS5wcmV2T2JqZWN0LmdldFdvcmxkVHJhbnNmb3JtKCkpO1xuICAgICAgICBpZiAodXBkYXRlVHJhbnNmb3JtKSB7XG4gICAgICAgICAgdGhpcy5hcHBseVdvcmxkVHJhbnNmb3JtKGNvbnRleHQsIGNsaXBQYXRoKTtcbiAgICAgICAgICByZW5kZXJTdGF0ZS5wcmV2T2JqZWN0ID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGdlbmVyYXRlIHBhdGggaW4gbG9jYWwgc3BhY2VcbiAgICAgICAgdmFyIF9nZW5lcmF0ZVBhdGggPSB0aGlzLnBhdGhHZW5lcmF0b3JGYWN0b3J5W2NsaXBQYXRoLm5vZGVOYW1lXTtcbiAgICAgICAgaWYgKF9nZW5lcmF0ZVBhdGgpIHtcbiAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcbiAgICAgICAgICBjbGlwRHJhdyA9IHRydWU7XG4gICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICBfZ2VuZXJhdGVQYXRoKGNvbnRleHQsIGNsaXBQYXRoLnBhcnNlZFN0eWxlKTtcbiAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgIGNvbnRleHQuY2xpcCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGZpbGwgJiBzdHJva2VcblxuICAgICAgaWYgKHN0eWxlUmVuZGVyZXIpIHtcbiAgICAgICAgdXBkYXRlVHJhbnNmb3JtID0gIXJlbmRlclN0YXRlLnByZXZPYmplY3QgfHwgIW1hdDQuZXhhY3RFcXVhbHMob2JqZWN0LmdldFdvcmxkVHJhbnNmb3JtKCksIHJlbmRlclN0YXRlLnByZXZPYmplY3QuZ2V0V29ybGRUcmFuc2Zvcm0oKSk7XG4gICAgICAgIGlmICh1cGRhdGVUcmFuc2Zvcm0pIHtcbiAgICAgICAgICB0aGlzLmFwcGx5V29ybGRUcmFuc2Zvcm0oY29udGV4dCwgb2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm9yY2VVcGRhdGVTdHlsZSA9ICFyZW5kZXJTdGF0ZS5wcmV2T2JqZWN0O1xuICAgICAgICBpZiAoIWZvcmNlVXBkYXRlU3R5bGUpIHtcbiAgICAgICAgICB2YXIgcHJldk5vZGVOYW1lID0gcmVuZGVyU3RhdGUucHJldk9iamVjdC5ub2RlTmFtZTtcbiAgICAgICAgICBpZiAobm9kZU5hbWUgPT09IFNoYXBlLlRFWFQpIHtcbiAgICAgICAgICAgIGZvcmNlVXBkYXRlU3R5bGUgPSBwcmV2Tm9kZU5hbWUgIT09IFNoYXBlLlRFWFQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChub2RlTmFtZSA9PT0gU2hhcGUuSU1BR0UpIHtcbiAgICAgICAgICAgIGZvcmNlVXBkYXRlU3R5bGUgPSBwcmV2Tm9kZU5hbWUgIT09IFNoYXBlLklNQUdFO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3JjZVVwZGF0ZVN0eWxlID0gcHJldk5vZGVOYW1lID09PSBTaGFwZS5URVhUIHx8IHByZXZOb2RlTmFtZSA9PT0gU2hhcGUuSU1BR0U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN0eWxlUmVuZGVyZXIuYXBwbHlTdHlsZVRvQ29udGV4dChjb250ZXh0LCBvYmplY3QsIGZvcmNlVXBkYXRlU3R5bGUsIHJlbmRlclN0YXRlKTtcbiAgICAgICAgcmVuZGVyU3RhdGUucHJldk9iamVjdCA9IG9iamVjdDtcbiAgICAgIH1cbiAgICAgIGlmIChnZW5lcmF0ZVBhdGgpIHtcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgZ2VuZXJhdGVQYXRoKGNvbnRleHQsIG9iamVjdC5wYXJzZWRTdHlsZSk7XG4gICAgICAgIGlmIChub2RlTmFtZSAhPT0gU2hhcGUuTElORSAmJiBub2RlTmFtZSAhPT0gU2hhcGUuUEFUSCAmJiBub2RlTmFtZSAhPT0gU2hhcGUuUE9MWUxJTkUpIHtcbiAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGZpbGwgJiBzdHJva2VcbiAgICAgIGlmIChzdHlsZVJlbmRlcmVyKSB7XG4gICAgICAgIHN0eWxlUmVuZGVyZXIuZHJhd1RvQ29udGV4dChjb250ZXh0LCBvYmplY3QsIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVuZGVyU3RhdGUpW19yZW5kZXJTdGF0ZV0sIHRoaXMsIHJ1bnRpbWUpO1xuICAgICAgfVxuICAgICAgaWYgKGNsaXBEcmF3KSB7XG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBmaW5pc2ggcmVuZGVyaW5nLCBjbGVhciBkaXJ0eSBmbGFnXG4gICAgICBvYmplY3QucmVuZGVyYWJsZS5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJEaXNwbGF5T2JqZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckRpc3BsYXlPYmplY3Qob2JqZWN0LCBjb250ZXh0LCBjYW52YXNDb250ZXh0LCByZW5kZXJTdGF0ZSwgcnVudGltZSkge1xuICAgICAgdmFyIG5vZGVOYW1lID0gb2JqZWN0Lm5vZGVOYW1lO1xuXG4gICAgICAvLyByZXN0b3JlIHRvIGl0cyBhbmNlc3RvclxuXG4gICAgICB2YXIgcGFyZW50ID0gcmVuZGVyU3RhdGUucmVzdG9yZVN0YWNrW3JlbmRlclN0YXRlLnJlc3RvcmVTdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChwYXJlbnQgJiYgIShvYmplY3QuY29tcGFyZURvY3VtZW50UG9zaXRpb24ocGFyZW50KSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTlMpKSB7XG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgICAgICByZW5kZXJTdGF0ZS5yZXN0b3JlU3RhY2sucG9wKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBzdHlsZVJlbmRlcmVyID0gdGhpcy5jb250ZXh0LnN0eWxlUmVuZGVyZXJGYWN0b3J5W25vZGVOYW1lXTtcbiAgICAgIHZhciBnZW5lcmF0ZVBhdGggPSB0aGlzLnBhdGhHZW5lcmF0b3JGYWN0b3J5W25vZGVOYW1lXTtcblxuICAgICAgLy8gY2xpcCBwYXRoXG4gICAgICB2YXIgY2xpcFBhdGggPSBvYmplY3QucGFyc2VkU3R5bGUuY2xpcFBhdGg7XG4gICAgICBpZiAoY2xpcFBhdGgpIHtcbiAgICAgICAgdGhpcy5hcHBseVdvcmxkVHJhbnNmb3JtKGNvbnRleHQsIGNsaXBQYXRoKTtcblxuICAgICAgICAvLyBnZW5lcmF0ZSBwYXRoIGluIGxvY2FsIHNwYWNlXG4gICAgICAgIHZhciBfZ2VuZXJhdGVQYXRoMiA9IHRoaXMucGF0aEdlbmVyYXRvckZhY3RvcnlbY2xpcFBhdGgubm9kZU5hbWVdO1xuICAgICAgICBpZiAoX2dlbmVyYXRlUGF0aDIpIHtcbiAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcblxuICAgICAgICAgIC8vIHNhdmUgY2xpcFxuICAgICAgICAgIHJlbmRlclN0YXRlLnJlc3RvcmVTdGFjay5wdXNoKG9iamVjdCk7XG4gICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICBfZ2VuZXJhdGVQYXRoMihjb250ZXh0LCBjbGlwUGF0aC5wYXJzZWRTdHlsZSk7XG4gICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICBjb250ZXh0LmNsaXAoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBmaWxsICYgc3Ryb2tlXG5cbiAgICAgIGlmIChzdHlsZVJlbmRlcmVyKSB7XG4gICAgICAgIHRoaXMuYXBwbHlXb3JsZFRyYW5zZm9ybShjb250ZXh0LCBvYmplY3QpO1xuICAgICAgICBjb250ZXh0LnNhdmUoKTtcblxuICAgICAgICAvLyBhcHBseSBhdHRyaWJ1dGVzIHRvIGNvbnRleHRcbiAgICAgICAgdGhpcy5hcHBseUF0dHJpYnV0ZXNUb0NvbnRleHQoY29udGV4dCwgb2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIGlmIChnZW5lcmF0ZVBhdGgpIHtcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgZ2VuZXJhdGVQYXRoKGNvbnRleHQsIG9iamVjdC5wYXJzZWRTdHlsZSk7XG4gICAgICAgIGlmIChub2RlTmFtZSAhPT0gU2hhcGUuTElORSAmJiBub2RlTmFtZSAhPT0gU2hhcGUuUEFUSCAmJiBub2RlTmFtZSAhPT0gU2hhcGUuUE9MWUxJTkUpIHtcbiAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGZpbGwgJiBzdHJva2VcbiAgICAgIGlmIChzdHlsZVJlbmRlcmVyKSB7XG4gICAgICAgIHN0eWxlUmVuZGVyZXIucmVuZGVyKGNvbnRleHQsIG9iamVjdC5wYXJzZWRTdHlsZSwgb2JqZWN0LCBjYW52YXNDb250ZXh0LCB0aGlzLCBydW50aW1lKTtcblxuICAgICAgICAvLyByZXN0b3JlIGFwcGxpZWQgYXR0cmlidXRlcywgZWcuIHNoYWRvd0JsdXIgc2hhZG93Q29sb3IuLi5cbiAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGZpbmlzaCByZW5kZXJpbmcsIGNsZWFyIGRpcnR5IGZsYWdcbiAgICAgIG9iamVjdC5yZW5kZXJhYmxlLmRpcnR5ID0gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFwcGx5QXR0cmlidXRlc1RvQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseUF0dHJpYnV0ZXNUb0NvbnRleHQoY29udGV4dCwgb2JqZWN0KSB7XG4gICAgICB2YXIgX3JlZjIgPSBvYmplY3QucGFyc2VkU3R5bGUsXG4gICAgICAgIHN0cm9rZSA9IF9yZWYyLnN0cm9rZSxcbiAgICAgICAgZmlsbCA9IF9yZWYyLmZpbGwsXG4gICAgICAgIG9wYWNpdHkgPSBfcmVmMi5vcGFjaXR5LFxuICAgICAgICBsaW5lRGFzaCA9IF9yZWYyLmxpbmVEYXNoLFxuICAgICAgICBsaW5lRGFzaE9mZnNldCA9IF9yZWYyLmxpbmVEYXNoT2Zmc2V0O1xuICAgICAgLy8gQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy96aC1DTi9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL3NldExpbmVEYXNoXG4gICAgICBpZiAobGluZURhc2gpIHtcbiAgICAgICAgY29udGV4dC5zZXRMaW5lRGFzaChsaW5lRGFzaCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9saW5lRGFzaE9mZnNldFxuICAgICAgaWYgKCFpc05pbChsaW5lRGFzaE9mZnNldCkpIHtcbiAgICAgICAgY29udGV4dC5saW5lRGFzaE9mZnNldCA9IGxpbmVEYXNoT2Zmc2V0O1xuICAgICAgfVxuICAgICAgaWYgKCFpc05pbChvcGFjaXR5KSkge1xuICAgICAgICBjb250ZXh0Lmdsb2JhbEFscGhhICo9IG9wYWNpdHk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzTmlsKHN0cm9rZSkgJiYgIUFycmF5LmlzQXJyYXkoc3Ryb2tlKSAmJiAhc3Ryb2tlLmlzTm9uZSkge1xuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gb2JqZWN0LmF0dHJpYnV0ZXMuc3Ryb2tlO1xuICAgICAgfVxuICAgICAgaWYgKCFpc05pbChmaWxsKSAmJiAhQXJyYXkuaXNBcnJheShmaWxsKSAmJiAhZmlsbC5pc05vbmUpIHtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBvYmplY3QuYXR0cmlidXRlcy5maWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb252ZXJ0QUFCQjJSZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnZlcnRBQUJCMlJlY3QoYWFiYikge1xuICAgICAgdmFyIG1pbiA9IGFhYmIuZ2V0TWluKCk7XG4gICAgICB2YXIgbWF4ID0gYWFiYi5nZXRNYXgoKTtcbiAgICAgIC8vIGV4cGFuZCB0aGUgcmVjdGFuZ2xlIGEgYml0IHRvIGF2b2lkIGFydGlmYWN0c1xuICAgICAgLy8gQHNlZSBodHRwczovL3d3dy55dXF1ZS5jb20vYW50di9vdTI5Mm4vYmk4bml4I0V4dkN1XG4gICAgICB2YXIgbWluWCA9IE1hdGguZmxvb3IobWluWzBdKTtcbiAgICAgIHZhciBtaW5ZID0gTWF0aC5mbG9vcihtaW5bMV0pO1xuICAgICAgdmFyIG1heFggPSBNYXRoLmNlaWwobWF4WzBdKTtcbiAgICAgIHZhciBtYXhZID0gTWF0aC5jZWlsKG1heFsxXSk7XG4gICAgICB2YXIgd2lkdGggPSBtYXhYIC0gbWluWDtcbiAgICAgIHZhciBoZWlnaHQgPSBtYXhZIC0gbWluWTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IG1pblgsXG4gICAgICAgIHk6IG1pblksXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVE9ETzogbWVyZ2UgZGlydHkgcmVjdGFuZ2xlcyB3aXRoIHNvbWUgc3RyYXRlZ2llcy5cbiAgICAgKiBGb3Igbm93LCB3ZSBqdXN0IHNpbXBseSBtZXJnZSBhbGwgdGhlIHJlY3RhbmdsZXMgaW50byBvbmUuXG4gICAgICogQHNlZSBodHRwczovL2lkb20ubWUvYXJ0aWNsZXMvODQxLmh0bWxcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJtZXJnZURpcnR5QUFCQnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWVyZ2VEaXJ0eUFBQkJzKGRpcnR5T2JqZWN0cykge1xuICAgICAgLy8gbWVyZ2UgaW50byBhIGJpZyBBQUJCXG4gICAgICAvLyBUT0RPOiBza2lwIGRlc2NlbmRhbnQgaWYgYW5jZXN0b3IgaXMgY2FjdWxhdGVkLCBidXQgY29tcGFyZU5vZGVQb3NpdGlvbiBpcyByZWFsbHkgc2xvd1xuICAgICAgdmFyIGFhYmIgPSBuZXcgQUFCQigpO1xuICAgICAgZGlydHlPYmplY3RzLmZvckVhY2goZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgICB2YXIgcmVuZGVyQm91bmRzID0gb2JqZWN0LmdldFJlbmRlckJvdW5kcygpO1xuICAgICAgICBhYWJiLmFkZChyZW5kZXJCb3VuZHMpO1xuICAgICAgICB2YXIgZGlydHlSZW5kZXJCb3VuZHMgPSBvYmplY3QucmVuZGVyYWJsZS5kaXJ0eVJlbmRlckJvdW5kcztcbiAgICAgICAgaWYgKGRpcnR5UmVuZGVyQm91bmRzKSB7XG4gICAgICAgICAgYWFiYi5hZGQoZGlydHlSZW5kZXJCb3VuZHMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhYWJiO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZWFyY2hEaXJ0eU9iamVjdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VhcmNoRGlydHlPYmplY3RzKGRpcnR5UmVjdGFuZ2xlKSB7XG4gICAgICAvLyBzZWFyY2ggaW4gci10cmVlLCBnZXQgYWxsIGFmZmVjdGVkIG5vZGVzXG4gICAgICB2YXIgX2RpcnR5UmVjdGFuZ2xlJGdldE1pID0gZGlydHlSZWN0YW5nbGUuZ2V0TWluKCksXG4gICAgICAgIF9kaXJ0eVJlY3RhbmdsZSRnZXRNaTIgPSBfc2xpY2VkVG9BcnJheShfZGlydHlSZWN0YW5nbGUkZ2V0TWksIDIpLFxuICAgICAgICBtaW5YID0gX2RpcnR5UmVjdGFuZ2xlJGdldE1pMlswXSxcbiAgICAgICAgbWluWSA9IF9kaXJ0eVJlY3RhbmdsZSRnZXRNaTJbMV07XG4gICAgICB2YXIgX2RpcnR5UmVjdGFuZ2xlJGdldE1hID0gZGlydHlSZWN0YW5nbGUuZ2V0TWF4KCksXG4gICAgICAgIF9kaXJ0eVJlY3RhbmdsZSRnZXRNYTIgPSBfc2xpY2VkVG9BcnJheShfZGlydHlSZWN0YW5nbGUkZ2V0TWEsIDIpLFxuICAgICAgICBtYXhYID0gX2RpcnR5UmVjdGFuZ2xlJGdldE1hMlswXSxcbiAgICAgICAgbWF4WSA9IF9kaXJ0eVJlY3RhbmdsZSRnZXRNYTJbMV07XG4gICAgICB2YXIgckJ1c2hOb2RlcyA9IHRoaXMuckJ1c2guc2VhcmNoKHtcbiAgICAgICAgbWluWDogbWluWCxcbiAgICAgICAgbWluWTogbWluWSxcbiAgICAgICAgbWF4WDogbWF4WCxcbiAgICAgICAgbWF4WTogbWF4WVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gckJ1c2hOb2Rlcy5tYXAoZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgIHZhciBkaXNwbGF5T2JqZWN0ID0gX3JlZjMuZGlzcGxheU9iamVjdDtcbiAgICAgICAgcmV0dXJuIGRpc3BsYXlPYmplY3Q7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2F2ZURpcnR5QUFCQlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlRGlydHlBQUJCKG9iamVjdCkge1xuICAgICAgdmFyIHJlbmRlcmFibGUgPSBvYmplY3QucmVuZGVyYWJsZTtcbiAgICAgIGlmICghcmVuZGVyYWJsZS5kaXJ0eVJlbmRlckJvdW5kcykge1xuICAgICAgICByZW5kZXJhYmxlLmRpcnR5UmVuZGVyQm91bmRzID0gbmV3IEFBQkIoKTtcbiAgICAgIH1cbiAgICAgIHZhciByZW5kZXJCb3VuZHMgPSBvYmplY3QuZ2V0UmVuZGVyQm91bmRzKCk7XG4gICAgICBpZiAocmVuZGVyQm91bmRzKSB7XG4gICAgICAgIC8vIHNhdmUgbGFzdCBkaXJ0eSBhYWJiXG4gICAgICAgIHJlbmRlcmFibGUuZGlydHlSZW5kZXJCb3VuZHMudXBkYXRlKHJlbmRlckJvdW5kcy5jZW50ZXIsIHJlbmRlckJvdW5kcy5oYWxmRXh0ZW50cyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFwcGx5V29ybGRUcmFuc2Zvcm1cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlXb3JsZFRyYW5zZm9ybShjb250ZXh0LCBvYmplY3QsIG1hdHJpeCkge1xuICAgICAgLy8gYXBwbHkgY2xpcCBzaGFwZSdzIFJUU1xuICAgICAgaWYgKG1hdHJpeCkge1xuICAgICAgICBtYXQ0LmNvcHkodGhpcy50bXBNYXQ0LCBvYmplY3QuZ2V0TG9jYWxUcmFuc2Zvcm0oKSk7XG4gICAgICAgIG1hdDQubXVsdGlwbHkodGhpcy50bXBNYXQ0LCBtYXRyaXgsIHRoaXMudG1wTWF0NCk7XG4gICAgICAgIG1hdDQubXVsdGlwbHkodGhpcy50bXBNYXQ0LCB0aGlzLnZwTWF0cml4LCB0aGlzLnRtcE1hdDQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gYXBwbHkgUlRTIHRyYW5zZm9ybWF0aW9uIGluIHdvcmxkIHNwYWNlXG4gICAgICAgIG1hdDQuY29weSh0aGlzLnRtcE1hdDQsIG9iamVjdC5nZXRXb3JsZFRyYW5zZm9ybSgpKTtcbiAgICAgICAgbWF0NC5tdWx0aXBseSh0aGlzLnRtcE1hdDQsIHRoaXMudnBNYXRyaXgsIHRoaXMudG1wTWF0NCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NhbnZhc19BUEkvVHV0b3JpYWwvVHJhbnNmb3JtYXRpb25zXG4gICAgICBjb250ZXh0LnNldFRyYW5zZm9ybSh0aGlzLnRtcE1hdDRbMF0sIHRoaXMudG1wTWF0NFsxXSwgdGhpcy50bXBNYXQ0WzRdLCB0aGlzLnRtcE1hdDRbNV0sIHRoaXMudG1wTWF0NFsxMl0sIHRoaXMudG1wTWF0NFsxM10pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzYWZlTWVyZ2VBQUJCXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNhZmVNZXJnZUFBQkIoKSB7XG4gICAgICB2YXIgbWVyZ2VkID0gbmV3IEFBQkIoKTtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhYWJicyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYWFiYnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG4gICAgICBhYWJicy5mb3JFYWNoKGZ1bmN0aW9uIChhYWJiKSB7XG4gICAgICAgIG1lcmdlZC5hZGQoYWFiYik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtZXJnZWQ7XG4gICAgfVxuICB9XSk7XG59KCk7XG5DYW52YXNSZW5kZXJlclBsdWdpbi50YWcgPSAnQ2FudmFzUmVuZGVyZXInO1xuXG5mdW5jdGlvbiBnZXRQYXR0ZXJuKHBhdHRlcm4sIG9iamVjdCwgY29udGV4dCwgY2FudmFzQ29udGV4dCwgcGx1Z2luLCBydW50aW1lLCBpbWFnZVBvb2wpIHtcbiAgdmFyICRvZmZzY3JlZW5DYW52YXM7XG4gIHZhciBkcHI7XG4gIGlmIChwYXR0ZXJuLmltYWdlLm5vZGVOYW1lID09PSAncmVjdCcpIHtcbiAgICB2YXIgX3BhcnNlZFN0eWxlID0gcGF0dGVybi5pbWFnZS5wYXJzZWRTdHlsZSxcbiAgICAgIHdpZHRoID0gX3BhcnNlZFN0eWxlLndpZHRoLFxuICAgICAgaGVpZ2h0ID0gX3BhcnNlZFN0eWxlLmhlaWdodDtcbiAgICBkcHIgPSBjYW52YXNDb250ZXh0LmNvbnRleHRTZXJ2aWNlLmdldERQUigpO1xuICAgIHZhciBvZmZzY3JlZW5DYW52YXMgPSBjYW52YXNDb250ZXh0LmNvbmZpZy5vZmZzY3JlZW5DYW52YXM7XG4gICAgJG9mZnNjcmVlbkNhbnZhcyA9IHJ1bnRpbWUub2Zmc2NyZWVuQ2FudmFzQ3JlYXRvci5nZXRPckNyZWF0ZUNhbnZhcyhvZmZzY3JlZW5DYW52YXMpO1xuICAgICRvZmZzY3JlZW5DYW52YXMud2lkdGggPSB3aWR0aCAqIGRwcjtcbiAgICAkb2Zmc2NyZWVuQ2FudmFzLmhlaWdodCA9IGhlaWdodCAqIGRwcjtcbiAgICB2YXIgb2Zmc2NyZWVuQ2FudmFzQ29udGV4dCA9IHJ1bnRpbWUub2Zmc2NyZWVuQ2FudmFzQ3JlYXRvci5nZXRPckNyZWF0ZUNvbnRleHQob2Zmc2NyZWVuQ2FudmFzKTtcbiAgICB2YXIgcmVuZGVyU3RhdGUgPSB7XG4gICAgICByZXN0b3JlU3RhY2s6IFtdLFxuICAgICAgcHJldk9iamVjdDogbnVsbCxcbiAgICAgIGN1cnJlbnRDb250ZXh0OiBuZXcgTWFwKClcbiAgICB9O1xuXG4gICAgLy8gb2Zmc2NyZWVuQ2FudmFzQ29udGV4dC5zY2FsZSgxIC8gZHByLCAxIC8gZHByKTtcblxuICAgIHBhdHRlcm4uaW1hZ2UuZm9yRWFjaChmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICBwbHVnaW4ucmVuZGVyRGlzcGxheU9iamVjdChvYmplY3QsIG9mZnNjcmVlbkNhbnZhc0NvbnRleHQsIGNhbnZhc0NvbnRleHQsIHJlbmRlclN0YXRlLCBydW50aW1lKTtcbiAgICB9KTtcbiAgICByZW5kZXJTdGF0ZS5yZXN0b3JlU3RhY2suZm9yRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBvZmZzY3JlZW5DYW52YXNDb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9KTtcbiAgfVxuICB2YXIgY2FudmFzUGF0dGVybiA9IGltYWdlUG9vbC5nZXRPckNyZWF0ZVBhdHRlcm5TeW5jKG9iamVjdCwgcGF0dGVybiwgY29udGV4dCwgJG9mZnNjcmVlbkNhbnZhcywgZHByLCBvYmplY3QuZ2V0R2VvbWV0cnlCb3VuZHMoKS5taW4sIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBzZXQgZGlydHkgcmVjdGFuZ2xlIGZsYWdcbiAgICBvYmplY3QucmVuZGVyYWJsZS5kaXJ0eSA9IHRydWU7XG4gICAgY2FudmFzQ29udGV4dC5yZW5kZXJpbmdTZXJ2aWNlLmRpcnRpZnkoKTtcbiAgfSk7XG4gIHJldHVybiBjYW52YXNQYXR0ZXJuO1xufVxuZnVuY3Rpb24gZ2V0Q29sb3IocGFyc2VkQ29sb3IsIG9iamVjdCwgY29udGV4dCwgaW1hZ2VQb29sKSB7XG4gIHZhciBjb2xvcjtcbiAgaWYgKHBhcnNlZENvbG9yLnR5cGUgPT09IEdyYWRpZW50VHlwZS5MaW5lYXJHcmFkaWVudCB8fCBwYXJzZWRDb2xvci50eXBlID09PSBHcmFkaWVudFR5cGUuUmFkaWFsR3JhZGllbnQpIHtcbiAgICB2YXIgYm91bmRzID0gb2JqZWN0LmdldEdlb21ldHJ5Qm91bmRzKCk7XG4gICAgdmFyIHdpZHRoID0gYm91bmRzICYmIGJvdW5kcy5oYWxmRXh0ZW50c1swXSAqIDIgfHwgMTtcbiAgICB2YXIgaGVpZ2h0ID0gYm91bmRzICYmIGJvdW5kcy5oYWxmRXh0ZW50c1sxXSAqIDIgfHwgMTtcbiAgICB2YXIgbWluID0gYm91bmRzICYmIGJvdW5kcy5taW4gfHwgWzAsIDBdO1xuICAgIGNvbG9yID0gaW1hZ2VQb29sLmdldE9yQ3JlYXRlR3JhZGllbnQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHtcbiAgICAgIHR5cGU6IHBhcnNlZENvbG9yLnR5cGVcbiAgICB9LCBwYXJzZWRDb2xvci52YWx1ZSksIHt9LCB7XG4gICAgICBtaW46IG1pbixcbiAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgfSksIGNvbnRleHQpO1xuICB9XG4gIHJldHVybiBjb2xvcjtcbn1cblxudmFyIFNIQURPV19OVU1CRVJfU1RZTEUgPSBbJ3NoYWRvd0JsdXInLCAnc2hhZG93T2Zmc2V0WCcsICdzaGFkb3dPZmZzZXRZJ107XG52YXIgU1RST0tFX1NUWUxFID0gWydsaW5lQ2FwJywgJ2xpbmVKb2luJywgJ21pdGVyTGltaXQnXTtcbnZhciBERUZBVUxUX1NUWUxFID0ge1xuICAvLyBjb21tb25cbiAgZ2xvYmFsQWxwaGE6IDEsXG4gIHNoYWRvd0JsdXI6IDAsXG4gIHNoYWRvd09mZnNldFg6IDAsXG4gIHNoYWRvd09mZnNldFk6IDAsXG4gIHNoYWRvd0NvbG9yOiAnIzAwMCcsXG4gIGZpbHRlcjogJ25vbmUnLFxuICBnbG9iYWxDb21wb3NpdGVPcGVyYXRpb246ICdzb3VyY2Utb3ZlcicsXG4gIC8vIHN0cm9rZS9maWxsXG4gIHN0cm9rZVN0eWxlOiAnIzAwMCcsXG4gIHN0cm9rZU9wYWNpdHk6IDEsXG4gIGxpbmVXaWR0aDogMSxcbiAgbGluZURhc2g6IFtdLFxuICBsaW5lRGFzaE9mZnNldDogMCxcbiAgbGluZUNhcDogJ2J1dHQnLFxuICBsaW5lSm9pbjogJ21pdGVyJyxcbiAgbWl0ZXJMaW1pdDogMTAsXG4gIGZpbGxTdHlsZTogJyMwMDAnLFxuICBmaWxsT3BhY2l0eTogMVxuXG4gIC8vIGltYWdlXG59O1xudmFyIGRlZmF1bHRQYXJzZWRTdHlsZSA9IHt9O1xuXG4vKipcbiAqIFVwZGF0aW5nIHRoZSBjYW52YXMgY29udGV4dCBpcyBhbiBleHBlbnNpdmUgb3BlcmF0aW9uLiBUaGUgc3RhdGUgb2YgdGhlIGNvbnRleHQgaXMgY2FjaGVkIGFuZCB0aGUgYWN0dWFsIHVwZGF0ZSBvcGVyYXRpb24gaXMgcGVyZm9ybWVkIG9ubHkgd2hlbiB0aGUgY2FjaGUgaXMgbm90IGhpdC5cbiAqXG4gKiBJbiBhbnkgY2FzZSwgdGhlIHByZXZpb3VzIHZhbHVlIGlzIHJldHVybmVkLCB3aGljaCBpcyBjb252ZW5pZW50IGZvciB0ZW1wb3JhcmlseSB1cGRhdGluZyB0aGUgY29udGV4dCBhbmQgcmVzdG9yaW5nIGl0IGxhdGVyLlxuICovXG5mdW5jdGlvbiB1cGRhdGVDb250ZXh0SWZOb3RIaXRDYWNoZShjb250ZXh0LCBrZXksIHZhbHVlLCBjYWNoZSkge1xuICB2YXIgcHJldlZhbHVlID0gY2FjaGUuaGFzKGtleSkgPyBjYWNoZS5nZXQoa2V5KSA6IERFRkFVTFRfU1RZTEVba2V5XTtcbiAgaWYgKHByZXZWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnbm90IGhpdCBjYWNoZScsIGtleSwgdmFsdWUsIHByZXZWYWx1ZSwgY2FjaGUpO1xuICAgIGlmIChrZXkgPT09ICdsaW5lRGFzaCcpIHtcbiAgICAgIGNvbnRleHQuc2V0TGluZURhc2godmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBjb250ZXh0W2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBwcmV2VmFsdWU7XG59XG52YXIgT3B0aW1pemVkRGVmYXVsdFJlbmRlcmVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gT3B0aW1pemVkRGVmYXVsdFJlbmRlcmVyKGltYWdlUG9vbCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPcHRpbWl6ZWREZWZhdWx0UmVuZGVyZXIpO1xuICAgIHRoaXMuaW1hZ2VQb29sID0gaW1hZ2VQb29sO1xuICB9XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoT3B0aW1pemVkRGVmYXVsdFJlbmRlcmVyLCBbe1xuICAgIGtleTogXCJhcHBseUF0dHJpYnV0ZXNUb0NvbnRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlBdHRyaWJ1dGVzVG9Db250ZXh0KGNvbnRleHQsIG9iamVjdCkge31cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKGNvbnRleHQsIHBhcnNlZFN0eWxlLCBvYmplY3QsIGNhbnZhc0NvbnRleHQsIHBsdWdpbiwgcnVudGltZSkge31cblxuICAgIC8vICNyZWdpb24gY29tbW9uIHN0eWxlXG4gIH0sIHtcbiAgICBrZXk6IFwiYXBwbHlDb21tb25TdHlsZVRvQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseUNvbW1vblN0eWxlVG9Db250ZXh0KGNvbnRleHQsIG9iamVjdCwgZm9yY2VVcGRhdGUsIHJlbmRlclN0YXRlKSB7XG4gICAgICAvLyBjb25zdCBkcHIgPSBvYmplY3Qub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb250ZXh0U2VydmljZSgpLmdldERQUigpO1xuICAgICAgdmFyIHByZXZTdHlsZSA9IGZvcmNlVXBkYXRlID8gZGVmYXVsdFBhcnNlZFN0eWxlIDogcmVuZGVyU3RhdGUucHJldk9iamVjdC5wYXJzZWRTdHlsZTtcbiAgICAgIHZhciBzdHlsZSA9IG9iamVjdC5wYXJzZWRTdHlsZTtcbiAgICAgIGlmIChmb3JjZVVwZGF0ZSB8fCBzdHlsZS5vcGFjaXR5ICE9PSBwcmV2U3R5bGUub3BhY2l0eSkge1xuICAgICAgICB1cGRhdGVDb250ZXh0SWZOb3RIaXRDYWNoZShjb250ZXh0LCAnZ2xvYmFsQWxwaGEnLCAhaXNOaWwoc3R5bGUub3BhY2l0eSkgPyBzdHlsZS5vcGFjaXR5IDogREVGQVVMVF9TVFlMRS5nbG9iYWxBbHBoYSwgcmVuZGVyU3RhdGUuY3VycmVudENvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICAvLyBUT0RPIGJsZW5kIHByb3BcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGlmIChmb3JjZVVwZGF0ZSB8fCBzdHlsZS5ibGVuZCAhPT0gcHJldlN0eWxlLmJsZW5kKSB7XG4gICAgICAgIHVwZGF0ZUNvbnRleHRJZk5vdEhpdENhY2hlKGNvbnRleHQsICdnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24nLFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICFpc05pbChzdHlsZS5ibGVuZCkgP1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHN0eWxlLmJsZW5kIDogREVGQVVMVF9TVFlMRS5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24sIHJlbmRlclN0YXRlLmN1cnJlbnRDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gI2VuZHJlZ2lvbiBjb21tb24gc3R5bGVcblxuICAgIC8vICNyZWdpb24gc3Ryb2tlL2ZpbGwgc3R5bGVcbiAgfSwge1xuICAgIGtleTogXCJhcHBseVN0cm9rZUZpbGxTdHlsZVRvQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseVN0cm9rZUZpbGxTdHlsZVRvQ29udGV4dChjb250ZXh0LCBvYmplY3QsIGZvcmNlVXBkYXRlLCByZW5kZXJTdGF0ZSkge1xuICAgICAgdmFyIHByZXZTdHlsZSA9IGZvcmNlVXBkYXRlID8gZGVmYXVsdFBhcnNlZFN0eWxlIDogcmVuZGVyU3RhdGUucHJldk9iamVjdC5wYXJzZWRTdHlsZTtcbiAgICAgIHZhciBzdHlsZSA9IG9iamVjdC5wYXJzZWRTdHlsZTtcbiAgICAgIHZhciBfc3R5bGUkbGluZVdpZHRoID0gc3R5bGUubGluZVdpZHRoLFxuICAgICAgICBsaW5lV2lkdGggPSBfc3R5bGUkbGluZVdpZHRoID09PSB2b2lkIDAgPyBERUZBVUxUX1NUWUxFLmxpbmVXaWR0aCA6IF9zdHlsZSRsaW5lV2lkdGg7XG4gICAgICB2YXIgaGFzRmlsbCA9IHN0eWxlLmZpbGwgJiYgIXN0eWxlLmZpbGwuaXNOb25lO1xuICAgICAgdmFyIGhhc1N0cm9rZSA9IHN0eWxlLnN0cm9rZSAmJiAhc3R5bGUuc3Ryb2tlLmlzTm9uZSAmJiBsaW5lV2lkdGggPiAwO1xuICAgICAgaWYgKGhhc1N0cm9rZSkge1xuICAgICAgICBpZiAoZm9yY2VVcGRhdGUgfHwgb2JqZWN0LmF0dHJpYnV0ZXMuc3Ryb2tlICE9PSByZW5kZXJTdGF0ZS5wcmV2T2JqZWN0LmF0dHJpYnV0ZXMuc3Ryb2tlKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gIWlzTmlsKHN0eWxlLnN0cm9rZSkgJiYgIUFycmF5LmlzQXJyYXkoc3R5bGUuc3Ryb2tlKSAmJiAhc3R5bGUuc3Ryb2tlLmlzTm9uZSA/IG9iamVjdC5hdHRyaWJ1dGVzLnN0cm9rZSA6IERFRkFVTFRfU1RZTEUuc3Ryb2tlU3R5bGU7XG4gICAgICAgICAgdXBkYXRlQ29udGV4dElmTm90SGl0Q2FjaGUoY29udGV4dCwgJ3N0cm9rZVN0eWxlJywgdmFsdWUsIHJlbmRlclN0YXRlLmN1cnJlbnRDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9yY2VVcGRhdGUgfHwgc3R5bGUubGluZVdpZHRoICE9PSBwcmV2U3R5bGUubGluZVdpZHRoKSB7XG4gICAgICAgICAgdXBkYXRlQ29udGV4dElmTm90SGl0Q2FjaGUoY29udGV4dCwgJ2xpbmVXaWR0aCcsICFpc05pbChzdHlsZS5saW5lV2lkdGgpID8gc3R5bGUubGluZVdpZHRoIDogREVGQVVMVF9TVFlMRS5saW5lV2lkdGgsIHJlbmRlclN0YXRlLmN1cnJlbnRDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9yY2VVcGRhdGUgfHwgc3R5bGUubGluZURhc2ggIT09IHByZXZTdHlsZS5saW5lRGFzaCkge1xuICAgICAgICAgIHVwZGF0ZUNvbnRleHRJZk5vdEhpdENhY2hlKGNvbnRleHQsICdsaW5lRGFzaCcsIHN0eWxlLmxpbmVEYXNoIHx8IERFRkFVTFRfU1RZTEUubGluZURhc2gsIHJlbmRlclN0YXRlLmN1cnJlbnRDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9yY2VVcGRhdGUgfHwgc3R5bGUubGluZURhc2hPZmZzZXQgIT09IHByZXZTdHlsZS5saW5lRGFzaE9mZnNldCkge1xuICAgICAgICAgIHVwZGF0ZUNvbnRleHRJZk5vdEhpdENhY2hlKGNvbnRleHQsICdsaW5lRGFzaE9mZnNldCcsICFpc05pbChzdHlsZS5saW5lRGFzaE9mZnNldCkgPyBzdHlsZS5saW5lRGFzaE9mZnNldCA6IERFRkFVTFRfU1RZTEUubGluZURhc2hPZmZzZXQsIHJlbmRlclN0YXRlLmN1cnJlbnRDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFNUUk9LRV9TVFlMRS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBzdHlsZU5hbWUgPSBTVFJPS0VfU1RZTEVbaV07XG4gICAgICAgICAgaWYgKGZvcmNlVXBkYXRlIHx8IHN0eWxlW3N0eWxlTmFtZV0gIT09IHByZXZTdHlsZVtzdHlsZU5hbWVdKSB7XG4gICAgICAgICAgICB1cGRhdGVDb250ZXh0SWZOb3RIaXRDYWNoZShjb250ZXh0LCBzdHlsZU5hbWUsICFpc05pbChzdHlsZVtzdHlsZU5hbWVdKSA/IHN0eWxlW3N0eWxlTmFtZV0gOiBERUZBVUxUX1NUWUxFW3N0eWxlTmFtZV0sIHJlbmRlclN0YXRlLmN1cnJlbnRDb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChoYXNGaWxsICYmIChmb3JjZVVwZGF0ZSB8fCBvYmplY3QuYXR0cmlidXRlcy5maWxsICE9PSByZW5kZXJTdGF0ZS5wcmV2T2JqZWN0LmF0dHJpYnV0ZXMuZmlsbCkpIHtcbiAgICAgICAgdmFyIF92YWx1ZSA9ICFpc05pbChzdHlsZS5maWxsKSAmJiAhQXJyYXkuaXNBcnJheShzdHlsZS5maWxsKSAmJiAhc3R5bGUuZmlsbC5pc05vbmUgPyBvYmplY3QuYXR0cmlidXRlcy5maWxsIDogREVGQVVMVF9TVFlMRS5maWxsU3R5bGU7XG4gICAgICAgIHVwZGF0ZUNvbnRleHRJZk5vdEhpdENhY2hlKGNvbnRleHQsICdmaWxsU3R5bGUnLCBfdmFsdWUsIHJlbmRlclN0YXRlLmN1cnJlbnRDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gI2VuZHJlZ2lvbiBzdHJva2UvZmlsbCBzdHlsZVxuICB9LCB7XG4gICAga2V5OiBcImFwcGx5U3R5bGVUb0NvbnRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlTdHlsZVRvQ29udGV4dChjb250ZXh0LCBvYmplY3QsIGZvcmNlVXBkYXRlLCByZW5kZXJTdGF0ZSkge1xuICAgICAgdmFyIG5vZGVOYW1lID0gb2JqZWN0Lm5vZGVOYW1lO1xuICAgICAgdGhpcy5hcHBseUNvbW1vblN0eWxlVG9Db250ZXh0KGNvbnRleHQsIG9iamVjdCwgZm9yY2VVcGRhdGUsIHJlbmRlclN0YXRlKTtcbiAgICAgIGlmIChub2RlTmFtZSA9PT0gU2hhcGUuSU1BR0UpIDsgZWxzZSB7XG4gICAgICAgIHRoaXMuYXBwbHlTdHJva2VGaWxsU3R5bGVUb0NvbnRleHQoY29udGV4dCwgb2JqZWN0LCBmb3JjZVVwZGF0ZSwgcmVuZGVyU3RhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhcHBseVNoYWRvd0FuZEZpbHRlclN0eWxlVG9Db250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5U2hhZG93QW5kRmlsdGVyU3R5bGVUb0NvbnRleHQoY29udGV4dCwgb2JqZWN0LCBoYXNTaGFkb3csIHJlbmRlclN0YXRlKSB7XG4gICAgICB2YXIgc3R5bGUgPSBvYmplY3QucGFyc2VkU3R5bGU7XG4gICAgICBpZiAoaGFzU2hhZG93KSB7XG4gICAgICAgIHVwZGF0ZUNvbnRleHRJZk5vdEhpdENhY2hlKGNvbnRleHQsICdzaGFkb3dDb2xvcicsIHN0eWxlLnNoYWRvd0NvbG9yLnRvU3RyaW5nKCksIHJlbmRlclN0YXRlLmN1cnJlbnRDb250ZXh0KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBTSEFET1dfTlVNQkVSX1NUWUxFLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHN0eWxlTmFtZSA9IFNIQURPV19OVU1CRVJfU1RZTEVbaV07XG4gICAgICAgICAgdXBkYXRlQ29udGV4dElmTm90SGl0Q2FjaGUoY29udGV4dCwgc3R5bGVOYW1lLCBzdHlsZVtzdHlsZU5hbWVdIHx8IERFRkFVTFRfU1RZTEVbc3R5bGVOYW1lXSwgcmVuZGVyU3RhdGUuY3VycmVudENvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3R5bGUuZmlsdGVyICYmIHN0eWxlLmZpbHRlci5sZW5ndGgpIHtcbiAgICAgICAgdXBkYXRlQ29udGV4dElmTm90SGl0Q2FjaGUoY29udGV4dCwgJ2ZpbHRlcicsXG4gICAgICAgIC8vIHVzZSByYXcgZmlsdGVyIHN0cmluZ1xuICAgICAgICBvYmplY3QuYXR0cmlidXRlcy5maWx0ZXIsIHJlbmRlclN0YXRlLmN1cnJlbnRDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2xlYXJTaGFkb3dBbmRGaWx0ZXJTdHlsZUZvckNvbnRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJTaGFkb3dBbmRGaWx0ZXJTdHlsZUZvckNvbnRleHQoY29udGV4dCwgaGFzU2hhZG93LCBoYXNGaWx0ZXIsIHJlbmRlclN0YXRlKSB7XG4gICAgICB2YXIgb25seUNsZWFyU2hhZG93RmlsdGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTtcbiAgICAgIGlmIChoYXNTaGFkb3cpIHtcbiAgICAgICAgdXBkYXRlQ29udGV4dElmTm90SGl0Q2FjaGUoY29udGV4dCwgJ3NoYWRvd0NvbG9yJywgREVGQVVMVF9TVFlMRS5zaGFkb3dDb2xvciwgcmVuZGVyU3RhdGUuY3VycmVudENvbnRleHQpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFNIQURPV19OVU1CRVJfU1RZTEUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgc3R5bGVOYW1lID0gU0hBRE9XX05VTUJFUl9TVFlMRVtpXTtcbiAgICAgICAgICB1cGRhdGVDb250ZXh0SWZOb3RIaXRDYWNoZShjb250ZXh0LCBzdHlsZU5hbWUsIERFRkFVTFRfU1RZTEVbc3R5bGVOYW1lXSwgcmVuZGVyU3RhdGUuY3VycmVudENvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaGFzRmlsdGVyKSB7XG4gICAgICAgIGlmIChoYXNTaGFkb3cgJiYgb25seUNsZWFyU2hhZG93RmlsdGVyKSB7XG4gICAgICAgICAgLy8gc2F2ZSBkcm9wLXNoYWRvdyBmaWx0ZXJcbiAgICAgICAgICB2YXIgb2xkRmlsdGVyID0gY29udGV4dC5maWx0ZXI7XG4gICAgICAgICAgaWYgKCFpc05pbChvbGRGaWx0ZXIpICYmIG9sZEZpbHRlci5pbmRleE9mKCdkcm9wLXNoYWRvdycpID4gLTEpIHtcbiAgICAgICAgICAgIHVwZGF0ZUNvbnRleHRJZk5vdEhpdENhY2hlKGNvbnRleHQsICdmaWx0ZXInLCBvbGRGaWx0ZXIucmVwbGFjZSgvZHJvcC1zaGFkb3dcXChbXildKlxcKS8sICcnKS50cmltKCkgfHwgREVGQVVMVF9TVFlMRS5maWx0ZXIsIHJlbmRlclN0YXRlLmN1cnJlbnRDb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBkYXRlQ29udGV4dElmTm90SGl0Q2FjaGUoY29udGV4dCwgJ2ZpbHRlcicsIERFRkFVTFRfU1RZTEUuZmlsdGVyLCByZW5kZXJTdGF0ZS5jdXJyZW50Q29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZmlsbFRvQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaWxsVG9Db250ZXh0KGNvbnRleHQsIG9iamVjdCwgcmVuZGVyU3RhdGUsIHBsdWdpbiwgcnVudGltZSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciBfb2JqZWN0JHBhcnNlZFN0eWxlID0gb2JqZWN0LnBhcnNlZFN0eWxlLFxuICAgICAgICBmaWxsID0gX29iamVjdCRwYXJzZWRTdHlsZS5maWxsLFxuICAgICAgICBmaWxsUnVsZSA9IF9vYmplY3QkcGFyc2VkU3R5bGUuZmlsbFJ1bGU7XG4gICAgICB2YXIgcmVzZXRTdHlsZSA9IG51bGw7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShmaWxsKSAmJiBmaWxsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZmlsbC5mb3JFYWNoKGZ1bmN0aW9uIChncmFkaWVudCkge1xuICAgICAgICAgIHZhciBwcmV2U3R5bGUgPSB1cGRhdGVDb250ZXh0SWZOb3RIaXRDYWNoZShjb250ZXh0LCAnZmlsbFN0eWxlJywgZ2V0Q29sb3IoZ3JhZGllbnQsIG9iamVjdCwgY29udGV4dCwgX3RoaXMuaW1hZ2VQb29sKSwgcmVuZGVyU3RhdGUuY3VycmVudENvbnRleHQpO1xuICAgICAgICAgIHJlc2V0U3R5bGUgPSByZXNldFN0eWxlICE9PSBudWxsICYmIHJlc2V0U3R5bGUgIT09IHZvaWQgMCA/IHJlc2V0U3R5bGUgOiBwcmV2U3R5bGU7XG4gICAgICAgICAgaWYgKGZpbGxSdWxlKSB7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGwoZmlsbFJ1bGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzUGF0dGVybihmaWxsKSkge1xuICAgICAgICAgIHZhciBwYXR0ZXJuID0gZ2V0UGF0dGVybihmaWxsLCBvYmplY3QsIGNvbnRleHQsIG9iamVjdC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmNvbnRleHQsIHBsdWdpbiwgcnVudGltZSwgdGhpcy5pbWFnZVBvb2wpO1xuICAgICAgICAgIGlmIChwYXR0ZXJuKSB7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHBhdHRlcm47XG4gICAgICAgICAgICByZXNldFN0eWxlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbGxSdWxlKSB7XG4gICAgICAgICAgY29udGV4dC5maWxsKGZpbGxSdWxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHJlc2V0U3R5bGUgIT09IG51bGwpIHtcbiAgICAgICAgdXBkYXRlQ29udGV4dElmTm90SGl0Q2FjaGUoY29udGV4dCwgJ2ZpbGxTdHlsZScsIHJlc2V0U3R5bGUsIHJlbmRlclN0YXRlLmN1cnJlbnRDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3Ryb2tlVG9Db250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0cm9rZVRvQ29udGV4dChjb250ZXh0LCBvYmplY3QsIHJlbmRlclN0YXRlLCBwbHVnaW4sIHJ1bnRpbWUpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgdmFyIHN0cm9rZSA9IG9iamVjdC5wYXJzZWRTdHlsZS5zdHJva2U7XG4gICAgICB2YXIgcmVzZXRTdHlsZSA9IG51bGw7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzdHJva2UpICYmIHN0cm9rZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHN0cm9rZS5mb3JFYWNoKGZ1bmN0aW9uIChncmFkaWVudCkge1xuICAgICAgICAgIHZhciBwcmV2U3R5bGUgPSB1cGRhdGVDb250ZXh0SWZOb3RIaXRDYWNoZShjb250ZXh0LCAnc3Ryb2tlU3R5bGUnLCBnZXRDb2xvcihncmFkaWVudCwgb2JqZWN0LCBjb250ZXh0LCBfdGhpczIuaW1hZ2VQb29sKSwgcmVuZGVyU3RhdGUuY3VycmVudENvbnRleHQpO1xuICAgICAgICAgIHJlc2V0U3R5bGUgPSByZXNldFN0eWxlICE9PSBudWxsICYmIHJlc2V0U3R5bGUgIT09IHZvaWQgMCA/IHJlc2V0U3R5bGUgOiBwcmV2U3R5bGU7XG4gICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNQYXR0ZXJuKHN0cm9rZSkpIHtcbiAgICAgICAgICB2YXIgcGF0dGVybiA9IGdldFBhdHRlcm4oc3Ryb2tlLCBvYmplY3QsIGNvbnRleHQsIG9iamVjdC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmNvbnRleHQsIHBsdWdpbiwgcnVudGltZSwgdGhpcy5pbWFnZVBvb2wpO1xuICAgICAgICAgIGlmIChwYXR0ZXJuKSB7XG4gICAgICAgICAgICB2YXIgcHJldlN0eWxlID0gdXBkYXRlQ29udGV4dElmTm90SGl0Q2FjaGUoY29udGV4dCwgJ3N0cm9rZVN0eWxlJywgcGF0dGVybiwgcmVuZGVyU3RhdGUuY3VycmVudENvbnRleHQpO1xuICAgICAgICAgICAgcmVzZXRTdHlsZSA9IHJlc2V0U3R5bGUgIT09IG51bGwgJiYgcmVzZXRTdHlsZSAhPT0gdm9pZCAwID8gcmVzZXRTdHlsZSA6IHByZXZTdHlsZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXNldFN0eWxlICE9PSBudWxsKSB7XG4gICAgICAgIHVwZGF0ZUNvbnRleHRJZk5vdEhpdENhY2hlKGNvbnRleHQsICdzdHJva2VTdHlsZScsIHJlc2V0U3R5bGUsIHJlbmRlclN0YXRlLmN1cnJlbnRDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZHJhd1RvQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3VG9Db250ZXh0KGNvbnRleHQsIG9iamVjdCwgcmVuZGVyU3RhdGUsIHBsdWdpbiwgcnVudGltZSkge1xuICAgICAgdmFyIF9zdHlsZSRmaWxsO1xuICAgICAgdmFyIG5vZGVOYW1lID0gb2JqZWN0Lm5vZGVOYW1lO1xuICAgICAgdmFyIHN0eWxlID0gb2JqZWN0LnBhcnNlZFN0eWxlO1xuICAgICAgdmFyIF9zdHlsZSRvcGFjaXR5ID0gc3R5bGUub3BhY2l0eSxcbiAgICAgICAgb3BhY2l0eSA9IF9zdHlsZSRvcGFjaXR5ID09PSB2b2lkIDAgPyBERUZBVUxUX1NUWUxFLmdsb2JhbEFscGhhIDogX3N0eWxlJG9wYWNpdHksXG4gICAgICAgIF9zdHlsZSRmaWxsT3BhY2l0eSA9IHN0eWxlLmZpbGxPcGFjaXR5LFxuICAgICAgICBmaWxsT3BhY2l0eSA9IF9zdHlsZSRmaWxsT3BhY2l0eSA9PT0gdm9pZCAwID8gREVGQVVMVF9TVFlMRS5maWxsT3BhY2l0eSA6IF9zdHlsZSRmaWxsT3BhY2l0eSxcbiAgICAgICAgX3N0eWxlJHN0cm9rZU9wYWNpdHkgPSBzdHlsZS5zdHJva2VPcGFjaXR5LFxuICAgICAgICBzdHJva2VPcGFjaXR5ID0gX3N0eWxlJHN0cm9rZU9wYWNpdHkgPT09IHZvaWQgMCA/IERFRkFVTFRfU1RZTEUuc3Ryb2tlT3BhY2l0eSA6IF9zdHlsZSRzdHJva2VPcGFjaXR5LFxuICAgICAgICBfc3R5bGUkbGluZVdpZHRoMiA9IHN0eWxlLmxpbmVXaWR0aCxcbiAgICAgICAgbGluZVdpZHRoID0gX3N0eWxlJGxpbmVXaWR0aDIgPT09IHZvaWQgMCA/IERFRkFVTFRfU1RZTEUubGluZVdpZHRoIDogX3N0eWxlJGxpbmVXaWR0aDI7XG4gICAgICB2YXIgaGFzRmlsbCA9IHN0eWxlLmZpbGwgJiYgIXN0eWxlLmZpbGwuaXNOb25lO1xuICAgICAgdmFyIGhhc1N0cm9rZSA9IHN0eWxlLnN0cm9rZSAmJiAhc3R5bGUuc3Ryb2tlLmlzTm9uZSAmJiBsaW5lV2lkdGggPiAwO1xuICAgICAgaWYgKCFoYXNGaWxsICYmICFoYXNTdHJva2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGhhc1NoYWRvdyA9ICFpc05pbChzdHlsZS5zaGFkb3dDb2xvcikgJiYgc3R5bGUuc2hhZG93Qmx1ciA+IDA7XG4gICAgICB2YXIgaXNJbm5lclNoYWRvdyA9IHN0eWxlLnNoYWRvd1R5cGUgPT09ICdpbm5lcic7XG4gICAgICB2YXIgaXNGaWxsVHJhbnNwYXJlbnQgPSAoKF9zdHlsZSRmaWxsID0gc3R5bGUuZmlsbCkgPT09IG51bGwgfHwgX3N0eWxlJGZpbGwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdHlsZSRmaWxsLmFscGhhKSA9PT0gMDtcbiAgICAgIHZhciBoYXNGaWx0ZXIgPSAhIShzdHlsZS5maWx0ZXIgJiYgc3R5bGUuZmlsdGVyLmxlbmd0aCk7XG4gICAgICAvLyBTaGFkb3dzIGNhbiBvbmx5IGJlIGFwcGxpZWQgdG8gZmlsbCgpIG9yIHN0cm9rZSgpLCB0aGUgZGVmYXVsdCBpcyBmaWxsKClcbiAgICAgIHZhciBzaG91bGREcmF3U2hhZG93V2l0aFN0cm9rZSA9IGhhc1NoYWRvdyAmJiBoYXNTdHJva2UgJiYgKG5vZGVOYW1lID09PSBTaGFwZS5QQVRIIHx8IG5vZGVOYW1lID09PSBTaGFwZS5MSU5FIHx8IG5vZGVOYW1lID09PSBTaGFwZS5QT0xZTElORSB8fCBpc0ZpbGxUcmFuc3BhcmVudCB8fCBpc0lubmVyU2hhZG93KTtcblxuICAgICAgLy8gVE9ETyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkcvQXR0cmlidXRlL3BhaW50LW9yZGVyXG5cbiAgICAgIHZhciBvcmlnaW5HbG9iYWxBbHBoYSA9IG51bGw7XG4gICAgICBpZiAoaGFzRmlsbCkge1xuICAgICAgICBpZiAoIXNob3VsZERyYXdTaGFkb3dXaXRoU3Ryb2tlKSB7XG4gICAgICAgICAgdGhpcy5hcHBseVNoYWRvd0FuZEZpbHRlclN0eWxlVG9Db250ZXh0KGNvbnRleHQsIG9iamVjdCwgaGFzU2hhZG93LCByZW5kZXJTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVwZGF0ZU9wYWNpdHkgPSBvcGFjaXR5ICogZmlsbE9wYWNpdHk7XG4gICAgICAgIG9yaWdpbkdsb2JhbEFscGhhID0gdXBkYXRlQ29udGV4dElmTm90SGl0Q2FjaGUoY29udGV4dCwgJ2dsb2JhbEFscGhhJywgdXBkYXRlT3BhY2l0eSwgcmVuZGVyU3RhdGUuY3VycmVudENvbnRleHQpO1xuICAgICAgICB0aGlzLmZpbGxUb0NvbnRleHQoY29udGV4dCwgb2JqZWN0LCByZW5kZXJTdGF0ZSwgcGx1Z2luLCBydW50aW1lKTtcbiAgICAgICAgaWYgKCFzaG91bGREcmF3U2hhZG93V2l0aFN0cm9rZSkge1xuICAgICAgICAgIHRoaXMuY2xlYXJTaGFkb3dBbmRGaWx0ZXJTdHlsZUZvckNvbnRleHQoY29udGV4dCwgaGFzU2hhZG93LCBoYXNGaWx0ZXIsIHJlbmRlclN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGhhc1N0cm9rZSkge1xuICAgICAgICB2YXIgY2xlYXJTaGFkb3dBbmRGaWx0ZXIgPSBmYWxzZTtcbiAgICAgICAgdmFyIF91cGRhdGVPcGFjaXR5ID0gb3BhY2l0eSAqIHN0cm9rZU9wYWNpdHk7XG4gICAgICAgIHZhciBwcmV2T3BhY2l0eSA9IHVwZGF0ZUNvbnRleHRJZk5vdEhpdENhY2hlKGNvbnRleHQsICdnbG9iYWxBbHBoYScsIF91cGRhdGVPcGFjaXR5LCByZW5kZXJTdGF0ZS5jdXJyZW50Q29udGV4dCk7XG4gICAgICAgIG9yaWdpbkdsb2JhbEFscGhhID0gaGFzRmlsbCA/IG9yaWdpbkdsb2JhbEFscGhhIDogcHJldk9wYWNpdHk7XG4gICAgICAgIGlmIChzaG91bGREcmF3U2hhZG93V2l0aFN0cm9rZSkge1xuICAgICAgICAgIHRoaXMuYXBwbHlTaGFkb3dBbmRGaWx0ZXJTdHlsZVRvQ29udGV4dChjb250ZXh0LCBvYmplY3QsIGhhc1NoYWRvdywgcmVuZGVyU3RhdGUpO1xuICAgICAgICAgIGNsZWFyU2hhZG93QW5kRmlsdGVyID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoaXNJbm5lclNoYWRvdykge1xuICAgICAgICAgICAgdmFyIG9yaWdpbkJsZW5kID0gY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb247XG4gICAgICAgICAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2UtYXRvcCc7XG4gICAgICAgICAgICB0aGlzLnN0cm9rZVRvQ29udGV4dChjb250ZXh0LCBvYmplY3QsIHJlbmRlclN0YXRlLCBwbHVnaW4sIHJ1bnRpbWUpO1xuICAgICAgICAgICAgY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBvcmlnaW5CbGVuZDtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJTaGFkb3dBbmRGaWx0ZXJTdHlsZUZvckNvbnRleHQoY29udGV4dCwgaGFzU2hhZG93LCBoYXNGaWx0ZXIsIHJlbmRlclN0YXRlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdHJva2VUb0NvbnRleHQoY29udGV4dCwgb2JqZWN0LCByZW5kZXJTdGF0ZSwgcGx1Z2luLCBydW50aW1lKTtcbiAgICAgICAgaWYgKGNsZWFyU2hhZG93QW5kRmlsdGVyKSB7XG4gICAgICAgICAgdGhpcy5jbGVhclNoYWRvd0FuZEZpbHRlclN0eWxlRm9yQ29udGV4dChjb250ZXh0LCBoYXNTaGFkb3csIGhhc0ZpbHRlciwgcmVuZGVyU3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGNsZWFyXG4gICAgICBpZiAob3JpZ2luR2xvYmFsQWxwaGEgIT09IG51bGwpIHtcbiAgICAgICAgdXBkYXRlQ29udGV4dElmTm90SGl0Q2FjaGUoY29udGV4dCwgJ2dsb2JhbEFscGhhJywgb3JpZ2luR2xvYmFsQWxwaGEsIHJlbmRlclN0YXRlLmN1cnJlbnRDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcbn0oKTtcblxudmFyIERlZmF1bHRSZW5kZXJlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX09wdGltaXplZERlZmF1bHRSZW5kKSB7XG4gIGZ1bmN0aW9uIERlZmF1bHRSZW5kZXJlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGVmYXVsdFJlbmRlcmVyKTtcbiAgICByZXR1cm4gX2NhbGxTdXBlcih0aGlzLCBEZWZhdWx0UmVuZGVyZXIsIGFyZ3VtZW50cyk7XG4gIH1cbiAgX2luaGVyaXRzKERlZmF1bHRSZW5kZXJlciwgX09wdGltaXplZERlZmF1bHRSZW5kKTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhEZWZhdWx0UmVuZGVyZXIsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoY29udGV4dCwgcGFyc2VkU3R5bGUsIG9iamVjdCwgY2FudmFzQ29udGV4dCwgcGx1Z2luLCBydW50aW1lKSB7XG4gICAgICB2YXIgZmlsbCA9IHBhcnNlZFN0eWxlLmZpbGwsXG4gICAgICAgIGZpbGxSdWxlID0gcGFyc2VkU3R5bGUuZmlsbFJ1bGUsXG4gICAgICAgIF9wYXJzZWRTdHlsZSRvcGFjaXR5ID0gcGFyc2VkU3R5bGUub3BhY2l0eSxcbiAgICAgICAgb3BhY2l0eSA9IF9wYXJzZWRTdHlsZSRvcGFjaXR5ID09PSB2b2lkIDAgPyAxIDogX3BhcnNlZFN0eWxlJG9wYWNpdHksXG4gICAgICAgIF9wYXJzZWRTdHlsZSRmaWxsT3BhYyA9IHBhcnNlZFN0eWxlLmZpbGxPcGFjaXR5LFxuICAgICAgICBmaWxsT3BhY2l0eSA9IF9wYXJzZWRTdHlsZSRmaWxsT3BhYyA9PT0gdm9pZCAwID8gMSA6IF9wYXJzZWRTdHlsZSRmaWxsT3BhYyxcbiAgICAgICAgc3Ryb2tlID0gcGFyc2VkU3R5bGUuc3Ryb2tlLFxuICAgICAgICBfcGFyc2VkU3R5bGUkc3Ryb2tlT3AgPSBwYXJzZWRTdHlsZS5zdHJva2VPcGFjaXR5LFxuICAgICAgICBzdHJva2VPcGFjaXR5ID0gX3BhcnNlZFN0eWxlJHN0cm9rZU9wID09PSB2b2lkIDAgPyAxIDogX3BhcnNlZFN0eWxlJHN0cm9rZU9wLFxuICAgICAgICBfcGFyc2VkU3R5bGUkbGluZVdpZHQgPSBwYXJzZWRTdHlsZS5saW5lV2lkdGgsXG4gICAgICAgIGxpbmVXaWR0aCA9IF9wYXJzZWRTdHlsZSRsaW5lV2lkdCA9PT0gdm9pZCAwID8gMSA6IF9wYXJzZWRTdHlsZSRsaW5lV2lkdCxcbiAgICAgICAgbGluZUNhcCA9IHBhcnNlZFN0eWxlLmxpbmVDYXAsXG4gICAgICAgIGxpbmVKb2luID0gcGFyc2VkU3R5bGUubGluZUpvaW4sXG4gICAgICAgIHNoYWRvd1R5cGUgPSBwYXJzZWRTdHlsZS5zaGFkb3dUeXBlLFxuICAgICAgICBzaGFkb3dDb2xvciA9IHBhcnNlZFN0eWxlLnNoYWRvd0NvbG9yLFxuICAgICAgICBzaGFkb3dCbHVyID0gcGFyc2VkU3R5bGUuc2hhZG93Qmx1cixcbiAgICAgICAgZmlsdGVyID0gcGFyc2VkU3R5bGUuZmlsdGVyLFxuICAgICAgICBtaXRlckxpbWl0ID0gcGFyc2VkU3R5bGUubWl0ZXJMaW1pdDtcbiAgICAgIHZhciBoYXNGaWxsID0gZmlsbCAmJiAhZmlsbC5pc05vbmU7XG4gICAgICB2YXIgaGFzU3Ryb2tlID0gc3Ryb2tlICYmICFzdHJva2UuaXNOb25lICYmIGxpbmVXaWR0aCA+IDA7XG4gICAgICB2YXIgaXNGaWxsVHJhbnNwYXJlbnQgPSAoZmlsbCA9PT0gbnVsbCB8fCBmaWxsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmaWxsLmFscGhhKSA9PT0gMDtcbiAgICAgIHZhciBoYXNGaWx0ZXIgPSAhIShmaWx0ZXIgJiYgZmlsdGVyLmxlbmd0aCk7XG4gICAgICB2YXIgaGFzU2hhZG93ID0gIWlzTmlsKHNoYWRvd0NvbG9yKSAmJiBzaGFkb3dCbHVyID4gMDtcbiAgICAgIHZhciBub2RlTmFtZSA9IG9iamVjdC5ub2RlTmFtZTtcbiAgICAgIHZhciBpc0lubmVyU2hhZG93ID0gc2hhZG93VHlwZSA9PT0gJ2lubmVyJztcbiAgICAgIHZhciBzaG91bGREcmF3U2hhZG93V2l0aFN0cm9rZSA9IGhhc1N0cm9rZSAmJiBoYXNTaGFkb3cgJiYgKG5vZGVOYW1lID09PSBTaGFwZS5QQVRIIHx8IG5vZGVOYW1lID09PSBTaGFwZS5MSU5FIHx8IG5vZGVOYW1lID09PSBTaGFwZS5QT0xZTElORSB8fCBpc0ZpbGxUcmFuc3BhcmVudCB8fCBpc0lubmVyU2hhZG93KTtcbiAgICAgIGlmIChoYXNGaWxsKSB7XG4gICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBvcGFjaXR5ICogZmlsbE9wYWNpdHk7XG4gICAgICAgIGlmICghc2hvdWxkRHJhd1NoYWRvd1dpdGhTdHJva2UpIHtcbiAgICAgICAgICBzZXRTaGFkb3dBbmRGaWx0ZXIob2JqZWN0LCBjb250ZXh0LCBoYXNTaGFkb3cpO1xuICAgICAgICB9XG4gICAgICAgIGFwcGx5RmlsbChjb250ZXh0LCBvYmplY3QsIGZpbGwsIGZpbGxSdWxlLCBjYW52YXNDb250ZXh0LCBwbHVnaW4sIHJ1bnRpbWUsIHRoaXMuaW1hZ2VQb29sKTtcbiAgICAgICAgaWYgKCFzaG91bGREcmF3U2hhZG93V2l0aFN0cm9rZSkge1xuICAgICAgICAgIHRoaXMuY2xlYXJTaGFkb3dBbmRGaWx0ZXIoY29udGV4dCwgaGFzRmlsdGVyLCBoYXNTaGFkb3cpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaGFzU3Ryb2tlKSB7XG4gICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBvcGFjaXR5ICogc3Ryb2tlT3BhY2l0eTtcbiAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gICAgICAgIGlmICghaXNOaWwobWl0ZXJMaW1pdCkpIHtcbiAgICAgICAgICBjb250ZXh0Lm1pdGVyTGltaXQgPSBtaXRlckxpbWl0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNOaWwobGluZUNhcCkpIHtcbiAgICAgICAgICBjb250ZXh0LmxpbmVDYXAgPSBsaW5lQ2FwO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNOaWwobGluZUpvaW4pKSB7XG4gICAgICAgICAgY29udGV4dC5saW5lSm9pbiA9IGxpbmVKb2luO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG91bGREcmF3U2hhZG93V2l0aFN0cm9rZSkge1xuICAgICAgICAgIGlmIChpc0lubmVyU2hhZG93KSB7XG4gICAgICAgICAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2UtYXRvcCc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFNoYWRvd0FuZEZpbHRlcihvYmplY3QsIGNvbnRleHQsIHRydWUpO1xuICAgICAgICAgIGlmIChpc0lubmVyU2hhZG93KSB7XG4gICAgICAgICAgICBhcHBseVN0cm9rZShjb250ZXh0LCBvYmplY3QsIHN0cm9rZSwgY2FudmFzQ29udGV4dCwgcGx1Z2luLCBydW50aW1lLCB0aGlzLmltYWdlUG9vbCk7XG4gICAgICAgICAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IERFRkFVTFRfU1RZTEUuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uO1xuICAgICAgICAgICAgdGhpcy5jbGVhclNoYWRvd0FuZEZpbHRlcihjb250ZXh0LCBoYXNGaWx0ZXIsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhcHBseVN0cm9rZShjb250ZXh0LCBvYmplY3QsIHN0cm9rZSwgY2FudmFzQ29udGV4dCwgcGx1Z2luLCBydW50aW1lLCB0aGlzLmltYWdlUG9vbCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNsZWFyU2hhZG93QW5kRmlsdGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyU2hhZG93QW5kRmlsdGVyKGNvbnRleHQsIGhhc0ZpbHRlciwgaGFzU2hhZG93KSB7XG4gICAgICBpZiAoaGFzU2hhZG93KSB7XG4gICAgICAgIGNvbnRleHQuc2hhZG93Q29sb3IgPSAndHJhbnNwYXJlbnQnO1xuICAgICAgICBjb250ZXh0LnNoYWRvd0JsdXIgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKGhhc0ZpbHRlcikge1xuICAgICAgICAvLyBzYXZlIGRyb3Atc2hhZG93IGZpbHRlclxuICAgICAgICB2YXIgb2xkRmlsdGVyID0gY29udGV4dC5maWx0ZXI7XG4gICAgICAgIGlmICghaXNOaWwob2xkRmlsdGVyKSAmJiBvbGRGaWx0ZXIuaW5kZXhPZignZHJvcC1zaGFkb3cnKSA+IC0xKSB7XG4gICAgICAgICAgY29udGV4dC5maWx0ZXIgPSBvbGRGaWx0ZXIucmVwbGFjZSgvZHJvcC1zaGFkb3dcXChbXildKlxcKS8sICcnKS50cmltKCkgfHwgJ25vbmUnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG59KE9wdGltaXplZERlZmF1bHRSZW5kZXJlcik7XG5cbi8qKlxuICogYXBwbHkgYmVmb3JlIGZpbGwgYW5kIHN0cm9rZSBidXQgb25seSBvbmNlXG4gKi9cbmZ1bmN0aW9uIHNldFNoYWRvd0FuZEZpbHRlcihvYmplY3QsIGNvbnRleHQsIGhhc1NoYWRvdykge1xuICB2YXIgX29iamVjdCRwYXJzZWRTdHlsZSA9IG9iamVjdC5wYXJzZWRTdHlsZSxcbiAgICBmaWx0ZXIgPSBfb2JqZWN0JHBhcnNlZFN0eWxlLmZpbHRlcixcbiAgICBzaGFkb3dDb2xvciA9IF9vYmplY3QkcGFyc2VkU3R5bGUuc2hhZG93Q29sb3IsXG4gICAgc2hhZG93Qmx1ciA9IF9vYmplY3QkcGFyc2VkU3R5bGUuc2hhZG93Qmx1cixcbiAgICBzaGFkb3dPZmZzZXRYID0gX29iamVjdCRwYXJzZWRTdHlsZS5zaGFkb3dPZmZzZXRYLFxuICAgIHNoYWRvd09mZnNldFkgPSBfb2JqZWN0JHBhcnNlZFN0eWxlLnNoYWRvd09mZnNldFk7XG4gIGlmIChmaWx0ZXIgJiYgZmlsdGVyLmxlbmd0aCkge1xuICAgIC8vIHVzZSByYXcgZmlsdGVyIHN0cmluZ1xuICAgIGNvbnRleHQuZmlsdGVyID0gb2JqZWN0LnN0eWxlLmZpbHRlcjtcbiAgfVxuICBpZiAoaGFzU2hhZG93KSB7XG4gICAgY29udGV4dC5zaGFkb3dDb2xvciA9IHNoYWRvd0NvbG9yLnRvU3RyaW5nKCk7XG4gICAgY29udGV4dC5zaGFkb3dCbHVyID0gc2hhZG93Qmx1ciB8fCAwO1xuICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WCA9IHNoYWRvd09mZnNldFggfHwgMDtcbiAgICBjb250ZXh0LnNoYWRvd09mZnNldFkgPSBzaGFkb3dPZmZzZXRZIHx8IDA7XG4gIH1cbn1cbmZ1bmN0aW9uIGFwcGx5RmlsbChjb250ZXh0LCBvYmplY3QsIGZpbGwsIGZpbGxSdWxlLCBjYW52YXNDb250ZXh0LCBwbHVnaW4sIHJ1bnRpbWUsIGltYWdlUG9vbCkge1xuICB2YXIgc2tpcEZpbGwgPSBhcmd1bWVudHMubGVuZ3RoID4gOCAmJiBhcmd1bWVudHNbOF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s4XSA6IGZhbHNlO1xuICBpZiAoQXJyYXkuaXNBcnJheShmaWxsKSkge1xuICAgIGZpbGwuZm9yRWFjaChmdW5jdGlvbiAoZ3JhZGllbnQpIHtcbiAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZ2V0Q29sb3IoZ3JhZGllbnQsIG9iamVjdCwgY29udGV4dCwgaW1hZ2VQb29sKTtcbiAgICAgIGlmICghc2tpcEZpbGwpIHtcbiAgICAgICAgZmlsbFJ1bGUgPyBjb250ZXh0LmZpbGwoZmlsbFJ1bGUpIDogY29udGV4dC5maWxsKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzUGF0dGVybihmaWxsKSkge1xuICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBnZXRQYXR0ZXJuKGZpbGwsIG9iamVjdCwgY29udGV4dCwgY2FudmFzQ29udGV4dCwgcGx1Z2luLCBydW50aW1lLCBpbWFnZVBvb2wpO1xuICAgIH1cbiAgICBpZiAoIXNraXBGaWxsKSB7XG4gICAgICBmaWxsUnVsZSA/IGNvbnRleHQuZmlsbChmaWxsUnVsZSkgOiBjb250ZXh0LmZpbGwoKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGFwcGx5U3Ryb2tlKGNvbnRleHQsIG9iamVjdCwgc3Ryb2tlLCBjYW52YXNDb250ZXh0LCBwbHVnaW4sIHJ1bnRpbWUsIGltYWdlUG9vbCkge1xuICB2YXIgc2tpcFN0cm9rZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA3ICYmIGFyZ3VtZW50c1s3XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzddIDogZmFsc2U7XG4gIGlmIChBcnJheS5pc0FycmF5KHN0cm9rZSkpIHtcbiAgICBzdHJva2UuZm9yRWFjaChmdW5jdGlvbiAoZ3JhZGllbnQpIHtcbiAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBnZXRDb2xvcihncmFkaWVudCwgb2JqZWN0LCBjb250ZXh0LCBpbWFnZVBvb2wpO1xuICAgICAgaWYgKCFza2lwU3Ryb2tlKSB7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzUGF0dGVybihzdHJva2UpKSB7XG4gICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gZ2V0UGF0dGVybihzdHJva2UsIG9iamVjdCwgY29udGV4dCwgY2FudmFzQ29udGV4dCwgcGx1Z2luLCBydW50aW1lLCBpbWFnZVBvb2wpO1xuICAgIH1cbiAgICBpZiAoIXNraXBTdHJva2UpIHtcbiAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU92ZXJsYXBSZWN0KHJlY3QxLCByZWN0Mikge1xuICB2YXIgX3JlY3QgPSBfc2xpY2VkVG9BcnJheShyZWN0MSwgNCksXG4gICAgeDEgPSBfcmVjdFswXSxcbiAgICB5MSA9IF9yZWN0WzFdLFxuICAgIHcxID0gX3JlY3RbMl0sXG4gICAgaDEgPSBfcmVjdFszXTtcbiAgdmFyIF9yZWN0MiA9IF9zbGljZWRUb0FycmF5KHJlY3QyLCA0KSxcbiAgICB4MiA9IF9yZWN0MlswXSxcbiAgICB5MiA9IF9yZWN0MlsxXSxcbiAgICB3MiA9IF9yZWN0MlsyXSxcbiAgICBoMiA9IF9yZWN0MlszXTtcblxuICAvLyDorqHnrpfph43lj6DljLrln5/nmoTlt6bkuIrop5Llkozlj7PkuIvop5JcbiAgdmFyIG92ZXJsYXBMZWZ0ID0gTWF0aC5tYXgoeDEsIHgyKTtcbiAgdmFyIG92ZXJsYXBUb3AgPSBNYXRoLm1heCh5MSwgeTIpO1xuICB2YXIgb3ZlcmxhcFJpZ2h0ID0gTWF0aC5taW4oeDEgKyB3MSwgeDIgKyB3Mik7XG4gIHZhciBvdmVybGFwQm90dG9tID0gTWF0aC5taW4oeTEgKyBoMSwgeTIgKyBoMik7XG4gIGlmIChvdmVybGFwUmlnaHQgPD0gb3ZlcmxhcExlZnQgfHwgb3ZlcmxhcEJvdHRvbSA8PSBvdmVybGFwVG9wKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIFtvdmVybGFwTGVmdCwgb3ZlcmxhcFRvcCwgb3ZlcmxhcFJpZ2h0IC0gb3ZlcmxhcExlZnQsIG92ZXJsYXBCb3R0b20gLSBvdmVybGFwVG9wXTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybVJlY3QocmVjdCwgbWF0cml4KSB7XG4gIHZhciB0bCA9IHZlYzMudHJhbnNmb3JtTWF0NCh2ZWMzLmNyZWF0ZSgpLCBbcmVjdFswXSwgcmVjdFsxXSwgMF0sIG1hdHJpeCk7XG4gIHZhciB0ciA9IHZlYzMudHJhbnNmb3JtTWF0NCh2ZWMzLmNyZWF0ZSgpLCBbcmVjdFswXSArIHJlY3RbMl0sIHJlY3RbMV0sIDBdLCBtYXRyaXgpO1xuICB2YXIgYmwgPSB2ZWMzLnRyYW5zZm9ybU1hdDQodmVjMy5jcmVhdGUoKSwgW3JlY3RbMF0sIHJlY3RbMV0gKyByZWN0WzNdLCAwXSwgbWF0cml4KTtcbiAgdmFyIGJyID0gdmVjMy50cmFuc2Zvcm1NYXQ0KHZlYzMuY3JlYXRlKCksIFtyZWN0WzBdICsgcmVjdFsyXSwgcmVjdFsxXSArIHJlY3RbM10sIDBdLCBtYXRyaXgpO1xuICByZXR1cm4gW01hdGgubWluKHRsWzBdLCB0clswXSwgYmxbMF0sIGJyWzBdKSwgTWF0aC5taW4odGxbMV0sIHRyWzFdLCBibFsxXSwgYnJbMV0pLCBNYXRoLm1heCh0bFswXSwgdHJbMF0sIGJsWzBdLCBiclswXSkgLSBNYXRoLm1pbih0bFswXSwgdHJbMF0sIGJsWzBdLCBiclswXSksIE1hdGgubWF4KHRsWzFdLCB0clsxXSwgYmxbMV0sIGJyWzFdKSAtIE1hdGgubWluKHRsWzFdLCB0clsxXSwgYmxbMV0sIGJyWzFdKV07XG59XG5cbnZhciBJbWFnZVJlbmRlcmVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRGVmYXVsdFJlbmRlcmVyKSB7XG4gIGZ1bmN0aW9uIEltYWdlUmVuZGVyZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEltYWdlUmVuZGVyZXIpO1xuICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIEltYWdlUmVuZGVyZXIsIGFyZ3VtZW50cyk7XG4gIH1cbiAgX2luaGVyaXRzKEltYWdlUmVuZGVyZXIsIF9EZWZhdWx0UmVuZGVyZXIpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKEltYWdlUmVuZGVyZXIsIFt7XG4gICAga2V5OiBcInJlbmRlckRvd25TYW1wbGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckRvd25TYW1wbGVkKGNvbnRleHQsIHBhcnNlZFN0eWxlLCBvYmplY3QsIGRhdGEpIHtcbiAgICAgIHZhciBzcmMgPSBkYXRhLnNyYyxcbiAgICAgICAgaW1hZ2VDYWNoZSA9IGRhdGEuaW1hZ2VDYWNoZTtcbiAgICAgIGlmICghaW1hZ2VDYWNoZS5kb3duU2FtcGxlZCkge1xuICAgICAgICB0aGlzLmltYWdlUG9vbC5jcmVhdGVEb3duU2FtcGxlZEltYWdlKHNyYywgb2JqZWN0KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAvLyByZXJlbmRlclxuICAgICAgICAgIC8vIG9iamVjdC5kaXJ0eSgpO1xuICAgICAgICAgIG9iamVjdC5yZW5kZXJhYmxlLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICBvYmplY3Qub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5jb250ZXh0LnJlbmRlcmluZ1NlcnZpY2UuZGlydGlmeSgpO1xuICAgICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvL1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2VDYWNoZS5kb3duU2FtcGxlZCwgTWF0aC5mbG9vcihkYXRhLmRyYXdSZWN0WzBdKSwgTWF0aC5mbG9vcihkYXRhLmRyYXdSZWN0WzFdKSwgTWF0aC5jZWlsKGRhdGEuZHJhd1JlY3RbMl0pLCBNYXRoLmNlaWwoZGF0YS5kcmF3UmVjdFszXSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJUaWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclRpbGUoY29udGV4dCwgcGFyc2VkU3R5bGUsIG9iamVjdCwgZGF0YSkge1xuICAgICAgdmFyIHNyYyA9IGRhdGEuc3JjLFxuICAgICAgICBpbWFnZUNhY2hlID0gZGF0YS5pbWFnZUNhY2hlLFxuICAgICAgICBpbWFnZVJlY3QgPSBkYXRhLmltYWdlUmVjdCxcbiAgICAgICAgZHJhd1JlY3QgPSBkYXRhLmRyYXdSZWN0O1xuICAgICAgdmFyIG9yaWdpbmFsU2l6ZSA9IGltYWdlQ2FjaGUuc2l6ZTtcbiAgICAgIHZhciBfY29udGV4dCRnZXRUcmFuc2Zvcm0gPSBjb250ZXh0LmdldFRyYW5zZm9ybSgpLFxuICAgICAgICBhID0gX2NvbnRleHQkZ2V0VHJhbnNmb3JtLmEsXG4gICAgICAgIGIgPSBfY29udGV4dCRnZXRUcmFuc2Zvcm0uYixcbiAgICAgICAgYyA9IF9jb250ZXh0JGdldFRyYW5zZm9ybS5jLFxuICAgICAgICBkID0gX2NvbnRleHQkZ2V0VHJhbnNmb3JtLmQsXG4gICAgICAgIGUgPSBfY29udGV4dCRnZXRUcmFuc2Zvcm0uZSxcbiAgICAgICAgZiA9IF9jb250ZXh0JGdldFRyYW5zZm9ybS5mO1xuICAgICAgY29udGV4dC5yZXNldFRyYW5zZm9ybSgpO1xuICAgICAgaWYgKCEoaW1hZ2VDYWNoZSAhPT0gbnVsbCAmJiBpbWFnZUNhY2hlICE9PSB2b2lkIDAgJiYgaW1hZ2VDYWNoZS5ncmlkU2l6ZSkpIHtcbiAgICAgICAgdGhpcy5pbWFnZVBvb2wuY3JlYXRlSW1hZ2VUaWxlcyhzcmMsIFtdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gcmVyZW5kZXJcbiAgICAgICAgICAvLyBvYmplY3QuZGlydHkoKTtcbiAgICAgICAgICBvYmplY3QucmVuZGVyYWJsZS5kaXJ0eSA9IHRydWU7XG4gICAgICAgICAgb2JqZWN0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuY29udGV4dC5yZW5kZXJpbmdTZXJ2aWNlLmRpcnRpZnkoKTtcbiAgICAgICAgfSwgb2JqZWN0KVtcImNhdGNoXCJdKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvL1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHNjYWxlVG9PcmlnaW4gPSBbb3JpZ2luYWxTaXplWzBdIC8gaW1hZ2VSZWN0WzJdLCBvcmlnaW5hbFNpemVbMV0gLyBpbWFnZVJlY3RbM11dO1xuICAgICAgdmFyIHNjYWxlZFRpbGVTaXplID0gW2ltYWdlQ2FjaGUudGlsZVNpemVbMF0gLyBzY2FsZVRvT3JpZ2luWzBdLCBpbWFnZUNhY2hlLnRpbGVTaXplWzFdIC8gc2NhbGVUb09yaWdpblsxXV07XG4gICAgICB2YXIgX3JlZiA9IFtNYXRoLmZsb29yKChkcmF3UmVjdFswXSAtIGltYWdlUmVjdFswXSkgLyBzY2FsZWRUaWxlU2l6ZVswXSksIE1hdGguY2VpbCgoZHJhd1JlY3RbMF0gKyBkcmF3UmVjdFsyXSAtIGltYWdlUmVjdFswXSkgLyBzY2FsZWRUaWxlU2l6ZVswXSldLFxuICAgICAgICBzdGFydFRpbGVYID0gX3JlZlswXSxcbiAgICAgICAgZW5kVGlsZVggPSBfcmVmWzFdO1xuICAgICAgdmFyIF9yZWYyID0gW01hdGguZmxvb3IoKGRyYXdSZWN0WzFdIC0gaW1hZ2VSZWN0WzFdKSAvIHNjYWxlZFRpbGVTaXplWzFdKSwgTWF0aC5jZWlsKChkcmF3UmVjdFsxXSArIGRyYXdSZWN0WzNdIC0gaW1hZ2VSZWN0WzFdKSAvIHNjYWxlZFRpbGVTaXplWzFdKV0sXG4gICAgICAgIHN0YXJ0VGlsZVkgPSBfcmVmMlswXSxcbiAgICAgICAgZW5kVGlsZVkgPSBfcmVmMlsxXTtcbiAgICAgIGZvciAodmFyIHRpbGVZID0gc3RhcnRUaWxlWTsgdGlsZVkgPD0gZW5kVGlsZVk7IHRpbGVZKyspIHtcbiAgICAgICAgZm9yICh2YXIgdGlsZVggPSBzdGFydFRpbGVYOyB0aWxlWCA8PSBlbmRUaWxlWDsgdGlsZVgrKykge1xuICAgICAgICAgIHZhciBpdGVtID0gaW1hZ2VDYWNoZS50aWxlc1t0aWxlWV1bdGlsZVhdO1xuICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICB2YXIgdGlsZVJlY3QgPSBbTWF0aC5mbG9vcihpbWFnZVJlY3RbMF0gKyBpdGVtLnRpbGVYICogc2NhbGVkVGlsZVNpemVbMF0pLCBNYXRoLmZsb29yKGltYWdlUmVjdFsxXSArIGl0ZW0udGlsZVkgKiBzY2FsZWRUaWxlU2l6ZVsxXSksIE1hdGguY2VpbChzY2FsZWRUaWxlU2l6ZVswXSksIE1hdGguY2VpbChzY2FsZWRUaWxlU2l6ZVsxXSldO1xuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoaXRlbS5kYXRhLCB0aWxlUmVjdFswXSwgdGlsZVJlY3RbMV0sIHRpbGVSZWN0WzJdLCB0aWxlUmVjdFszXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb250ZXh0LnNldFRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcihjb250ZXh0LCBwYXJzZWRTdHlsZSwgb2JqZWN0KSB7XG4gICAgICB2YXIgX3BhcnNlZFN0eWxlJHggPSBwYXJzZWRTdHlsZS54LFxuICAgICAgICB4ID0gX3BhcnNlZFN0eWxlJHggPT09IHZvaWQgMCA/IDAgOiBfcGFyc2VkU3R5bGUkeCxcbiAgICAgICAgX3BhcnNlZFN0eWxlJHkgPSBwYXJzZWRTdHlsZS55LFxuICAgICAgICB5ID0gX3BhcnNlZFN0eWxlJHkgPT09IHZvaWQgMCA/IDAgOiBfcGFyc2VkU3R5bGUkeSxcbiAgICAgICAgd2lkdGggPSBwYXJzZWRTdHlsZS53aWR0aCxcbiAgICAgICAgaGVpZ2h0ID0gcGFyc2VkU3R5bGUuaGVpZ2h0LFxuICAgICAgICBzcmMgPSBwYXJzZWRTdHlsZS5zcmMsXG4gICAgICAgIHNoYWRvd0NvbG9yID0gcGFyc2VkU3R5bGUuc2hhZG93Q29sb3IsXG4gICAgICAgIHNoYWRvd0JsdXIgPSBwYXJzZWRTdHlsZS5zaGFkb3dCbHVyO1xuICAgICAgdmFyIGltYWdlQ2FjaGUgPSB0aGlzLmltYWdlUG9vbC5nZXRJbWFnZVN5bmMoc3JjLCBvYmplY3QpO1xuICAgICAgdmFyIGltYWdlID0gaW1hZ2VDYWNoZSA9PT0gbnVsbCB8fCBpbWFnZUNhY2hlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbWFnZUNhY2hlLmltZztcbiAgICAgIHZhciBpdyA9IHdpZHRoO1xuICAgICAgdmFyIGloID0gaGVpZ2h0O1xuICAgICAgaWYgKCFpbWFnZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpdyB8fCAoaXcgPSBpbWFnZS53aWR0aCk7XG4gICAgICBpaCB8fCAoaWggPSBpbWFnZS5oZWlnaHQpO1xuICAgICAgdmFyIGhhc1NoYWRvdyA9ICFpc05pbChzaGFkb3dDb2xvcikgJiYgc2hhZG93Qmx1ciA+IDA7XG4gICAgICBzZXRTaGFkb3dBbmRGaWx0ZXIob2JqZWN0LCBjb250ZXh0LCBoYXNTaGFkb3cpO1xuXG4gICAgICAvLyBub2RlLWNhbnZhcyB3aWxsIHRocm93IHRoZSBmb2xsb3dpbmcgZXJyOlxuICAgICAgLy8gRXJyb3I6IEltYWdlIGdpdmVuIGhhcyBub3QgY29tcGxldGVkIGxvYWRpbmdcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBfb2JqZWN0JG93bmVyRG9jdW1lbnQgPSBvYmplY3Qub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb250ZXh0U2VydmljZSgpLmdldERvbUVsZW1lbnQoKSxcbiAgICAgICAgICB2aWV3V2lkdGggPSBfb2JqZWN0JG93bmVyRG9jdW1lbnQud2lkdGgsXG4gICAgICAgICAgdmlld0hlaWdodCA9IF9vYmplY3Qkb3duZXJEb2N1bWVudC5oZWlnaHQ7XG4gICAgICAgIHZhciBjdXJyZW50VHJhbnNmb3JtID0gY29udGV4dC5nZXRUcmFuc2Zvcm0oKTtcbiAgICAgICAgdmFyIGEgPSBjdXJyZW50VHJhbnNmb3JtLmEsXG4gICAgICAgICAgYiA9IGN1cnJlbnRUcmFuc2Zvcm0uYixcbiAgICAgICAgICBjID0gY3VycmVudFRyYW5zZm9ybS5jLFxuICAgICAgICAgIGQgPSBjdXJyZW50VHJhbnNmb3JtLmQsXG4gICAgICAgICAgZSA9IGN1cnJlbnRUcmFuc2Zvcm0uZSxcbiAgICAgICAgICBmID0gY3VycmVudFRyYW5zZm9ybS5mO1xuICAgICAgICAvLyDmnoTlu7ogbWF0NCDnn6npmLVcbiAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgIHZhciB0cmFuc2Zvcm1NYXRyaXggPSBtYXQ0LmZyb21WYWx1ZXMoYSwgYywgMCwgMCwgYiwgZCwgMCwgMCwgMCwgMCwgMSwgMCwgZSwgZiwgMCwgMSk7XG4gICAgICAgIHZhciBpbWFnZVJlY3QgPSB0cmFuc2Zvcm1SZWN0KFt4LCB5LCBpdywgaWhdLCB0cmFuc2Zvcm1NYXRyaXgpO1xuICAgICAgICB2YXIgZHJhd1JlY3QgPSBjYWxjdWxhdGVPdmVybGFwUmVjdChbMCwgMCwgdmlld1dpZHRoLCB2aWV3SGVpZ2h0XSwgaW1hZ2VSZWN0KTtcbiAgICAgICAgaWYgKCFkcmF3UmVjdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9iamVjdC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbmZpZygpLmVuYWJsZUxhcmdlSW1hZ2VPcHRpbWl6YXRpb24pIHtcbiAgICAgICAgICBJbWFnZVJlbmRlcmVyLnJlbmRlckZ1bGwoY29udGV4dCwgcGFyc2VkU3R5bGUsIG9iamVjdCwge1xuICAgICAgICAgICAgaW1hZ2U6IGltYWdlLFxuICAgICAgICAgICAgZHJhd1JlY3Q6IFt4LCB5LCBpdywgaWhdXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzaXplT2ZPcmlnaW4gPSBpbWFnZVJlY3RbMl0gLyBpbWFnZUNhY2hlLnNpemVbMF07XG4gICAgICAgIGlmIChzaXplT2ZPcmlnaW4gPCAoaW1hZ2VDYWNoZS5kb3duU2FtcGxpbmdSYXRlIHx8IDAuNSkpIHtcbiAgICAgICAgICB0aGlzLnJlbmRlckRvd25TYW1wbGVkKGNvbnRleHQsIHBhcnNlZFN0eWxlLCBvYmplY3QsIHtcbiAgICAgICAgICAgIHNyYzogc3JjLFxuICAgICAgICAgICAgaW1hZ2VDYWNoZTogaW1hZ2VDYWNoZSxcbiAgICAgICAgICAgIGRyYXdSZWN0OiBbeCwgeSwgaXcsIGloXVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIUltYWdlUG9vbC5pc1N1cHBvcnRUaWxlKSB7XG4gICAgICAgICAgSW1hZ2VSZW5kZXJlci5yZW5kZXJGdWxsKGNvbnRleHQsIHBhcnNlZFN0eWxlLCBvYmplY3QsIHtcbiAgICAgICAgICAgIGltYWdlOiBpbWFnZSxcbiAgICAgICAgICAgIGRyYXdSZWN0OiBbeCwgeSwgaXcsIGloXVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbmRlclRpbGUoY29udGV4dCwgcGFyc2VkU3R5bGUsIG9iamVjdCwge1xuICAgICAgICAgIHNyYzogc3JjLFxuICAgICAgICAgIGltYWdlQ2FjaGU6IGltYWdlQ2FjaGUsXG4gICAgICAgICAgaW1hZ2VSZWN0OiBpbWFnZVJlY3QsXG4gICAgICAgICAgZHJhd1JlY3Q6IGRyYXdSZWN0XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoX3VudXNlZCkge31cbiAgICB9XG5cbiAgICAvLyAtLS1cbiAgfSwge1xuICAgIGtleTogXCJkcmF3VG9Db250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUb0NvbnRleHQoY29udGV4dCwgb2JqZWN0LCByZW5kZXJTdGF0ZSwgcGx1Z2luLCBydW50aW1lKSB7XG4gICAgICB0aGlzLnJlbmRlcihjb250ZXh0LCBvYmplY3QucGFyc2VkU3R5bGUsIG9iamVjdCk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwicmVuZGVyRnVsbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJGdWxsKGNvbnRleHQsIHBhcnNlZFN0eWxlLCBvYmplY3QsIGRhdGEpIHtcbiAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGRhdGEuaW1hZ2UsIE1hdGguZmxvb3IoZGF0YS5kcmF3UmVjdFswXSksIE1hdGguZmxvb3IoZGF0YS5kcmF3UmVjdFsxXSksIE1hdGguY2VpbChkYXRhLmRyYXdSZWN0WzJdKSwgTWF0aC5jZWlsKGRhdGEuZHJhd1JlY3RbM10pKTtcbiAgICB9XG4gIH1dKTtcbn0oRGVmYXVsdFJlbmRlcmVyKTtcblxudmFyIFRleHRSZW5kZXJlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0RlZmF1bHRSZW5kZXJlcikge1xuICBmdW5jdGlvbiBUZXh0UmVuZGVyZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRleHRSZW5kZXJlcik7XG4gICAgcmV0dXJuIF9jYWxsU3VwZXIodGhpcywgVGV4dFJlbmRlcmVyLCBhcmd1bWVudHMpO1xuICB9XG4gIF9pbmhlcml0cyhUZXh0UmVuZGVyZXIsIF9EZWZhdWx0UmVuZGVyZXIpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFRleHRSZW5kZXJlciwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcihjb250ZXh0LCBwYXJzZWRTdHlsZSwgb2JqZWN0LCBjYW52YXNDb250ZXh0LCBwbHVnaW4sIHJ1bnRpbWUpIHtcbiAgICAgIC8vIFRyaWdnZXIgdGV4dCBnZW9tZXRyeSBjYWxjdWxhdGlvbi5cbiAgICAgIG9iamVjdC5nZXRCb3VuZHMoKTtcbiAgICAgIHZhciBfcGFyc2VkU3R5bGUkbGluZVdpZHQgPSBwYXJzZWRTdHlsZS5saW5lV2lkdGgsXG4gICAgICAgIGxpbmVXaWR0aCA9IF9wYXJzZWRTdHlsZSRsaW5lV2lkdCA9PT0gdm9pZCAwID8gMSA6IF9wYXJzZWRTdHlsZSRsaW5lV2lkdCxcbiAgICAgICAgX3BhcnNlZFN0eWxlJHRleHRBbGlnID0gcGFyc2VkU3R5bGUudGV4dEFsaWduLFxuICAgICAgICB0ZXh0QWxpZ24gPSBfcGFyc2VkU3R5bGUkdGV4dEFsaWcgPT09IHZvaWQgMCA/ICdzdGFydCcgOiBfcGFyc2VkU3R5bGUkdGV4dEFsaWcsXG4gICAgICAgIF9wYXJzZWRTdHlsZSR0ZXh0QmFzZSA9IHBhcnNlZFN0eWxlLnRleHRCYXNlbGluZSxcbiAgICAgICAgdGV4dEJhc2VsaW5lID0gX3BhcnNlZFN0eWxlJHRleHRCYXNlID09PSB2b2lkIDAgPyAnYWxwaGFiZXRpYycgOiBfcGFyc2VkU3R5bGUkdGV4dEJhc2UsXG4gICAgICAgIF9wYXJzZWRTdHlsZSRsaW5lSm9pbiA9IHBhcnNlZFN0eWxlLmxpbmVKb2luLFxuICAgICAgICBsaW5lSm9pbiA9IF9wYXJzZWRTdHlsZSRsaW5lSm9pbiA9PT0gdm9pZCAwID8gJ21pdGVyJyA6IF9wYXJzZWRTdHlsZSRsaW5lSm9pbixcbiAgICAgICAgX3BhcnNlZFN0eWxlJG1pdGVyTGltID0gcGFyc2VkU3R5bGUubWl0ZXJMaW1pdCxcbiAgICAgICAgbWl0ZXJMaW1pdCA9IF9wYXJzZWRTdHlsZSRtaXRlckxpbSA9PT0gdm9pZCAwID8gMTAgOiBfcGFyc2VkU3R5bGUkbWl0ZXJMaW0sXG4gICAgICAgIF9wYXJzZWRTdHlsZSRsZXR0ZXJTcCA9IHBhcnNlZFN0eWxlLmxldHRlclNwYWNpbmcsXG4gICAgICAgIGxldHRlclNwYWNpbmcgPSBfcGFyc2VkU3R5bGUkbGV0dGVyU3AgPT09IHZvaWQgMCA/IDAgOiBfcGFyc2VkU3R5bGUkbGV0dGVyU3AsXG4gICAgICAgIHN0cm9rZSA9IHBhcnNlZFN0eWxlLnN0cm9rZSxcbiAgICAgICAgZmlsbCA9IHBhcnNlZFN0eWxlLmZpbGwsXG4gICAgICAgIGZpbGxSdWxlID0gcGFyc2VkU3R5bGUuZmlsbFJ1bGUsXG4gICAgICAgIF9wYXJzZWRTdHlsZSRmaWxsT3BhYyA9IHBhcnNlZFN0eWxlLmZpbGxPcGFjaXR5LFxuICAgICAgICBmaWxsT3BhY2l0eSA9IF9wYXJzZWRTdHlsZSRmaWxsT3BhYyA9PT0gdm9pZCAwID8gMSA6IF9wYXJzZWRTdHlsZSRmaWxsT3BhYyxcbiAgICAgICAgX3BhcnNlZFN0eWxlJHN0cm9rZU9wID0gcGFyc2VkU3R5bGUuc3Ryb2tlT3BhY2l0eSxcbiAgICAgICAgc3Ryb2tlT3BhY2l0eSA9IF9wYXJzZWRTdHlsZSRzdHJva2VPcCA9PT0gdm9pZCAwID8gMSA6IF9wYXJzZWRTdHlsZSRzdHJva2VPcCxcbiAgICAgICAgX3BhcnNlZFN0eWxlJG9wYWNpdHkgPSBwYXJzZWRTdHlsZS5vcGFjaXR5LFxuICAgICAgICBvcGFjaXR5ID0gX3BhcnNlZFN0eWxlJG9wYWNpdHkgPT09IHZvaWQgMCA/IDEgOiBfcGFyc2VkU3R5bGUkb3BhY2l0eSxcbiAgICAgICAgbWV0cmljcyA9IHBhcnNlZFN0eWxlLm1ldHJpY3MsXG4gICAgICAgIF9wYXJzZWRTdHlsZSR4ID0gcGFyc2VkU3R5bGUueCxcbiAgICAgICAgeCA9IF9wYXJzZWRTdHlsZSR4ID09PSB2b2lkIDAgPyAwIDogX3BhcnNlZFN0eWxlJHgsXG4gICAgICAgIF9wYXJzZWRTdHlsZSR5ID0gcGFyc2VkU3R5bGUueSxcbiAgICAgICAgeSA9IF9wYXJzZWRTdHlsZSR5ID09PSB2b2lkIDAgPyAwIDogX3BhcnNlZFN0eWxlJHksXG4gICAgICAgIGR4ID0gcGFyc2VkU3R5bGUuZHgsXG4gICAgICAgIGR5ID0gcGFyc2VkU3R5bGUuZHksXG4gICAgICAgIHNoYWRvd0NvbG9yID0gcGFyc2VkU3R5bGUuc2hhZG93Q29sb3IsXG4gICAgICAgIHNoYWRvd0JsdXIgPSBwYXJzZWRTdHlsZS5zaGFkb3dCbHVyO1xuICAgICAgdmFyIGZvbnQgPSBtZXRyaWNzLmZvbnQsXG4gICAgICAgIGxpbmVzID0gbWV0cmljcy5saW5lcyxcbiAgICAgICAgaGVpZ2h0ID0gbWV0cmljcy5oZWlnaHQsXG4gICAgICAgIGxpbmVIZWlnaHQgPSBtZXRyaWNzLmxpbmVIZWlnaHQsXG4gICAgICAgIGxpbmVNZXRyaWNzID0gbWV0cmljcy5saW5lTWV0cmljcztcbiAgICAgIGNvbnRleHQuZm9udCA9IGZvbnQ7XG4gICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgIGNvbnRleHQudGV4dEFsaWduID0gdGV4dEFsaWduID09PSAnbWlkZGxlJyA/ICdjZW50ZXInIDogdGV4dEFsaWduO1xuICAgICAgdmFyIGZvcm1hdHRlZFRleHRCYXNlbGluZSA9IHRleHRCYXNlbGluZTtcbiAgICAgIGlmIChmb3JtYXR0ZWRUZXh0QmFzZWxpbmUgPT09ICdhbHBoYWJldGljJykge1xuICAgICAgICBmb3JtYXR0ZWRUZXh0QmFzZWxpbmUgPSAnYm90dG9tJztcbiAgICAgIH1cbiAgICAgIGNvbnRleHQubGluZUpvaW4gPSBsaW5lSm9pbjtcbiAgICAgIGlmICghaXNOaWwobWl0ZXJMaW1pdCkpIHtcbiAgICAgICAgY29udGV4dC5taXRlckxpbWl0ID0gbWl0ZXJMaW1pdDtcbiAgICAgIH1cbiAgICAgIHZhciBsaW5lUG9zaXRpb25ZID0geTtcbiAgICAgIC8vIGhhbmRsZSB2ZXJ0aWNhbCB0ZXh0IGJhc2VsaW5lXG4gICAgICBpZiAodGV4dEJhc2VsaW5lID09PSAnbWlkZGxlJykge1xuICAgICAgICBsaW5lUG9zaXRpb25ZICs9IC1oZWlnaHQgLyAyIC0gbGluZUhlaWdodCAvIDI7XG4gICAgICB9IGVsc2UgaWYgKHRleHRCYXNlbGluZSA9PT0gJ2JvdHRvbScgfHwgdGV4dEJhc2VsaW5lID09PSAnYWxwaGFiZXRpYycgfHwgdGV4dEJhc2VsaW5lID09PSAnaWRlb2dyYXBoaWMnKSB7XG4gICAgICAgIGxpbmVQb3NpdGlvblkgKz0gLWhlaWdodDtcbiAgICAgIH0gZWxzZSBpZiAodGV4dEJhc2VsaW5lID09PSAndG9wJyB8fCB0ZXh0QmFzZWxpbmUgPT09ICdoYW5naW5nJykge1xuICAgICAgICBsaW5lUG9zaXRpb25ZICs9IC1saW5lSGVpZ2h0O1xuICAgICAgfVxuXG4gICAgICAvLyBhY2NvdW50IGZvciBkeCAmIGR5XG4gICAgICB2YXIgb2Zmc2V0WCA9IHggKyAoZHggfHwgMCk7XG4gICAgICBsaW5lUG9zaXRpb25ZICs9IGR5IHx8IDA7XG4gICAgICBpZiAobGluZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGlmIChmb3JtYXR0ZWRUZXh0QmFzZWxpbmUgPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgZm9ybWF0dGVkVGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgICAgbGluZVBvc2l0aW9uWSAtPSAwLjUgKiBoZWlnaHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0dGVkVGV4dEJhc2VsaW5lID09PSAndG9wJykge1xuICAgICAgICAgIGZvcm1hdHRlZFRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICAgIGxpbmVQb3NpdGlvblkgKz0gMC41ICogaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb250ZXh0LnRleHRCYXNlbGluZSA9IGZvcm1hdHRlZFRleHRCYXNlbGluZTtcbiAgICAgIHZhciBoYXNTaGFkb3cgPSAhaXNOaWwoc2hhZG93Q29sb3IpICYmIHNoYWRvd0JsdXIgPiAwO1xuICAgICAgc2V0U2hhZG93QW5kRmlsdGVyKG9iamVjdCwgY29udGV4dCwgaGFzU2hhZG93KTtcblxuICAgICAgLy8gZHJhdyBsaW5lcyBsaW5lIGJ5IGxpbmVcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGxpbmVQb3NpdGlvblggPSBsaW5lV2lkdGggLyAyICsgb2Zmc2V0WDtcbiAgICAgICAgbGluZVBvc2l0aW9uWSArPSBsaW5lSGVpZ2h0O1xuXG4gICAgICAgIC8vIG5vIG5lZWQgdG8gcmUtcG9zaXRpb24gWCwgY2F1c2Ugd2UgYWxyZWFkeSBzZXQgdGV4dCBhbGlnblxuICAgICAgICAvLyBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQvdGV4dEFsaWduXG4gICAgICAgIGlmICghaXNOaWwoc3Ryb2tlKSAmJiAhc3Ryb2tlLmlzTm9uZSAmJiBsaW5lV2lkdGgpIHtcbiAgICAgICAgICB0aGlzLmRyYXdMZXR0ZXJTcGFjaW5nKGNvbnRleHQsIG9iamVjdCwgbGluZXNbaV0sIGxpbmVNZXRyaWNzW2ldLCB0ZXh0QWxpZ24sIGxpbmVQb3NpdGlvblgsIGxpbmVQb3NpdGlvblksIGxldHRlclNwYWNpbmcsIGZpbGwsIGZpbGxSdWxlLCBmaWxsT3BhY2l0eSwgc3Ryb2tlLCBzdHJva2VPcGFjaXR5LCBvcGFjaXR5LCB0cnVlLCBjYW52YXNDb250ZXh0LCBwbHVnaW4sIHJ1bnRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNOaWwoZmlsbCkpIHtcbiAgICAgICAgICB0aGlzLmRyYXdMZXR0ZXJTcGFjaW5nKGNvbnRleHQsIG9iamVjdCwgbGluZXNbaV0sIGxpbmVNZXRyaWNzW2ldLCB0ZXh0QWxpZ24sIGxpbmVQb3NpdGlvblgsIGxpbmVQb3NpdGlvblksIGxldHRlclNwYWNpbmcsIGZpbGwsIGZpbGxSdWxlLCBmaWxsT3BhY2l0eSwgc3Ryb2tlLCBzdHJva2VPcGFjaXR5LCBvcGFjaXR5LCBmYWxzZSwgY2FudmFzQ29udGV4dCwgcGx1Z2luLCBydW50aW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkcmF3TGV0dGVyU3BhY2luZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3TGV0dGVyU3BhY2luZyhjb250ZXh0LCBvYmplY3QsIHRleHQsIGxpbmVNZXRyaWNzLCB0ZXh0QWxpZ24sIHgsIHksIGxldHRlclNwYWNpbmcsIGZpbGwsIGZpbGxSdWxlLCBmaWxsT3BhY2l0eSwgc3Ryb2tlLCBzdHJva2VPcGFjaXR5LCBvcGFjaXR5LCBpc1N0cm9rZSwgY2FudmFzQ29udGV4dCwgcGx1Z2luLCBydW50aW1lKSB7XG4gICAgICAvLyBsZXR0ZXJTcGFjaW5nIG9mIDAgbWVhbnMgbm9ybWFsLCByZW5kZXIgYWxsIHRleHRzIGRpcmVjdGx5XG4gICAgICBpZiAobGV0dGVyU3BhY2luZyA9PT0gMCkge1xuICAgICAgICBpZiAoaXNTdHJva2UpIHtcbiAgICAgICAgICB0aGlzLnN0cm9rZVRleHQoY29udGV4dCwgb2JqZWN0LCB0ZXh0LCB4LCB5LCBzdHJva2UsIHN0cm9rZU9wYWNpdHksIGNhbnZhc0NvbnRleHQsIHBsdWdpbiwgcnVudGltZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5maWxsVGV4dChjb250ZXh0LCBvYmplY3QsIHRleHQsIHgsIHksIGZpbGwsIGZpbGxSdWxlLCBmaWxsT3BhY2l0eSwgb3BhY2l0eSwgY2FudmFzQ29udGV4dCwgcGx1Z2luLCBydW50aW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGRyYXcgdGV4dCB1c2luZyBsZWZ0IGFsaWduXG4gICAgICB2YXIgY3VycmVudFRleHRBbGlnbiA9IGNvbnRleHQudGV4dEFsaWduO1xuICAgICAgY29udGV4dC50ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICB2YXIgY3VycmVudFBvc2l0aW9uID0geDtcbiAgICAgIGlmICh0ZXh0QWxpZ24gPT09ICdjZW50ZXInIHx8IHRleHRBbGlnbiA9PT0gJ21pZGRsZScpIHtcbiAgICAgICAgY3VycmVudFBvc2l0aW9uID0geCAtIGxpbmVNZXRyaWNzLndpZHRoIC8gMjtcbiAgICAgIH0gZWxzZSBpZiAodGV4dEFsaWduID09PSAncmlnaHQnIHx8IHRleHRBbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgY3VycmVudFBvc2l0aW9uID0geCAtIGxpbmVNZXRyaWNzLndpZHRoO1xuICAgICAgfVxuICAgICAgdmFyIHN0cmluZ0FycmF5ID0gQXJyYXkuZnJvbSh0ZXh0KTtcbiAgICAgIHZhciBwcmV2aW91c1dpZHRoID0gY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KS53aWR0aDtcbiAgICAgIHZhciBjdXJyZW50V2lkdGggPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmdBcnJheS5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgY3VycmVudENoYXIgPSBzdHJpbmdBcnJheVtpXTtcbiAgICAgICAgaWYgKGlzU3Ryb2tlKSB7XG4gICAgICAgICAgdGhpcy5zdHJva2VUZXh0KGNvbnRleHQsIG9iamVjdCwgY3VycmVudENoYXIsIGN1cnJlbnRQb3NpdGlvbiwgeSwgc3Ryb2tlLCBzdHJva2VPcGFjaXR5LCBjYW52YXNDb250ZXh0LCBwbHVnaW4sIHJ1bnRpbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZmlsbFRleHQoY29udGV4dCwgb2JqZWN0LCBjdXJyZW50Q2hhciwgY3VycmVudFBvc2l0aW9uLCB5LCBmaWxsLCBmaWxsUnVsZSwgZmlsbE9wYWNpdHksIG9wYWNpdHksIGNhbnZhc0NvbnRleHQsIHBsdWdpbiwgcnVudGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudFdpZHRoID0gY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0LnN1YnN0cmluZyhpICsgMSkpLndpZHRoO1xuICAgICAgICBjdXJyZW50UG9zaXRpb24gKz0gcHJldmlvdXNXaWR0aCAtIGN1cnJlbnRXaWR0aCArIGxldHRlclNwYWNpbmc7XG4gICAgICAgIHByZXZpb3VzV2lkdGggPSBjdXJyZW50V2lkdGg7XG4gICAgICB9XG4gICAgICBjb250ZXh0LnRleHRBbGlnbiA9IGN1cnJlbnRUZXh0QWxpZ247XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZpbGxUZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbGxUZXh0KGNvbnRleHQsIG9iamVjdCwgdGV4dCwgeCwgeSwgZmlsbCwgZmlsbFJ1bGUsIGZpbGxPcGFjaXR5LCBvcGFjaXR5LCBjYW52YXNDb250ZXh0LCBwbHVnaW4sIHJ1bnRpbWUpIHtcbiAgICAgIGFwcGx5RmlsbChjb250ZXh0LCBvYmplY3QsIGZpbGwsIGZpbGxSdWxlLCBjYW52YXNDb250ZXh0LCBwbHVnaW4sIHJ1bnRpbWUsIHRoaXMuaW1hZ2VQb29sLCB0cnVlKTtcbiAgICAgIHZhciBjdXJyZW50R2xvYmFsQWxwaGE7XG4gICAgICB2YXIgYXBwbHlPcGFjaXR5ID0gIWlzTmlsKGZpbGxPcGFjaXR5KSAmJiBmaWxsT3BhY2l0eSAhPT0gMTtcbiAgICAgIGlmIChhcHBseU9wYWNpdHkpIHtcbiAgICAgICAgY3VycmVudEdsb2JhbEFscGhhID0gY29udGV4dC5nbG9iYWxBbHBoYTtcbiAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IGZpbGxPcGFjaXR5ICogb3BhY2l0eTtcbiAgICAgIH1cbiAgICAgIGNvbnRleHQuZmlsbFRleHQodGV4dCwgeCwgeSk7XG4gICAgICBpZiAoYXBwbHlPcGFjaXR5KSB7XG4gICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBjdXJyZW50R2xvYmFsQWxwaGE7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0cm9rZVRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3Ryb2tlVGV4dChjb250ZXh0LCBvYmplY3QsIHRleHQsIHgsIHksIHN0cm9rZSwgc3Ryb2tlT3BhY2l0eSwgY2FudmFzQ29udGV4dCwgcGx1Z2luLCBydW50aW1lKSB7XG4gICAgICBhcHBseVN0cm9rZShjb250ZXh0LCBvYmplY3QsIHN0cm9rZSwgY2FudmFzQ29udGV4dCwgcGx1Z2luLCBydW50aW1lLCB0aGlzLmltYWdlUG9vbCwgdHJ1ZSk7XG4gICAgICB2YXIgY3VycmVudEdsb2JhbEFscGhhO1xuICAgICAgdmFyIGFwcGx5T3BhY2l0eSA9ICFpc05pbChzdHJva2VPcGFjaXR5KSAmJiBzdHJva2VPcGFjaXR5ICE9PSAxO1xuICAgICAgaWYgKGFwcGx5T3BhY2l0eSkge1xuICAgICAgICBjdXJyZW50R2xvYmFsQWxwaGEgPSBjb250ZXh0Lmdsb2JhbEFscGhhO1xuICAgICAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gc3Ryb2tlT3BhY2l0eTtcbiAgICAgIH1cbiAgICAgIGNvbnRleHQuc3Ryb2tlVGV4dCh0ZXh0LCB4LCB5KTtcbiAgICAgIGlmIChhcHBseU9wYWNpdHkpIHtcbiAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IGN1cnJlbnRHbG9iYWxBbHBoYTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAtLS1cbiAgfSwge1xuICAgIGtleTogXCJkcmF3VG9Db250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUb0NvbnRleHQoY29udGV4dCwgb2JqZWN0LCByZW5kZXJTdGF0ZSwgcGx1Z2luLCBydW50aW1lKSB7XG4gICAgICB0aGlzLnJlbmRlcihjb250ZXh0LCBvYmplY3QucGFyc2VkU3R5bGUsIG9iamVjdCwgb2JqZWN0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuY29udGV4dCwgcGx1Z2luLCBydW50aW1lKTtcbiAgICB9XG4gIH1dKTtcbn0oRGVmYXVsdFJlbmRlcmVyKTtcblxudmFyIFBsdWdpbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Fic3RyYWN0UmVuZGVyZXJQbHVnKSB7XG4gIGZ1bmN0aW9uIFBsdWdpbigpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQbHVnaW4pO1xuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBQbHVnaW4pO1xuICAgIF90aGlzLm5hbWUgPSAnY2FudmFzLXJlbmRlcmVyJztcbiAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKFBsdWdpbiwgX0Fic3RyYWN0UmVuZGVyZXJQbHVnKTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhQbHVnaW4sIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHZhciBfZGVmYXVsdFN0eWxlUmVuZGVyZXI7XG4gICAgICB2YXIgY2FudmFzUmVuZGVyZXJQbHVnaW5PcHRpb25zID0gX29iamVjdFNwcmVhZCh7XG4gICAgICAgIGRpcnR5T2JqZWN0TnVtVGhyZXNob2xkOiA1MDAsXG4gICAgICAgIGRpcnR5T2JqZWN0UmF0aW9UaHJlc2hvbGQ6IDAuOFxuICAgICAgfSwgdGhpcy5vcHRpb25zKTtcblxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIGltYWdlUG9vbCA9IHRoaXMuY29udGV4dC5pbWFnZVBvb2w7XG4gICAgICB2YXIgZGVmYXVsdFJlbmRlcmVyID0gbmV3IERlZmF1bHRSZW5kZXJlcihpbWFnZVBvb2wpO1xuICAgICAgdmFyIGRlZmF1bHRTdHlsZVJlbmRlcmVyRmFjdG9yeSA9IChfZGVmYXVsdFN0eWxlUmVuZGVyZXIgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9kZWZpbmVQcm9wZXJ0eShfZGVmaW5lUHJvcGVydHkoX2RlZmluZVByb3BlcnR5KF9kZWZpbmVQcm9wZXJ0eShfZGVmaW5lUHJvcGVydHkoX2RlZmluZVByb3BlcnR5KF9kZWZpbmVQcm9wZXJ0eShfZGVmaW5lUHJvcGVydHkoX2RlZmluZVByb3BlcnR5KF9kZWZhdWx0U3R5bGVSZW5kZXJlciwgU2hhcGUuQ0lSQ0xFLCBkZWZhdWx0UmVuZGVyZXIpLCBTaGFwZS5FTExJUFNFLCBkZWZhdWx0UmVuZGVyZXIpLCBTaGFwZS5SRUNULCBkZWZhdWx0UmVuZGVyZXIpLCBTaGFwZS5JTUFHRSwgbmV3IEltYWdlUmVuZGVyZXIoaW1hZ2VQb29sKSksIFNoYXBlLlRFWFQsIG5ldyBUZXh0UmVuZGVyZXIoaW1hZ2VQb29sKSksIFNoYXBlLkxJTkUsIGRlZmF1bHRSZW5kZXJlciksIFNoYXBlLlBPTFlMSU5FLCBkZWZhdWx0UmVuZGVyZXIpLCBTaGFwZS5QT0xZR09OLCBkZWZhdWx0UmVuZGVyZXIpLCBTaGFwZS5QQVRILCBkZWZhdWx0UmVuZGVyZXIpLCBTaGFwZS5HUk9VUCwgdW5kZWZpbmVkKSwgX2RlZmluZVByb3BlcnR5KF9kZWZpbmVQcm9wZXJ0eShfZGVmaW5lUHJvcGVydHkoX2RlZmF1bHRTdHlsZVJlbmRlcmVyLCBTaGFwZS5IVE1MLCB1bmRlZmluZWQpLCBTaGFwZS5NRVNILCB1bmRlZmluZWQpLCBTaGFwZS5GUkFHTUVOVCwgdW5kZWZpbmVkKSk7XG4gICAgICB0aGlzLmNvbnRleHQuZGVmYXVsdFN0eWxlUmVuZGVyZXJGYWN0b3J5ID0gZGVmYXVsdFN0eWxlUmVuZGVyZXJGYWN0b3J5O1xuICAgICAgdGhpcy5jb250ZXh0LnN0eWxlUmVuZGVyZXJGYWN0b3J5ID0gZGVmYXVsdFN0eWxlUmVuZGVyZXJGYWN0b3J5O1xuICAgICAgdGhpcy5hZGRSZW5kZXJpbmdQbHVnaW4obmV3IENhbnZhc1JlbmRlcmVyUGx1Z2luKGNhbnZhc1JlbmRlcmVyUGx1Z2luT3B0aW9ucykpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZXN0cm95XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLnJlbW92ZUFsbFJlbmRlcmluZ1BsdWdpbnMoKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmNvbnRleHQuZGVmYXVsdFN0eWxlUmVuZGVyZXJGYWN0b3J5O1xuICAgICAgZGVsZXRlIHRoaXMuY29udGV4dC5zdHlsZVJlbmRlcmVyRmFjdG9yeTtcbiAgICB9XG4gIH1dKTtcbn0oQWJzdHJhY3RSZW5kZXJlclBsdWdpbik7XG5cbmV4cG9ydCB7IERlZmF1bHRSZW5kZXJlciBhcyBDaXJjbGVSZW5kZXJlciwgRGVmYXVsdFJlbmRlcmVyLCBEZWZhdWx0UmVuZGVyZXIgYXMgRWxsaXBzZVJlbmRlcmVyLCBJbWFnZVJlbmRlcmVyLCBEZWZhdWx0UmVuZGVyZXIgYXMgTGluZVJlbmRlcmVyLCBEZWZhdWx0UmVuZGVyZXIgYXMgUGF0aFJlbmRlcmVyLCBQbHVnaW4sIERlZmF1bHRSZW5kZXJlciBhcyBQb2x5Z29uUmVuZGVyZXIsIERlZmF1bHRSZW5kZXJlciBhcyBQb2x5bGluZVJlbmRlcmVyLCBEZWZhdWx0UmVuZGVyZXIgYXMgUmVjdFJlbmRlcmVyLCBUZXh0UmVuZGVyZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfZGVmaW5lUHJvcGVydHkiLCJfb2JqZWN0U3ByZWFkIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NyZWF0ZUNsYXNzIiwiX2NhbGxTdXBlciIsIl9pbmhlcml0cyIsIkVsZW1lbnRFdmVudCIsIkFBQkIiLCJDdXN0b21FdmVudCIsIkNhbnZhc0V2ZW50IiwiU2hhcGUiLCJOb2RlIiwiR3JhZGllbnRUeXBlIiwiaXNQYXR0ZXJuIiwiQWJzdHJhY3RSZW5kZXJlclBsdWdpbiIsIl9zbGljZWRUb0FycmF5IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlIiwiX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkiLCJtYXQ0IiwidmVjMyIsImlzTmlsIiwiSW1hZ2VQb29sIiwiX3JlbmRlclN0YXRlIiwiQ2FudmFzUmVuZGVyZXJQbHVnaW4iLCJjYW52YXNSZW5kZXJlclBsdWdpbk9wdGlvbnMiLCJyZW1vdmVkUkJ1c2hOb2RlQUFCQnMiLCJyZW5kZXJRdWV1ZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwid3JpdGFibGUiLCJ2YWx1ZSIsInJlc3RvcmVTdGFjayIsInByZXZPYmplY3QiLCJjdXJyZW50Q29udGV4dCIsIk1hcCIsImNsZWFyRnVsbFNjcmVlbkxhc3RGcmFtZSIsImNsZWFyRnVsbFNjcmVlbiIsInZwTWF0cml4IiwiY3JlYXRlIiwiZHByTWF0cml4IiwidG1wTWF0NCIsInZlYzNhIiwidmVjM2IiLCJ2ZWMzYyIsInZlYzNkIiwia2V5IiwiYXBwbHkiLCJjb250ZXh0IiwicnVudGltZSIsIl90aGlzIiwiX3RoaXMkY29udGV4dCIsImNvbmZpZyIsImNhbWVyYSIsInJlbmRlcmluZ1NlcnZpY2UiLCJyZW5kZXJpbmdDb250ZXh0IiwickJ1c2hSb290IiwicGF0aEdlbmVyYXRvckZhY3RvcnkiLCJlbmFibGVSZW5kZXJpbmdPcHRpbWl6YXRpb24iLCJyZW5kZXJlciIsImdldENvbmZpZyIsImVuYWJsZURpcnR5Q2hlY2siLCJlbmFibGVEaXJ0eVJlY3RhbmdsZVJlbmRlcmluZyIsInJCdXNoIiwiY29udGV4dFNlcnZpY2UiLCJjYW52YXMiLCJyb290Iiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiaGFuZGxlVW5tb3VudGVkIiwiZSIsIm9iamVjdCIsInRhcmdldCIsInJCdXNoTm9kZSIsImFhYmIiLCJwdXNoIiwiaGFuZGxlQ3VsbGVkIiwiaG9va3MiLCJpbml0IiwidGFwIiwidGFnIiwiYWRkRXZlbnRMaXN0ZW5lciIsIlVOTU9VTlRFRCIsIkNVTExFRCIsImRwciIsImdldERQUiIsIndpZHRoIiwiaGVpZ2h0IiwiZ2V0Q29udGV4dCIsImNsZWFyUmVjdCIsImJhY2tncm91bmQiLCJkZXN0cm95IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImJlZ2luRnJhbWUiLCJfY2FudmFzJGNvbnRleHQkcmVuZGUiLCJfdGhpcyRjYW52YXNSZW5kZXJlclAiLCJkaXJ0eU9iamVjdE51bVRocmVzaG9sZCIsImRpcnR5T2JqZWN0UmF0aW9UaHJlc2hvbGQiLCJfcmVuZGVyaW5nU2VydmljZSRnZXQiLCJnZXRTdGF0cyIsInRvdGFsIiwicmVuZGVyZWQiLCJyYXRpbyIsInJlbmRlcmluZ1BsdWdpbnMiLCJpc0ZpcnN0VGltZVJlbmRlcmluZ0ZpbmlzaGVkIiwiZGlzYWJsZURpcnR5UmVjdGFuZ2xlUmVuZGVyaW5nIiwicmVzZXRUcmFuc2Zvcm0iLCJzZXRUcmFuc2Zvcm0iLCJyZW5kZXJCeVpJbmRleCIsInN0YWNrIiwibGVuZ3RoIiwiY3VycmVudE9iamVjdCIsInBvcCIsImlzVmlzaWJsZSIsImlzQ3VsbGVkIiwicmVuZGVyRGlzcGxheU9iamVjdE9wdGltaXplZCIsInJlbmRlckRpc3BsYXlPYmplY3QiLCJvYmplY3RzIiwic29ydGFibGUiLCJzb3J0ZWQiLCJjaGlsZE5vZGVzIiwiaSIsImVuZEZyYW1lIiwiY2xlYXIiLCJmcm9tU2NhbGluZyIsIm11bHRpcGx5IiwiZ2V0T3J0aG9NYXRyaXgiLCJzYXZlIiwicmVzdG9yZSIsImRpcnR5UmVuZGVyQm91bmRzIiwic2FmZU1lcmdlQUFCQiIsIm1lcmdlRGlydHlBQUJCcyIsImNvbmNhdCIsIm1hcCIsIl9yZWYiLCJtaW5YIiwibWluWSIsIm1heFgiLCJtYXhZIiwic2V0TWluTWF4IiwiaXNFbXB0eSIsImRpcnR5UmVjdCIsImNvbnZlcnRBQUJCMlJlY3QiLCJ4IiwieSIsInRsIiwidHJhbnNmb3JtTWF0NCIsInRyIiwiYmwiLCJiciIsIm1pbngiLCJNYXRoIiwibWluIiwibWlueSIsIm1heHgiLCJtYXgiLCJtYXh5IiwiaXgiLCJmbG9vciIsIml5IiwiaXdpZHRoIiwiY2VpbCIsImloZWlnaHQiLCJiZWdpblBhdGgiLCJyZWN0IiwiY2xpcCIsIl9jb25maWckcmVuZGVyZXIkZ2V0QyIsImVuYWJsZURpcnR5UmVjdGFuZ2xlUmVuZGVyaW5nRGVidWciLCJkaXNwYXRjaEV2ZW50IiwiRElSVFlfUkVDVEFOR0xFIiwiZGlydHlPYmplY3RzIiwic2VhcmNoRGlydHlPYmplY3RzIiwic29ydCIsImEiLCJiIiwicmVuZGVyT3JkZXIiLCJmb3JFYWNoIiwic2F2ZURpcnR5QUFCQiIsInJlbmRlciIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiY2FudmFzQ29udGV4dCIsInJlbmRlclN0YXRlIiwibm9kZU5hbWUiLCJ1cGRhdGVUcmFuc2Zvcm0iLCJjbGlwRHJhdyIsInN0eWxlUmVuZGVyZXIiLCJzdHlsZVJlbmRlcmVyRmFjdG9yeSIsImdlbmVyYXRlUGF0aCIsImNsaXBQYXRoIiwicGFyc2VkU3R5bGUiLCJleGFjdEVxdWFscyIsImdldFdvcmxkVHJhbnNmb3JtIiwiYXBwbHlXb3JsZFRyYW5zZm9ybSIsIl9nZW5lcmF0ZVBhdGgiLCJjbG9zZVBhdGgiLCJmb3JjZVVwZGF0ZVN0eWxlIiwicHJldk5vZGVOYW1lIiwiVEVYVCIsIklNQUdFIiwiYXBwbHlTdHlsZVRvQ29udGV4dCIsIkxJTkUiLCJQQVRIIiwiUE9MWUxJTkUiLCJkcmF3VG9Db250ZXh0IiwicmVuZGVyYWJsZSIsImRpcnR5IiwicGFyZW50IiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJET0NVTUVOVF9QT1NJVElPTl9DT05UQUlOUyIsIl9nZW5lcmF0ZVBhdGgyIiwiYXBwbHlBdHRyaWJ1dGVzVG9Db250ZXh0IiwiX3JlZjIiLCJzdHJva2UiLCJmaWxsIiwib3BhY2l0eSIsImxpbmVEYXNoIiwibGluZURhc2hPZmZzZXQiLCJzZXRMaW5lRGFzaCIsImdsb2JhbEFscGhhIiwiQXJyYXkiLCJpc0FycmF5IiwiaXNOb25lIiwic3Ryb2tlU3R5bGUiLCJhdHRyaWJ1dGVzIiwiZ2V0TWluIiwiZ2V0TWF4IiwicmVuZGVyQm91bmRzIiwiZ2V0UmVuZGVyQm91bmRzIiwiYWRkIiwiZGlydHlSZWN0YW5nbGUiLCJfZGlydHlSZWN0YW5nbGUkZ2V0TWkiLCJfZGlydHlSZWN0YW5nbGUkZ2V0TWkyIiwiX2RpcnR5UmVjdGFuZ2xlJGdldE1hIiwiX2RpcnR5UmVjdGFuZ2xlJGdldE1hMiIsInJCdXNoTm9kZXMiLCJzZWFyY2giLCJfcmVmMyIsImRpc3BsYXlPYmplY3QiLCJ1cGRhdGUiLCJjZW50ZXIiLCJoYWxmRXh0ZW50cyIsIm1hdHJpeCIsImNvcHkiLCJnZXRMb2NhbFRyYW5zZm9ybSIsIm1lcmdlZCIsIl9sZW4iLCJhcmd1bWVudHMiLCJhYWJicyIsIl9rZXkiLCJnZXRQYXR0ZXJuIiwicGF0dGVybiIsInBsdWdpbiIsImltYWdlUG9vbCIsIiRvZmZzY3JlZW5DYW52YXMiLCJpbWFnZSIsIl9wYXJzZWRTdHlsZSIsIm9mZnNjcmVlbkNhbnZhcyIsIm9mZnNjcmVlbkNhbnZhc0NyZWF0b3IiLCJnZXRPckNyZWF0ZUNhbnZhcyIsIm9mZnNjcmVlbkNhbnZhc0NvbnRleHQiLCJnZXRPckNyZWF0ZUNvbnRleHQiLCJjYW52YXNQYXR0ZXJuIiwiZ2V0T3JDcmVhdGVQYXR0ZXJuU3luYyIsImdldEdlb21ldHJ5Qm91bmRzIiwiZGlydGlmeSIsImdldENvbG9yIiwicGFyc2VkQ29sb3IiLCJjb2xvciIsInR5cGUiLCJMaW5lYXJHcmFkaWVudCIsIlJhZGlhbEdyYWRpZW50IiwiYm91bmRzIiwiZ2V0T3JDcmVhdGVHcmFkaWVudCIsIlNIQURPV19OVU1CRVJfU1RZTEUiLCJTVFJPS0VfU1RZTEUiLCJERUZBVUxUX1NUWUxFIiwic2hhZG93Qmx1ciIsInNoYWRvd09mZnNldFgiLCJzaGFkb3dPZmZzZXRZIiwic2hhZG93Q29sb3IiLCJmaWx0ZXIiLCJnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24iLCJzdHJva2VPcGFjaXR5IiwibGluZVdpZHRoIiwibGluZUNhcCIsImxpbmVKb2luIiwibWl0ZXJMaW1pdCIsImZpbGxPcGFjaXR5IiwiZGVmYXVsdFBhcnNlZFN0eWxlIiwidXBkYXRlQ29udGV4dElmTm90SGl0Q2FjaGUiLCJjYWNoZSIsInByZXZWYWx1ZSIsImhhcyIsImdldCIsInNldCIsIk9wdGltaXplZERlZmF1bHRSZW5kZXJlciIsImFwcGx5Q29tbW9uU3R5bGVUb0NvbnRleHQiLCJmb3JjZVVwZGF0ZSIsInByZXZTdHlsZSIsInN0eWxlIiwiYmxlbmQiLCJhcHBseVN0cm9rZUZpbGxTdHlsZVRvQ29udGV4dCIsIl9zdHlsZSRsaW5lV2lkdGgiLCJoYXNGaWxsIiwiaGFzU3Ryb2tlIiwic3R5bGVOYW1lIiwiX3ZhbHVlIiwiYXBwbHlTaGFkb3dBbmRGaWx0ZXJTdHlsZVRvQ29udGV4dCIsImhhc1NoYWRvdyIsInRvU3RyaW5nIiwiY2xlYXJTaGFkb3dBbmRGaWx0ZXJTdHlsZUZvckNvbnRleHQiLCJoYXNGaWx0ZXIiLCJvbmx5Q2xlYXJTaGFkb3dGaWx0ZXIiLCJ1bmRlZmluZWQiLCJvbGRGaWx0ZXIiLCJpbmRleE9mIiwicmVwbGFjZSIsInRyaW0iLCJmaWxsVG9Db250ZXh0IiwiX29iamVjdCRwYXJzZWRTdHlsZSIsImZpbGxSdWxlIiwicmVzZXRTdHlsZSIsImdyYWRpZW50Iiwic3Ryb2tlVG9Db250ZXh0IiwiX3RoaXMyIiwiX3N0eWxlJGZpbGwiLCJfc3R5bGUkb3BhY2l0eSIsIl9zdHlsZSRmaWxsT3BhY2l0eSIsIl9zdHlsZSRzdHJva2VPcGFjaXR5IiwiX3N0eWxlJGxpbmVXaWR0aDIiLCJpc0lubmVyU2hhZG93Iiwic2hhZG93VHlwZSIsImlzRmlsbFRyYW5zcGFyZW50IiwiYWxwaGEiLCJzaG91bGREcmF3U2hhZG93V2l0aFN0cm9rZSIsIm9yaWdpbkdsb2JhbEFscGhhIiwidXBkYXRlT3BhY2l0eSIsImNsZWFyU2hhZG93QW5kRmlsdGVyIiwiX3VwZGF0ZU9wYWNpdHkiLCJwcmV2T3BhY2l0eSIsIm9yaWdpbkJsZW5kIiwiRGVmYXVsdFJlbmRlcmVyIiwiX09wdGltaXplZERlZmF1bHRSZW5kIiwiX3BhcnNlZFN0eWxlJG9wYWNpdHkiLCJfcGFyc2VkU3R5bGUkZmlsbE9wYWMiLCJfcGFyc2VkU3R5bGUkc3Ryb2tlT3AiLCJfcGFyc2VkU3R5bGUkbGluZVdpZHQiLCJzZXRTaGFkb3dBbmRGaWx0ZXIiLCJhcHBseUZpbGwiLCJhcHBseVN0cm9rZSIsInNraXBGaWxsIiwic2tpcFN0cm9rZSIsImNhbGN1bGF0ZU92ZXJsYXBSZWN0IiwicmVjdDEiLCJyZWN0MiIsIl9yZWN0IiwieDEiLCJ5MSIsIncxIiwiaDEiLCJfcmVjdDIiLCJ4MiIsInkyIiwidzIiLCJoMiIsIm92ZXJsYXBMZWZ0Iiwib3ZlcmxhcFRvcCIsIm92ZXJsYXBSaWdodCIsIm92ZXJsYXBCb3R0b20iLCJ0cmFuc2Zvcm1SZWN0IiwiSW1hZ2VSZW5kZXJlciIsIl9EZWZhdWx0UmVuZGVyZXIiLCJyZW5kZXJEb3duU2FtcGxlZCIsImRhdGEiLCJzcmMiLCJpbWFnZUNhY2hlIiwiZG93blNhbXBsZWQiLCJjcmVhdGVEb3duU2FtcGxlZEltYWdlIiwidGhlbiIsInJlcyIsImRyYXdJbWFnZSIsImRyYXdSZWN0IiwicmVuZGVyVGlsZSIsImltYWdlUmVjdCIsIm9yaWdpbmFsU2l6ZSIsInNpemUiLCJfY29udGV4dCRnZXRUcmFuc2Zvcm0iLCJnZXRUcmFuc2Zvcm0iLCJjIiwiZCIsImYiLCJncmlkU2l6ZSIsImNyZWF0ZUltYWdlVGlsZXMiLCJzY2FsZVRvT3JpZ2luIiwic2NhbGVkVGlsZVNpemUiLCJ0aWxlU2l6ZSIsInN0YXJ0VGlsZVgiLCJlbmRUaWxlWCIsInN0YXJ0VGlsZVkiLCJlbmRUaWxlWSIsInRpbGVZIiwidGlsZVgiLCJpdGVtIiwidGlsZXMiLCJ0aWxlUmVjdCIsIl9wYXJzZWRTdHlsZSR4IiwiX3BhcnNlZFN0eWxlJHkiLCJnZXRJbWFnZVN5bmMiLCJpbWciLCJpdyIsImloIiwiX29iamVjdCRvd25lckRvY3VtZW50IiwiZ2V0Q29udGV4dFNlcnZpY2UiLCJnZXREb21FbGVtZW50Iiwidmlld1dpZHRoIiwidmlld0hlaWdodCIsImN1cnJlbnRUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1NYXRyaXgiLCJmcm9tVmFsdWVzIiwiZW5hYmxlTGFyZ2VJbWFnZU9wdGltaXphdGlvbiIsInJlbmRlckZ1bGwiLCJzaXplT2ZPcmlnaW4iLCJkb3duU2FtcGxpbmdSYXRlIiwiaXNTdXBwb3J0VGlsZSIsIl91bnVzZWQiLCJUZXh0UmVuZGVyZXIiLCJnZXRCb3VuZHMiLCJfcGFyc2VkU3R5bGUkdGV4dEFsaWciLCJ0ZXh0QWxpZ24iLCJfcGFyc2VkU3R5bGUkdGV4dEJhc2UiLCJ0ZXh0QmFzZWxpbmUiLCJfcGFyc2VkU3R5bGUkbGluZUpvaW4iLCJfcGFyc2VkU3R5bGUkbWl0ZXJMaW0iLCJfcGFyc2VkU3R5bGUkbGV0dGVyU3AiLCJsZXR0ZXJTcGFjaW5nIiwibWV0cmljcyIsImR4IiwiZHkiLCJmb250IiwibGluZXMiLCJsaW5lSGVpZ2h0IiwibGluZU1ldHJpY3MiLCJmb3JtYXR0ZWRUZXh0QmFzZWxpbmUiLCJsaW5lUG9zaXRpb25ZIiwib2Zmc2V0WCIsImxpbmVQb3NpdGlvblgiLCJkcmF3TGV0dGVyU3BhY2luZyIsInRleHQiLCJpc1N0cm9rZSIsInN0cm9rZVRleHQiLCJmaWxsVGV4dCIsImN1cnJlbnRUZXh0QWxpZ24iLCJjdXJyZW50UG9zaXRpb24iLCJzdHJpbmdBcnJheSIsImZyb20iLCJwcmV2aW91c1dpZHRoIiwibWVhc3VyZVRleHQiLCJjdXJyZW50V2lkdGgiLCJjdXJyZW50Q2hhciIsInN1YnN0cmluZyIsImN1cnJlbnRHbG9iYWxBbHBoYSIsImFwcGx5T3BhY2l0eSIsIlBsdWdpbiIsIl9BYnN0cmFjdFJlbmRlcmVyUGx1ZyIsIm9wdGlvbnMiLCJuYW1lIiwiX2RlZmF1bHRTdHlsZVJlbmRlcmVyIiwiZGVmYXVsdFJlbmRlcmVyIiwiZGVmYXVsdFN0eWxlUmVuZGVyZXJGYWN0b3J5IiwiQ0lSQ0xFIiwiRUxMSVBTRSIsIlJFQ1QiLCJQT0xZR09OIiwiR1JPVVAiLCJIVE1MIiwiTUVTSCIsIkZSQUdNRU5UIiwiYWRkUmVuZGVyaW5nUGx1Z2luIiwicmVtb3ZlQWxsUmVuZGVyaW5nUGx1Z2lucyIsIkNpcmNsZVJlbmRlcmVyIiwiRWxsaXBzZVJlbmRlcmVyIiwiTGluZVJlbmRlcmVyIiwiUGF0aFJlbmRlcmVyIiwiUG9seWdvblJlbmRlcmVyIiwiUG9seWxpbmVSZW5kZXJlciIsIlJlY3RSZW5kZXJlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@antv+g-plugin-canvas-renderer@2.2.18/node_modules/@antv/g-plugin-canvas-renderer/dist/index.esm.js\n");

/***/ })

};
;