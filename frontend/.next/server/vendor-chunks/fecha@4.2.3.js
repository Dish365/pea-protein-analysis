"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fecha@4.2.3";
exports.ids = ["vendor-chunks/fecha@4.2.3"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/fecha@4.2.3/node_modules/fecha/lib/fecha.js":
/*!*************************************************************************!*\
  !*** ../node_modules/.pnpm/fecha@4.2.3/node_modules/fecha/lib/fecha.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultI18n: () => (/* binding */ defaultI18n),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   setGlobalDateI18n: () => (/* binding */ setGlobalDateI18n),\n/* harmony export */   setGlobalDateMasks: () => (/* binding */ setGlobalDateMasks)\n/* harmony export */ });\nvar token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\nvar twoDigitsOptional = \"\\\\d\\\\d?\";\nvar twoDigits = \"\\\\d\\\\d\";\nvar threeDigits = \"\\\\d{3}\";\nvar fourDigits = \"\\\\d{4}\";\nvar word = \"[^\\\\s]+\";\nvar literal = /\\[([^]*?)\\]/gm;\nfunction shorten(arr, sLen) {\n    var newArr = [];\n    for(var i = 0, len = arr.length; i < len; i++){\n        newArr.push(arr[i].substr(0, sLen));\n    }\n    return newArr;\n}\nvar monthUpdate = function(arrName) {\n    return function(v, i18n) {\n        var lowerCaseArr = i18n[arrName].map(function(v) {\n            return v.toLowerCase();\n        });\n        var index = lowerCaseArr.indexOf(v.toLowerCase());\n        if (index > -1) {\n            return index;\n        }\n        return null;\n    };\n};\nfunction assign(origObj) {\n    var args = [];\n    for(var _i = 1; _i < arguments.length; _i++){\n        args[_i - 1] = arguments[_i];\n    }\n    for(var _a = 0, args_1 = args; _a < args_1.length; _a++){\n        var obj = args_1[_a];\n        for(var key in obj){\n            // @ts-ignore ex\n            origObj[key] = obj[key];\n        }\n    }\n    return origObj;\n}\nvar dayNames = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n];\nvar monthNames = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n];\nvar monthNamesShort = shorten(monthNames, 3);\nvar dayNamesShort = shorten(dayNames, 3);\nvar defaultI18n = {\n    dayNamesShort: dayNamesShort,\n    dayNames: dayNames,\n    monthNamesShort: monthNamesShort,\n    monthNames: monthNames,\n    amPm: [\n        \"am\",\n        \"pm\"\n    ],\n    DoFn: function(dayOfMonth) {\n        return dayOfMonth + [\n            \"th\",\n            \"st\",\n            \"nd\",\n            \"rd\"\n        ][dayOfMonth % 10 > 3 ? 0 : (dayOfMonth - dayOfMonth % 10 !== 10 ? 1 : 0) * dayOfMonth % 10];\n    }\n};\nvar globalI18n = assign({}, defaultI18n);\nvar setGlobalDateI18n = function(i18n) {\n    return globalI18n = assign(globalI18n, i18n);\n};\nvar regexEscape = function(str) {\n    return str.replace(/[|\\\\{()[^$+*?.-]/g, \"\\\\$&\");\n};\nvar pad = function(val, len) {\n    if (len === void 0) {\n        len = 2;\n    }\n    val = String(val);\n    while(val.length < len){\n        val = \"0\" + val;\n    }\n    return val;\n};\nvar formatFlags = {\n    D: function(dateObj) {\n        return String(dateObj.getDate());\n    },\n    DD: function(dateObj) {\n        return pad(dateObj.getDate());\n    },\n    Do: function(dateObj, i18n) {\n        return i18n.DoFn(dateObj.getDate());\n    },\n    d: function(dateObj) {\n        return String(dateObj.getDay());\n    },\n    dd: function(dateObj) {\n        return pad(dateObj.getDay());\n    },\n    ddd: function(dateObj, i18n) {\n        return i18n.dayNamesShort[dateObj.getDay()];\n    },\n    dddd: function(dateObj, i18n) {\n        return i18n.dayNames[dateObj.getDay()];\n    },\n    M: function(dateObj) {\n        return String(dateObj.getMonth() + 1);\n    },\n    MM: function(dateObj) {\n        return pad(dateObj.getMonth() + 1);\n    },\n    MMM: function(dateObj, i18n) {\n        return i18n.monthNamesShort[dateObj.getMonth()];\n    },\n    MMMM: function(dateObj, i18n) {\n        return i18n.monthNames[dateObj.getMonth()];\n    },\n    YY: function(dateObj) {\n        return pad(String(dateObj.getFullYear()), 4).substr(2);\n    },\n    YYYY: function(dateObj) {\n        return pad(dateObj.getFullYear(), 4);\n    },\n    h: function(dateObj) {\n        return String(dateObj.getHours() % 12 || 12);\n    },\n    hh: function(dateObj) {\n        return pad(dateObj.getHours() % 12 || 12);\n    },\n    H: function(dateObj) {\n        return String(dateObj.getHours());\n    },\n    HH: function(dateObj) {\n        return pad(dateObj.getHours());\n    },\n    m: function(dateObj) {\n        return String(dateObj.getMinutes());\n    },\n    mm: function(dateObj) {\n        return pad(dateObj.getMinutes());\n    },\n    s: function(dateObj) {\n        return String(dateObj.getSeconds());\n    },\n    ss: function(dateObj) {\n        return pad(dateObj.getSeconds());\n    },\n    S: function(dateObj) {\n        return String(Math.round(dateObj.getMilliseconds() / 100));\n    },\n    SS: function(dateObj) {\n        return pad(Math.round(dateObj.getMilliseconds() / 10), 2);\n    },\n    SSS: function(dateObj) {\n        return pad(dateObj.getMilliseconds(), 3);\n    },\n    a: function(dateObj, i18n) {\n        return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];\n    },\n    A: function(dateObj, i18n) {\n        return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();\n    },\n    ZZ: function(dateObj) {\n        var offset = dateObj.getTimezoneOffset();\n        return (offset > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(offset) / 60) * 100 + Math.abs(offset) % 60, 4);\n    },\n    Z: function(dateObj) {\n        var offset = dateObj.getTimezoneOffset();\n        return (offset > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(offset) / 60), 2) + \":\" + pad(Math.abs(offset) % 60, 2);\n    }\n};\nvar monthParse = function(v) {\n    return +v - 1;\n};\nvar emptyDigits = [\n    null,\n    twoDigitsOptional\n];\nvar emptyWord = [\n    null,\n    word\n];\nvar amPm = [\n    \"isPm\",\n    word,\n    function(v, i18n) {\n        var val = v.toLowerCase();\n        if (val === i18n.amPm[0]) {\n            return 0;\n        } else if (val === i18n.amPm[1]) {\n            return 1;\n        }\n        return null;\n    }\n];\nvar timezoneOffset = [\n    \"timezoneOffset\",\n    \"[^\\\\s]*?[\\\\+\\\\-]\\\\d\\\\d:?\\\\d\\\\d|[^\\\\s]*?Z?\",\n    function(v) {\n        var parts = (v + \"\").match(/([+-]|\\d\\d)/gi);\n        if (parts) {\n            var minutes = +parts[1] * 60 + parseInt(parts[2], 10);\n            return parts[0] === \"+\" ? minutes : -minutes;\n        }\n        return 0;\n    }\n];\nvar parseFlags = {\n    D: [\n        \"day\",\n        twoDigitsOptional\n    ],\n    DD: [\n        \"day\",\n        twoDigits\n    ],\n    Do: [\n        \"day\",\n        twoDigitsOptional + word,\n        function(v) {\n            return parseInt(v, 10);\n        }\n    ],\n    M: [\n        \"month\",\n        twoDigitsOptional,\n        monthParse\n    ],\n    MM: [\n        \"month\",\n        twoDigits,\n        monthParse\n    ],\n    YY: [\n        \"year\",\n        twoDigits,\n        function(v) {\n            var now = new Date();\n            var cent = +(\"\" + now.getFullYear()).substr(0, 2);\n            return +(\"\" + (+v > 68 ? cent - 1 : cent) + v);\n        }\n    ],\n    h: [\n        \"hour\",\n        twoDigitsOptional,\n        undefined,\n        \"isPm\"\n    ],\n    hh: [\n        \"hour\",\n        twoDigits,\n        undefined,\n        \"isPm\"\n    ],\n    H: [\n        \"hour\",\n        twoDigitsOptional\n    ],\n    HH: [\n        \"hour\",\n        twoDigits\n    ],\n    m: [\n        \"minute\",\n        twoDigitsOptional\n    ],\n    mm: [\n        \"minute\",\n        twoDigits\n    ],\n    s: [\n        \"second\",\n        twoDigitsOptional\n    ],\n    ss: [\n        \"second\",\n        twoDigits\n    ],\n    YYYY: [\n        \"year\",\n        fourDigits\n    ],\n    S: [\n        \"millisecond\",\n        \"\\\\d\",\n        function(v) {\n            return +v * 100;\n        }\n    ],\n    SS: [\n        \"millisecond\",\n        twoDigits,\n        function(v) {\n            return +v * 10;\n        }\n    ],\n    SSS: [\n        \"millisecond\",\n        threeDigits\n    ],\n    d: emptyDigits,\n    dd: emptyDigits,\n    ddd: emptyWord,\n    dddd: emptyWord,\n    MMM: [\n        \"month\",\n        word,\n        monthUpdate(\"monthNamesShort\")\n    ],\n    MMMM: [\n        \"month\",\n        word,\n        monthUpdate(\"monthNames\")\n    ],\n    a: amPm,\n    A: amPm,\n    ZZ: timezoneOffset,\n    Z: timezoneOffset\n};\n// Some common format strings\nvar globalMasks = {\n    default: \"ddd MMM DD YYYY HH:mm:ss\",\n    shortDate: \"M/D/YY\",\n    mediumDate: \"MMM D, YYYY\",\n    longDate: \"MMMM D, YYYY\",\n    fullDate: \"dddd, MMMM D, YYYY\",\n    isoDate: \"YYYY-MM-DD\",\n    isoDateTime: \"YYYY-MM-DDTHH:mm:ssZ\",\n    shortTime: \"HH:mm\",\n    mediumTime: \"HH:mm:ss\",\n    longTime: \"HH:mm:ss.SSS\"\n};\nvar setGlobalDateMasks = function(masks) {\n    return assign(globalMasks, masks);\n};\n/***\n * Format a date\n * @method format\n * @param {Date|number} dateObj\n * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'\n * @returns {string} Formatted date string\n */ var format = function(dateObj, mask, i18n) {\n    if (mask === void 0) {\n        mask = globalMasks[\"default\"];\n    }\n    if (i18n === void 0) {\n        i18n = {};\n    }\n    if (typeof dateObj === \"number\") {\n        dateObj = new Date(dateObj);\n    }\n    if (Object.prototype.toString.call(dateObj) !== \"[object Date]\" || isNaN(dateObj.getTime())) {\n        throw new Error(\"Invalid Date pass to format\");\n    }\n    mask = globalMasks[mask] || mask;\n    var literals = [];\n    // Make literals inactive by replacing them with @@@\n    mask = mask.replace(literal, function($0, $1) {\n        literals.push($1);\n        return \"@@@\";\n    });\n    var combinedI18nSettings = assign(assign({}, globalI18n), i18n);\n    // Apply formatting rules\n    mask = mask.replace(token, function($0) {\n        return formatFlags[$0](dateObj, combinedI18nSettings);\n    });\n    // Inline literal values back into the formatted value\n    return mask.replace(/@@@/g, function() {\n        return literals.shift();\n    });\n};\n/**\n * Parse a date string into a Javascript Date object /\n * @method parse\n * @param {string} dateStr Date string\n * @param {string} format Date parse format\n * @param {i18n} I18nSettingsOptional Full or subset of I18N settings\n * @returns {Date|null} Returns Date object. Returns null what date string is invalid or doesn't match format\n */ function parse(dateStr, format, i18n) {\n    if (i18n === void 0) {\n        i18n = {};\n    }\n    if (typeof format !== \"string\") {\n        throw new Error(\"Invalid format in fecha parse\");\n    }\n    // Check to see if the format is actually a mask\n    format = globalMasks[format] || format;\n    // Avoid regular expression denial of service, fail early for really long strings\n    // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n    if (dateStr.length > 1000) {\n        return null;\n    }\n    // Default to the beginning of the year.\n    var today = new Date();\n    var dateInfo = {\n        year: today.getFullYear(),\n        month: 0,\n        day: 1,\n        hour: 0,\n        minute: 0,\n        second: 0,\n        millisecond: 0,\n        isPm: null,\n        timezoneOffset: null\n    };\n    var parseInfo = [];\n    var literals = [];\n    // Replace all the literals with @@@. Hopefully a string that won't exist in the format\n    var newFormat = format.replace(literal, function($0, $1) {\n        literals.push(regexEscape($1));\n        return \"@@@\";\n    });\n    var specifiedFields = {};\n    var requiredFields = {};\n    // Change every token that we find into the correct regex\n    newFormat = regexEscape(newFormat).replace(token, function($0) {\n        var info = parseFlags[$0];\n        var field = info[0], regex = info[1], requiredField = info[3];\n        // Check if the person has specified the same field twice. This will lead to confusing results.\n        if (specifiedFields[field]) {\n            throw new Error(\"Invalid format. \" + field + \" specified twice in format\");\n        }\n        specifiedFields[field] = true;\n        // Check if there are any required fields. For instance, 12 hour time requires AM/PM specified\n        if (requiredField) {\n            requiredFields[requiredField] = true;\n        }\n        parseInfo.push(info);\n        return \"(\" + regex + \")\";\n    });\n    // Check all the required fields are present\n    Object.keys(requiredFields).forEach(function(field) {\n        if (!specifiedFields[field]) {\n            throw new Error(\"Invalid format. \" + field + \" is required in specified format\");\n        }\n    });\n    // Add back all the literals after\n    newFormat = newFormat.replace(/@@@/g, function() {\n        return literals.shift();\n    });\n    // Check if the date string matches the format. If it doesn't return null\n    var matches = dateStr.match(new RegExp(newFormat, \"i\"));\n    if (!matches) {\n        return null;\n    }\n    var combinedI18nSettings = assign(assign({}, globalI18n), i18n);\n    // For each match, call the parser function for that date part\n    for(var i = 1; i < matches.length; i++){\n        var _a = parseInfo[i - 1], field = _a[0], parser = _a[2];\n        var value = parser ? parser(matches[i], combinedI18nSettings) : +matches[i];\n        // If the parser can't make sense of the value, return null\n        if (value == null) {\n            return null;\n        }\n        dateInfo[field] = value;\n    }\n    if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {\n        dateInfo.hour = +dateInfo.hour + 12;\n    } else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {\n        dateInfo.hour = 0;\n    }\n    var dateTZ;\n    if (dateInfo.timezoneOffset == null) {\n        dateTZ = new Date(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute, dateInfo.second, dateInfo.millisecond);\n        var validateFields = [\n            [\n                \"month\",\n                \"getMonth\"\n            ],\n            [\n                \"day\",\n                \"getDate\"\n            ],\n            [\n                \"hour\",\n                \"getHours\"\n            ],\n            [\n                \"minute\",\n                \"getMinutes\"\n            ],\n            [\n                \"second\",\n                \"getSeconds\"\n            ]\n        ];\n        for(var i = 0, len = validateFields.length; i < len; i++){\n            // Check to make sure the date field is within the allowed range. Javascript dates allows values\n            // outside the allowed range. If the values don't match the value was invalid\n            if (specifiedFields[validateFields[i][0]] && dateInfo[validateFields[i][0]] !== dateTZ[validateFields[i][1]]()) {\n                return null;\n            }\n        }\n    } else {\n        dateTZ = new Date(Date.UTC(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute - dateInfo.timezoneOffset, dateInfo.second, dateInfo.millisecond));\n        // We can't validate dates in another timezone unfortunately. Do a basic check instead\n        if (dateInfo.month > 11 || dateInfo.month < 0 || dateInfo.day > 31 || dateInfo.day < 1 || dateInfo.hour > 23 || dateInfo.hour < 0 || dateInfo.minute > 59 || dateInfo.minute < 0 || dateInfo.second > 59 || dateInfo.second < 0) {\n            return null;\n        }\n    }\n    // Don't allow invalid dates\n    return dateTZ;\n}\nvar fecha = {\n    format: format,\n    parse: parse,\n    defaultI18n: defaultI18n,\n    setGlobalDateI18n: setGlobalDateI18n,\n    setGlobalDateMasks: setGlobalDateMasks\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (fecha);\n //# sourceMappingURL=fecha.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fecha@4.2.3/node_modules/fecha/lib/fecha.js\n");

/***/ })

};
;