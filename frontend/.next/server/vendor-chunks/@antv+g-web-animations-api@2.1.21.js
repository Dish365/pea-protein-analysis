"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@antv+g-web-animations-api@2.1.21";
exports.ids = ["vendor-chunks/@antv+g-web-animations-api@2.1.21"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@antv+g-web-animations-api@2.1.21/node_modules/@antv/g-web-animations-api/dist/index.esm.js":
/*!*************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@antv+g-web-animations-api@2.1.21/node_modules/@antv/g-web-animations-api/dist/index.esm.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Animation: () => (/* binding */ Animation),\n/* harmony export */   AnimationEvent: () => (/* binding */ AnimationEvent),\n/* harmony export */   AnimationTimeline: () => (/* binding */ AnimationTimeline),\n/* harmony export */   EasingFunctions: () => (/* binding */ EasingFunctions),\n/* harmony export */   KeyframeEffect: () => (/* binding */ KeyframeEffect),\n/* harmony export */   compareAnimations: () => (/* binding */ compareAnimations),\n/* harmony export */   makeTiming: () => (/* binding */ makeTiming),\n/* harmony export */   normalizeKeyframes: () => (/* binding */ normalizeKeyframes),\n/* harmony export */   normalizeTimingInput: () => (/* binding */ normalizeTimingInput),\n/* harmony export */   numericTimingToObject: () => (/* binding */ numericTimingToObject)\n/* harmony export */ });\n/* harmony import */ var _antv_g_lite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @antv/g-lite */ \"(ssr)/../node_modules/.pnpm/@antv+g-lite@2.2.16/node_modules/@antv/g-lite/dist/index.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/callSuper */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/callSuper.js\");\n/* harmony import */ var _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"(ssr)/../node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/slicedToArray.js\");\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/clamp.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/is-number.js\");\n/* harmony import */ var _antv_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @antv/util */ \"(ssr)/../node_modules/.pnpm/@antv+util@3.3.10/node_modules/@antv/util/esm/lodash/is-nil.js\");\n/*!\n * @antv/g-web-animations-api\n * @description A simple implementation of Web Animations API.\n * @version 2.1.21\n * @date 1/23/2025, 8:33:55 AM\n * @author AntVis\n * @docs https://g.antv.antgroup.com/\n */ \n\n\n\n\n\n\n\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationPlaybackEvent\n */ // @ts-ignore\nvar AnimationEvent = /*#__PURE__*/ function(_FederatedEvent) {\n    function AnimationEvent(manager, target, currentTime, timelineTime) {\n        var _this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, AnimationEvent);\n        _this = _babel_runtime_helpers_callSuper__WEBPACK_IMPORTED_MODULE_3___default()(this, AnimationEvent, [\n            manager\n        ]);\n        // @ts-ignore\n        _this.currentTime = currentTime;\n        _this.timelineTime = timelineTime;\n        _this.target = target;\n        _this.type = \"finish\";\n        _this.bubbles = false;\n        // @ts-ignore\n        _this.currentTarget = target;\n        _this.defaultPrevented = false;\n        _this.eventPhase = _this.AT_TARGET;\n        _this.timeStamp = Date.now();\n        _this.currentTime = currentTime;\n        _this.timelineTime = timelineTime;\n        return _this;\n    }\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(AnimationEvent, _FederatedEvent);\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(AnimationEvent);\n}(_antv_g_lite__WEBPACK_IMPORTED_MODULE_0__.FederatedEvent);\nvar sequenceNumber = 0;\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Animation/Animation\n */ var Animation = /*#__PURE__*/ function() {\n    function Animation(effect, timeline) {\n        var _this$effect;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Animation);\n        this.currentTimePending = false;\n        /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Animation/playState\n     */ // playState: AnimationPlayState;\n        this._idle = true;\n        this._paused = false;\n        this._finishedFlag = true;\n        /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Animation/currentTime\n     */ this._currentTime = 0;\n        this._playbackRate = 1;\n        this._inTimeline = true;\n        this.effect = effect;\n        effect.animation = this;\n        this.timeline = timeline;\n        this.id = \"\".concat(sequenceNumber++);\n        this._inEffect = !!this.effect.update(0);\n        this._totalDuration = Number((_this$effect = this.effect) === null || _this$effect === void 0 ? void 0 : _this$effect.getComputedTiming().endTime);\n        this._holdTime = 0;\n        this._paused = false;\n        this.oldPlayState = \"idle\";\n        this.updatePromises();\n    }\n    /**\n   * state machine,\n   * resolve/reject ready/finished Promise according to current state\n   */ return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Animation, [\n        {\n            key: \"pending\",\n            get: /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Animation/effect\n     */ /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Animation/timeline\n     */ /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Animation/id\n     */ // animation: InternalAnimation | null;\n            /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Animation/pending\n     */ function get() {\n                return this._startTime === null && !this._paused && this.playbackRate !== 0 || this.currentTimePending;\n            }\n        },\n        {\n            key: \"playState\",\n            get: function get() {\n                if (this._idle) return \"idle\";\n                if (this._isFinished) return \"finished\";\n                if (this._paused) return \"paused\";\n                return \"running\";\n            }\n        },\n        {\n            key: \"ready\",\n            get: /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Animation/ready\n     * @example\n      animation.pause();\n      animation.ready.then(function() {\n        // Displays 'running'\n        alert(animation.playState);\n      });\n      animation.play();\n     */ function get() {\n                var _this = this;\n                if (!this.readyPromise) {\n                    if (this.timeline.animationsWithPromises.indexOf(this) === -1) {\n                        this.timeline.animationsWithPromises.push(this);\n                    }\n                    this.readyPromise = new Promise(function(resolve, reject) {\n                        _this.resolveReadyPromise = function() {\n                            resolve(_this);\n                        };\n                        _this.rejectReadyPromise = function() {\n                            reject(new Error());\n                        };\n                    });\n                    if (!this.pending) {\n                        this.resolveReadyPromise();\n                    }\n                }\n                return this.readyPromise;\n            }\n        },\n        {\n            key: \"finished\",\n            get: function get() {\n                var _this2 = this;\n                if (!this.finishedPromise) {\n                    if (this.timeline.animationsWithPromises.indexOf(this) === -1) {\n                        this.timeline.animationsWithPromises.push(this);\n                    }\n                    this.finishedPromise = new Promise(function(resolve, reject) {\n                        _this2.resolveFinishedPromise = function() {\n                            resolve(_this2);\n                        };\n                        _this2.rejectFinishedPromise = function() {\n                            reject(new Error());\n                        };\n                    });\n                    if (this.playState === \"finished\") {\n                        this.resolveFinishedPromise();\n                    }\n                }\n                return this.finishedPromise;\n            }\n        },\n        {\n            key: \"currentTime\",\n            get: function get() {\n                this.updatePromises();\n                return this._idle || this.currentTimePending ? null : this._currentTime;\n            },\n            set: function set(newTime) {\n                newTime = Number(newTime);\n                if (isNaN(newTime)) return;\n                this.timeline.restart();\n                if (!this._paused && this._startTime !== null) {\n                    var _this$timeline;\n                    this._startTime = Number((_this$timeline = this.timeline) === null || _this$timeline === void 0 ? void 0 : _this$timeline.currentTime) - newTime / this.playbackRate;\n                }\n                this.currentTimePending = false;\n                if (this._currentTime === newTime) {\n                    return;\n                }\n                if (this._idle) {\n                    this._idle = false;\n                    this._paused = true;\n                }\n                this.tickCurrentTime(newTime, true);\n                this.timeline.applyDirtiedAnimation(this);\n            }\n        },\n        {\n            key: \"startTime\",\n            get: function get() {\n                return this._startTime;\n            },\n            set: function set(newTime) {\n                if (newTime !== null) {\n                    this.updatePromises();\n                    newTime = Number(newTime);\n                    if (isNaN(newTime)) return;\n                    if (this._paused || this._idle) return;\n                    this._startTime = newTime;\n                    this.tickCurrentTime((Number(this.timeline.currentTime) - this._startTime) * this.playbackRate);\n                    this.timeline.applyDirtiedAnimation(this);\n                    this.updatePromises();\n                }\n            }\n        },\n        {\n            key: \"playbackRate\",\n            get: function get() {\n                return this._playbackRate;\n            },\n            set: function set(value) {\n                if (value === this._playbackRate) {\n                    return;\n                }\n                this.updatePromises();\n                var oldCurrentTime = this.currentTime;\n                this._playbackRate = value;\n                this.startTime = null;\n                if (this.playState !== \"paused\" && this.playState !== \"idle\") {\n                    this._finishedFlag = false;\n                    this._idle = false;\n                    this.ensureAlive();\n                    this.timeline.applyDirtiedAnimation(this);\n                }\n                if (oldCurrentTime !== null) {\n                    this.currentTime = oldCurrentTime;\n                }\n                this.updatePromises();\n            }\n        },\n        {\n            key: \"_isFinished\",\n            get: function get() {\n                return !this._idle && (this._playbackRate > 0 && Number(this._currentTime) >= this._totalDuration || this._playbackRate < 0 && Number(this._currentTime) <= 0);\n            }\n        },\n        {\n            key: \"totalDuration\",\n            get: function get() {\n                return this._totalDuration;\n            }\n        },\n        {\n            key: \"_needsTick\",\n            get: function get() {\n                return this.pending || this.playState === \"running\" || !this._finishedFlag;\n            }\n        },\n        {\n            key: \"updatePromises\",\n            value: function updatePromises() {\n                var oldPlayState = this.oldPlayState;\n                var newPlayState = this.pending ? \"pending\" : this.playState;\n                if (this.readyPromise && newPlayState !== oldPlayState) {\n                    if (newPlayState === \"idle\") {\n                        this.rejectReadyPromise();\n                        this.readyPromise = undefined;\n                    } else if (oldPlayState === \"pending\") {\n                        this.resolveReadyPromise();\n                    } else if (newPlayState === \"pending\") {\n                        this.readyPromise = undefined;\n                    }\n                }\n                if (this.finishedPromise && newPlayState !== oldPlayState) {\n                    if (newPlayState === \"idle\") {\n                        this.rejectFinishedPromise();\n                        this.finishedPromise = undefined;\n                    } else if (newPlayState === \"finished\") {\n                        this.resolveFinishedPromise();\n                    } else if (oldPlayState === \"finished\") {\n                        this.finishedPromise = undefined;\n                    }\n                }\n                this.oldPlayState = newPlayState;\n                return this.readyPromise || this.finishedPromise;\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.updatePromises();\n                this._paused = false;\n                if (this._isFinished || this._idle) {\n                    this.rewind();\n                    this._startTime = null;\n                }\n                this._finishedFlag = false;\n                this._idle = false;\n                this.ensureAlive();\n                this.timeline.applyDirtiedAnimation(this);\n                if (this.timeline.animations.indexOf(this) === -1) {\n                    this.timeline.animations.push(this);\n                }\n                this.updatePromises();\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.updatePromises();\n                if (this.currentTime) {\n                    this._holdTime = this.currentTime;\n                }\n                if (!this._isFinished && !this._paused && !this._idle) {\n                    this.currentTimePending = true;\n                } else if (this._idle) {\n                    this.rewind();\n                    this._idle = false;\n                }\n                this._startTime = null;\n                this._paused = true;\n                this.updatePromises();\n            }\n        },\n        {\n            key: \"finish\",\n            value: function finish() {\n                this.updatePromises();\n                if (this._idle) return;\n                this.currentTime = this._playbackRate > 0 ? this._totalDuration : 0;\n                this._startTime = this._totalDuration - this.currentTime;\n                this.currentTimePending = false;\n                this.timeline.applyDirtiedAnimation(this);\n                this.updatePromises();\n            }\n        },\n        {\n            key: \"cancel\",\n            value: function cancel() {\n                var _this3 = this;\n                this.updatePromises();\n                if (!this._inEffect) return;\n                this._inEffect = false;\n                this._idle = true;\n                this._paused = false;\n                this._finishedFlag = true;\n                this._currentTime = 0;\n                this._startTime = null;\n                this.effect.update(null);\n                // effects are invalid after cancellation as the animation state\n                // needs to un-apply.\n                this.timeline.applyDirtiedAnimation(this);\n                this.updatePromises();\n                /**\n       * 1. Reject the current finished promise with a DOMException named \"AbortError\".\n       * 2. Let current finished promise be a new promise\n       * @see https://w3c.github.io/csswg-drafts/web-animations-1/#canceling-an-animation-section\n       */ // if (this.finishedPromise) {\n                //   this.rejectFinishedPromise();\n                //   this.finishedPromise = undefined;\n                // }\n                if (this.oncancel) {\n                    var event = new AnimationEvent(null, this, this.currentTime, null);\n                    setTimeout(function() {\n                        _this3.oncancel(event);\n                    });\n                }\n            }\n        },\n        {\n            key: \"reverse\",\n            value: function reverse() {\n                this.updatePromises();\n                var oldCurrentTime = this.currentTime;\n                this.playbackRate *= -1;\n                this.play();\n                if (oldCurrentTime !== null) {\n                    this.currentTime = oldCurrentTime;\n                }\n                this.updatePromises();\n            }\n        },\n        {\n            key: \"updatePlaybackRate\",\n            value: function updatePlaybackRate(playbackRate) {\n                this.playbackRate = playbackRate;\n            }\n        },\n        {\n            key: \"targetAnimations\",\n            value: function targetAnimations() {\n                var _this$effect2;\n                var target = (_this$effect2 = this.effect) === null || _this$effect2 === void 0 ? void 0 : _this$effect2.target;\n                return target.getAnimations();\n            }\n        },\n        {\n            key: \"markTarget\",\n            value: function markTarget() {\n                var animations = this.targetAnimations();\n                if (animations.indexOf(this) === -1) {\n                    animations.push(this);\n                }\n            }\n        },\n        {\n            key: \"unmarkTarget\",\n            value: function unmarkTarget() {\n                var animations = this.targetAnimations();\n                var index = animations.indexOf(this);\n                if (index !== -1) {\n                    animations.splice(index, 1);\n                }\n            }\n        },\n        {\n            key: \"tick\",\n            value: function tick(timelineTime, isAnimationFrame) {\n                if (!this._idle && !this._paused) {\n                    if (this._startTime === null) {\n                        if (isAnimationFrame) {\n                            this.startTime = timelineTime - this._currentTime / this.playbackRate;\n                        }\n                    } else if (!this._isFinished) {\n                        this.tickCurrentTime((timelineTime - this._startTime) * this.playbackRate);\n                    }\n                }\n                if (isAnimationFrame) {\n                    this.currentTimePending = false;\n                    this.fireEvents(timelineTime);\n                }\n            }\n        },\n        {\n            key: \"rewind\",\n            value: function rewind() {\n                if (this.playbackRate >= 0) {\n                    this.currentTime = 0;\n                } else if (this._totalDuration < Infinity) {\n                    this.currentTime = this._totalDuration;\n                } else {\n                    throw new Error(\"Unable to rewind negative playback rate animation with infinite duration\");\n                }\n            }\n        },\n        {\n            key: \"persist\",\n            value: function persist() {\n                throw new Error(_antv_g_lite__WEBPACK_IMPORTED_MODULE_0__.ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"addEventListener\",\n            value: function addEventListener(type, listener, options) {\n                throw new Error(_antv_g_lite__WEBPACK_IMPORTED_MODULE_0__.ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"removeEventListener\",\n            value: function removeEventListener(type, listener, options) {\n                throw new Error(_antv_g_lite__WEBPACK_IMPORTED_MODULE_0__.ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"dispatchEvent\",\n            value: function dispatchEvent(event) {\n                throw new Error(_antv_g_lite__WEBPACK_IMPORTED_MODULE_0__.ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"commitStyles\",\n            value: // replaceState: AnimationReplaceState;\n            function commitStyles() {\n                throw new Error(_antv_g_lite__WEBPACK_IMPORTED_MODULE_0__.ERROR_MSG_METHOD_NOT_IMPLEMENTED);\n            }\n        },\n        {\n            key: \"ensureAlive\",\n            value: function ensureAlive() {\n                // If an animation is playing backwards and is not fill backwards/both\n                // then it should go out of effect when it reaches the start of its\n                // active interval (currentTime === 0).\n                if (this.playbackRate < 0 && this.currentTime === 0) {\n                    var _this$effect3;\n                    this._inEffect = !!((_this$effect3 = this.effect) !== null && _this$effect3 !== void 0 && _this$effect3.update(-1));\n                } else {\n                    var _this$effect4;\n                    this._inEffect = !!((_this$effect4 = this.effect) !== null && _this$effect4 !== void 0 && _this$effect4.update(this.currentTime));\n                }\n                if (!this._inTimeline && (this._inEffect || !this._finishedFlag)) {\n                    this._inTimeline = true;\n                    this.timeline.animations.push(this);\n                }\n            }\n        },\n        {\n            key: \"tickCurrentTime\",\n            value: function tickCurrentTime(newTime, ignoreLimit) {\n                if (newTime !== this._currentTime) {\n                    this._currentTime = newTime;\n                    if (this._isFinished && !ignoreLimit) {\n                        this._currentTime = this._playbackRate > 0 ? this._totalDuration : 0;\n                    }\n                    this.ensureAlive();\n                }\n            }\n        },\n        {\n            key: \"fireEvents\",\n            value: function fireEvents(baseTime) {\n                var _this4 = this;\n                if (this._isFinished) {\n                    if (!this._finishedFlag) {\n                        if (this.onfinish) {\n                            var event = new AnimationEvent(null, this, this.currentTime, baseTime);\n                            setTimeout(function() {\n                                if (_this4.onfinish) {\n                                    _this4.onfinish(event);\n                                }\n                            });\n                        }\n                        this._finishedFlag = true;\n                    }\n                } else {\n                    if (this.onframe && this.playState === \"running\") {\n                        var _event = new AnimationEvent(null, this, this.currentTime, baseTime);\n                        this.onframe(_event);\n                    }\n                    this._finishedFlag = false;\n                }\n            }\n        }\n    ]);\n}();\n/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */ // These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nvar float32ArraySupported = typeof Float32Array === \"function\";\nvar A = function A(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n};\nvar B = function B(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n};\nvar C = function C(aA1) {\n    return 3.0 * aA1;\n};\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nvar calcBezier = function calcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n};\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nvar getSlope = function getSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n};\nvar binarySubdivide = function binarySubdivide(aX, aA, aB, mX1, mX2) {\n    var currentX;\n    var currentT;\n    var i = 0;\n    do {\n        currentT = aA + (aB - aA) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - aX;\n        if (currentX > 0.0) aB = currentT;\n        else aA = currentT;\n    }while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n    return currentT;\n};\nvar newtonRaphsonIterate = function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for(var i = 0; i < NEWTON_ITERATIONS; ++i){\n        var currentSlope = getSlope(aGuessT, mX1, mX2);\n        if (currentSlope === 0.0) return aGuessT;\n        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n        aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n};\nvar bezier = function bezier(mX1, mY1, mX2, mY2) {\n    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) throw new Error(\"bezier x values must be in [0, 1] range\");\n    if (mX1 === mY1 && mX2 === mY2) return function(t) {\n        return t;\n    };\n    // Precompute samples table\n    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n    for(var i = 0; i < kSplineTableSize; ++i){\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n    var getTForX = function getTForX(aX) {\n        var intervalStart = 0.0;\n        var currentSample = 1;\n        var lastSample = kSplineTableSize - 1;\n        for(; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample)intervalStart += kSampleStepSize;\n        --currentSample;\n        // Interpolate to provide an initial guess for t\n        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        var guessForT = intervalStart + dist * kSampleStepSize;\n        var initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= NEWTON_MIN_SLOPE) return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        if (initialSlope === 0.0) return guessForT;\n        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    };\n    return function(t) {\n        // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n        if (t === 0 || t === 1) return t;\n        return calcBezier(getTForX(t), mY1, mY2);\n    };\n};\nvar convertToDash = function convertToDash(str) {\n    str = str.replace(/([A-Z])/g, function(letter) {\n        return \"-\".concat(letter.toLowerCase());\n    });\n    // Remove first dash\n    return str.charAt(0) === \"-\" ? str.substring(1) : str;\n};\n/**\n  Easing Functions from anime.js, they are tried and true, so, its better to use them instead of other alternatives\n*/ var Quad = function Quad(t) {\n    return Math.pow(t, 2);\n};\nvar Cubic = function Cubic(t) {\n    return Math.pow(t, 3);\n};\nvar Quart = function Quart(t) {\n    return Math.pow(t, 4);\n};\nvar Quint = function Quint(t) {\n    return Math.pow(t, 5);\n};\nvar Expo = function Expo(t) {\n    return Math.pow(t, 6);\n};\nvar Sine = function Sine(t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n};\nvar Circ = function Circ(t) {\n    return 1 - Math.sqrt(1 - t * t);\n};\nvar Back = function Back(t) {\n    return t * t * (3 * t - 2);\n};\nvar Bounce = function Bounce(t) {\n    var pow2;\n    var b = 4;\n    while(t < ((pow2 = Math.pow(2, --b)) - 1) / 11){}\n    return 1 / Math.pow(4, 3 - b) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - t, 2);\n};\nvar Elastic = function Elastic(t) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var _params = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(params, 2), _params$ = _params[0], amplitude = _params$ === void 0 ? 1 : _params$, _params$2 = _params[1], period = _params$2 === void 0 ? 0.5 : _params$2;\n    var a = (0,_antv_util__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(Number(amplitude), 1, 10);\n    var p = (0,_antv_util__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(Number(period), 0.1, 2);\n    if (t === 0 || t === 1) return t;\n    return -a * Math.pow(2, 10 * (t - 1)) * Math.sin((t - 1 - p / (Math.PI * 2) * Math.asin(1 / a)) * (Math.PI * 2) / p);\n};\nvar Spring = function Spring(t) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var duration = arguments.length > 2 ? arguments[2] : undefined;\n    var _params2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(params, 4), _params2$ = _params2[0], mass = _params2$ === void 0 ? 1 : _params2$, _params2$2 = _params2[1], stiffness = _params2$2 === void 0 ? 100 : _params2$2, _params2$3 = _params2[2], damping = _params2$3 === void 0 ? 10 : _params2$3, _params2$4 = _params2[3], velocity = _params2$4 === void 0 ? 0 : _params2$4;\n    mass = (0,_antv_util__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(mass, 0.1, 1000);\n    stiffness = (0,_antv_util__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(stiffness, 0.1, 1000);\n    damping = (0,_antv_util__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(damping, 0.1, 1000);\n    velocity = (0,_antv_util__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(velocity, 0.1, 1000);\n    var w0 = Math.sqrt(stiffness / mass);\n    var zeta = damping / (2 * Math.sqrt(stiffness * mass));\n    var wd = zeta < 1 ? w0 * Math.sqrt(1 - zeta * zeta) : 0;\n    var a = 1;\n    var b = zeta < 1 ? (zeta * w0 + -velocity) / wd : -velocity + w0;\n    var progress = duration ? duration * t / 1000 : t;\n    if (zeta < 1) {\n        progress = Math.exp(-progress * zeta * w0) * (a * Math.cos(wd * progress) + b * Math.sin(wd * progress));\n    } else {\n        progress = (a + b * progress) * Math.exp(-progress * w0);\n    }\n    if (t === 0 || t === 1) return t;\n    return 1 - progress;\n};\n/**\n * Cache the durations at set easing parameters\n */ // export const EasingDurationCache: Map<string | TypeEasingFunction, number> = new Map();\n/**\n * The threshold for an infinite loop\n */ // const INTINITE_LOOP_LIMIT = 10000;\n/** Convert easing parameters to Array of numbers, e.g. \"spring(2, 500)\" to [2, 500] */ // export const parseEasingParameters = (str: string) => {\n//   const match = /(\\(|\\s)([^)]+)\\)?/.exec(str);\n//   return match\n//     ? match[2].split(',').map((value) => {\n//         const num = parseFloat(value);\n//         return !Number.isNaN(num) ? num : value.trim();\n//       })\n//     : [];\n// };\n/**\n * The spring easing function will only look smooth at certain durations, with certain parameters.\n * This functions returns the optimal duration to create a smooth springy animation based on physics\n *\n * Note: it can also be used to determine the optimal duration of other types of easing function, but be careful of 'in-'\n * easing functions, because of the nature of the function it can sometimes create an infinite loop, I suggest only using\n * `getEasingDuration` for `spring`, specifically 'out-spring' and 'spring'\n */ // export const getEasingDuration = (easing: string | TypeEasingFunction = 'spring') => {\n//   if (EasingDurationCache.has(easing)) return EasingDurationCache.get(easing);\n//   // eslint-disable-next-line @typescript-eslint/no-use-before-define\n//   const easingFunction = typeof easing == 'function' ? easing : getEasingFunction(easing as string);\n//   const params = typeof easing == 'function' ? [] : parseEasingParameters(easing);\n//   const frame = 1 / 6;\n//   let elapsed = 0;\n//   let rest = 0;\n//   let count = 0;\n//   while (++count < INTINITE_LOOP_LIMIT) {\n//     elapsed += frame;\n//     if (easingFunction(elapsed, params, undefined) === 1) {\n//       rest++;\n//       if (rest >= 16) break;\n//     } else {\n//       rest = 0;\n//     }\n//   }\n//   const duration = elapsed * frame * 1000;\n//   EasingDurationCache.set(easing, duration);\n//   return duration;\n// };\n/**\n  These Easing Functions are based off of the Sozi Project's easing functions\n  https://github.com/sozi-projects/Sozi/blob/d72e44ebd580dc7579d1e177406ad41e632f961d/src/js/player/Timing.js\n*/ var Steps = function Steps(t) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var _ref = params, _ref2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_ref, 2), _ref2$ = _ref2[0], steps = _ref2$ === void 0 ? 10 : _ref2$, type = _ref2[1];\n    var trunc = type === \"start\" ? Math.ceil : Math.floor;\n    return trunc((0,_antv_util__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(t, 0, 1) * steps) / steps;\n};\n// @ts-ignore\nvar Bezier = function Bezier(t) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var _params3 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(params, 4), mX1 = _params3[0], mY1 = _params3[1], mX2 = _params3[2], mY2 = _params3[3];\n    return bezier(mX1, mY1, mX2, mY2)(t);\n};\n/** The default `ease-in` easing function */ var easein = bezier(0.42, 0.0, 1.0, 1.0);\n/** Converts easing functions to their `out`counter parts */ var EaseOut = function EaseOut(ease) {\n    return function(t) {\n        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        var duration = arguments.length > 2 ? arguments[2] : undefined;\n        return 1 - ease(1 - t, params, duration);\n    };\n};\n/** Converts easing functions to their `in-out` counter parts */ var EaseInOut = function EaseInOut(ease) {\n    return function(t) {\n        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        var duration = arguments.length > 2 ? arguments[2] : undefined;\n        return t < 0.5 ? ease(t * 2, params, duration) / 2 : 1 - ease(t * -2 + 2, params, duration) / 2;\n    };\n};\n/** Converts easing functions to their `out-in` counter parts */ var EaseOutIn = function EaseOutIn(ease) {\n    return function(t) {\n        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        var duration = arguments.length > 2 ? arguments[2] : undefined;\n        return t < 0.5 ? (1 - ease(1 - t * 2, params, duration)) / 2 : (ease(t * 2 - 1, params, duration) + 1) / 2;\n    };\n};\n/**\n * The default list of easing functions, do note this is different from {@link EASING}\n */ var EasingFunctions = {\n    steps: Steps,\n    \"step-start\": function stepStart(t) {\n        return Steps(t, [\n            1,\n            \"start\"\n        ]);\n    },\n    \"step-end\": function stepEnd(t) {\n        return Steps(t, [\n            1,\n            \"end\"\n        ]);\n    },\n    linear: function linear(t) {\n        return t;\n    },\n    \"cubic-bezier\": Bezier,\n    ease: function ease(t) {\n        return Bezier(t, [\n            0.25,\n            0.1,\n            0.25,\n            1.0\n        ]);\n    },\n    \"in\": easein,\n    out: EaseOut(easein),\n    \"in-out\": EaseInOut(easein),\n    \"out-in\": EaseOutIn(easein),\n    \"in-quad\": Quad,\n    \"out-quad\": EaseOut(Quad),\n    \"in-out-quad\": EaseInOut(Quad),\n    \"out-in-quad\": EaseOutIn(Quad),\n    \"in-cubic\": Cubic,\n    \"out-cubic\": EaseOut(Cubic),\n    \"in-out-cubic\": EaseInOut(Cubic),\n    \"out-in-cubic\": EaseOutIn(Cubic),\n    \"in-quart\": Quart,\n    \"out-quart\": EaseOut(Quart),\n    \"in-out-quart\": EaseInOut(Quart),\n    \"out-in-quart\": EaseOutIn(Quart),\n    \"in-quint\": Quint,\n    \"out-quint\": EaseOut(Quint),\n    \"in-out-quint\": EaseInOut(Quint),\n    \"out-in-quint\": EaseOutIn(Quint),\n    \"in-expo\": Expo,\n    \"out-expo\": EaseOut(Expo),\n    \"in-out-expo\": EaseInOut(Expo),\n    \"out-in-expo\": EaseOutIn(Expo),\n    \"in-sine\": Sine,\n    \"out-sine\": EaseOut(Sine),\n    \"in-out-sine\": EaseInOut(Sine),\n    \"out-in-sine\": EaseOutIn(Sine),\n    \"in-circ\": Circ,\n    \"out-circ\": EaseOut(Circ),\n    \"in-out-circ\": EaseInOut(Circ),\n    \"out-in-circ\": EaseOutIn(Circ),\n    \"in-back\": Back,\n    \"out-back\": EaseOut(Back),\n    \"in-out-back\": EaseInOut(Back),\n    \"out-in-back\": EaseOutIn(Back),\n    \"in-bounce\": Bounce,\n    \"out-bounce\": EaseOut(Bounce),\n    \"in-out-bounce\": EaseInOut(Bounce),\n    \"out-in-bounce\": EaseOutIn(Bounce),\n    \"in-elastic\": Elastic,\n    \"out-elastic\": EaseOut(Elastic),\n    \"in-out-elastic\": EaseInOut(Elastic),\n    \"out-in-elastic\": EaseOutIn(Elastic),\n    spring: Spring,\n    \"spring-in\": Spring,\n    \"spring-out\": EaseOut(Spring),\n    \"spring-in-out\": EaseInOut(Spring),\n    \"spring-out-in\": EaseOutIn(Spring)\n};\n/**\n * Convert string easing to their proper form\n */ var complexEasingSyntax = function complexEasingSyntax(ease) {\n    return convertToDash(ease).replace(/^ease-/, \"\") // Remove the \"ease-\" keyword\n    .replace(/(\\(|\\s).+/, \"\") // Remove the function brackets and parameters\n    .toLowerCase().trim();\n};\n/** Re-maps a number from one range to another. Numbers outside the range are not clamped to 0 and 1, because out-of-range values are often intentional and useful. */ var getEasingFunction = function getEasingFunction(ease) {\n    return EasingFunctions[complexEasingSyntax(ease)] || EasingFunctions.linear;\n};\n// /**\n//  * Allows you to register new easing functions\n//  */\n// export const registerEasingFunction = (key: string, fn: TypeEasingFunction) => {\n//   Object.assign(EasingFunctions, {\n//     [key]: fn,\n//   });\n// };\n// /**\n//  * Allows you to register multiple new easing functions\n//  */\n// export const registerEasingFunctions = (...obj: typeof EasingFunctions[]) => {\n//   Object.assign(EasingFunctions, ...obj);\n// };\nvar linear = function linear(x) {\n    return x;\n};\nvar Start = 1;\nvar Middle = 0.5;\nvar End = 0;\nfunction step(count, pos) {\n    return function(x) {\n        if (x >= 1) {\n            return 1;\n        }\n        var stepSize = 1 / count;\n        x += pos * stepSize;\n        return x - x % stepSize;\n    };\n}\nvar numberString = \"\\\\s*(-?\\\\d+\\\\.?\\\\d*|-?\\\\.\\\\d+)\\\\s*\";\nvar cubicBezierRe = new RegExp(\"cubic-bezier\\\\(\".concat(numberString, \",\").concat(numberString, \",\").concat(numberString, \",\").concat(numberString, \"\\\\)\"));\nvar step1Re = /steps\\(\\s*(\\d+)\\s*\\)/;\nvar step2Re = /steps\\(\\s*(\\d+)\\s*,\\s*(start|middle|end)\\s*\\)/;\nfunction parseEasingFunction(normalizedEasing) {\n    var cubicData = cubicBezierRe.exec(normalizedEasing);\n    if (cubicData) {\n        // @ts-ignore\n        return bezier.apply(void 0, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_5___default()(cubicData.slice(1).map(Number)));\n    }\n    var step1Data = step1Re.exec(normalizedEasing);\n    if (step1Data) {\n        return step(Number(step1Data[1]), End);\n    }\n    var step2Data = step2Re.exec(normalizedEasing);\n    if (step2Data) {\n        // @ts-ignore\n        return step(Number(step2Data[1]), {\n            start: Start,\n            middle: Middle,\n            end: End\n        }[step2Data[2]]);\n    }\n    return getEasingFunction(normalizedEasing);\n}\nfunction calculateActiveDuration(timing) {\n    // @ts-ignore\n    return Math.abs(repeatedDuration(timing) / (timing.playbackRate || 1));\n}\nfunction repeatedDuration(timing) {\n    var _timing$iterations;\n    // https://drafts.csswg.org/web-animations/#calculating-the-active-duration\n    if (timing.duration === 0 || timing.iterations === 0) {\n        return 0;\n    }\n    // @see https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/duration#value\n    // if (timing.duration === 'auto') {\n    //   timing.duration = 0;\n    // }\n    return (timing.duration === \"auto\" ? 0 : Number(timing.duration)) * ((_timing$iterations = timing.iterations) !== null && _timing$iterations !== void 0 ? _timing$iterations : 1);\n}\nvar PhaseNone = 0;\nvar PhaseBefore = 1;\nvar PhaseAfter = 2;\nvar PhaseActive = 3;\nfunction calculatePhase(activeDuration, localTime, timing) {\n    // https://drafts.csswg.org/web-animations/#animation-effect-phases-and-states\n    if (localTime === null) {\n        return PhaseNone;\n    }\n    var endTime = timing.endTime;\n    if (localTime < Math.min(timing.delay, endTime)) {\n        return PhaseBefore;\n    }\n    if (localTime >= Math.min(timing.delay + activeDuration + timing.endDelay, endTime)) {\n        return PhaseAfter;\n    }\n    return PhaseActive;\n}\nfunction calculateActiveTime(activeDuration, fillMode, localTime, phase, delay) {\n    // https://drafts.csswg.org/web-animations/#calculating-the-active-time\n    switch(phase){\n        case PhaseBefore:\n            if (fillMode === \"backwards\" || fillMode === \"both\") return 0;\n            return null;\n        case PhaseActive:\n            return localTime - delay;\n        case PhaseAfter:\n            if (fillMode === \"forwards\" || fillMode === \"both\") return activeDuration;\n            return null;\n        case PhaseNone:\n            return null;\n    }\n}\nfunction calculateOverallProgress(iterationDuration, phase, iterations, activeTime, iterationStart) {\n    // https://drafts.csswg.org/web-animations/#calculating-the-overall-progress\n    var overallProgress = iterationStart;\n    if (iterationDuration === 0) {\n        if (phase !== PhaseBefore) {\n            overallProgress += iterations;\n        }\n    } else {\n        overallProgress += activeTime / iterationDuration;\n    }\n    return overallProgress;\n}\nfunction calculateSimpleIterationProgress(overallProgress, iterationStart, phase, iterations, activeTime, iterationDuration) {\n    // https://drafts.csswg.org/web-animations/#calculating-the-simple-iteration-progress\n    var simpleIterationProgress = overallProgress === Infinity ? iterationStart % 1 : overallProgress % 1;\n    if (simpleIterationProgress === 0 && phase === PhaseAfter && iterations !== 0 && (activeTime !== 0 || iterationDuration === 0)) {\n        simpleIterationProgress = 1;\n    }\n    return simpleIterationProgress;\n}\nfunction calculateCurrentIteration(phase, iterations, simpleIterationProgress, overallProgress) {\n    // https://drafts.csswg.org/web-animations/#calculating-the-current-iteration\n    if (phase === PhaseAfter && iterations === Infinity) {\n        return Infinity;\n    }\n    if (simpleIterationProgress === 1) {\n        return Math.floor(overallProgress) - 1;\n    }\n    return Math.floor(overallProgress);\n}\nfunction calculateDirectedProgress(playbackDirection, currentIteration, simpleIterationProgress) {\n    // https://drafts.csswg.org/web-animations/#calculating-the-directed-progress\n    var currentDirection = playbackDirection;\n    if (playbackDirection !== \"normal\" && playbackDirection !== \"reverse\") {\n        var d = currentIteration;\n        if (playbackDirection === \"alternate-reverse\") {\n            d += 1;\n        }\n        currentDirection = \"normal\";\n        if (d !== Infinity && d % 2 !== 0) {\n            currentDirection = \"reverse\";\n        }\n    }\n    if (currentDirection === \"normal\") {\n        return simpleIterationProgress;\n    }\n    return 1 - simpleIterationProgress;\n}\nfunction calculateIterationProgress(activeDuration, localTime, timing) {\n    var phase = calculatePhase(activeDuration, localTime, timing);\n    var activeTime = calculateActiveTime(activeDuration, timing.fill, localTime, phase, timing.delay);\n    if (activeTime === null) return null;\n    var duration = timing.duration === \"auto\" ? 0 : timing.duration;\n    var overallProgress = calculateOverallProgress(duration, phase, timing.iterations, activeTime, timing.iterationStart);\n    var simpleIterationProgress = calculateSimpleIterationProgress(overallProgress, timing.iterationStart, phase, timing.iterations, activeTime, duration);\n    var currentIteration = calculateCurrentIteration(phase, timing.iterations, simpleIterationProgress, overallProgress);\n    var directedProgress = calculateDirectedProgress(timing.direction, currentIteration, simpleIterationProgress);\n    timing.currentIteration = currentIteration;\n    timing.progress = directedProgress;\n    // https://drafts.csswg.org/web-animations/#calculating-the-transformed-progress\n    // https://drafts.csswg.org/web-animations/#calculating-the-iteration-progress\n    return timing.easingFunction(directedProgress);\n}\nfunction convertEffectInput(keyframes, timing, target) {\n    var propertySpecificKeyframeGroups = makePropertySpecificKeyframeGroups(keyframes, timing);\n    var interpolations = makeInterpolations(propertySpecificKeyframeGroups, target);\n    return function(target, fraction) {\n        if (fraction !== null) {\n            interpolations.filter(function(interpolation) {\n                return fraction >= interpolation.applyFrom && fraction < interpolation.applyTo;\n            }).forEach(function(interpolation) {\n                var offsetFraction = fraction - interpolation.startOffset;\n                var localDuration = interpolation.endOffset - interpolation.startOffset;\n                var scaledLocalTime = localDuration === 0 ? 0 : offsetFraction / localDuration;\n                // apply updated attribute\n                target.setAttribute(interpolation.property, interpolation.interpolation(scaledLocalTime), false, false // disable memoize\n                );\n            // if (interpolation.property === 'visibility') {\n            //   console.log(\n            //     scaledLocalTime,\n            //     interpolation.interpolation(scaledLocalTime),\n            //   );\n            // }\n            });\n        } else {\n            for(var property in propertySpecificKeyframeGroups)if (isNotReservedWord(property)) {\n                // clear attribute\n                target.setAttribute(property, null);\n            }\n        }\n    };\n}\nfunction isNotReservedWord(member) {\n    return member !== \"offset\" && member !== \"easing\" && member !== \"composite\" && member !== \"computedOffset\";\n}\nfunction makePropertySpecificKeyframeGroups(keyframes, timing) {\n    var propertySpecificKeyframeGroups = {};\n    for(var i = 0; i < keyframes.length; i++){\n        for(var member in keyframes[i]){\n            if (isNotReservedWord(member)) {\n                var propertySpecificKeyframe = {\n                    offset: keyframes[i].offset,\n                    computedOffset: keyframes[i].computedOffset,\n                    easing: keyframes[i].easing,\n                    easingFunction: parseEasingFunction(keyframes[i].easing) || timing.easingFunction,\n                    value: keyframes[i][member]\n                };\n                propertySpecificKeyframeGroups[member] = propertySpecificKeyframeGroups[member] || [];\n                propertySpecificKeyframeGroups[member].push(propertySpecificKeyframe);\n            }\n        }\n    }\n    return propertySpecificKeyframeGroups;\n}\nfunction makeInterpolations(propertySpecificKeyframeGroups, target) {\n    var interpolations = [];\n    for(var groupName in propertySpecificKeyframeGroups){\n        var keyframes = propertySpecificKeyframeGroups[groupName];\n        for(var i = 0; i < keyframes.length - 1; i++){\n            var startIndex = i;\n            var endIndex = i + 1;\n            var startOffset = keyframes[startIndex].computedOffset;\n            var endOffset = keyframes[endIndex].computedOffset;\n            var applyFrom = startOffset;\n            var applyTo = endOffset;\n            if (i === 0) {\n                applyFrom = -Infinity;\n                if (endOffset === 0) {\n                    endIndex = startIndex;\n                }\n            }\n            if (i === keyframes.length - 2) {\n                applyTo = Infinity;\n                if (startOffset === 1) {\n                    startIndex = endIndex;\n                }\n            }\n            interpolations.push({\n                applyFrom: applyFrom,\n                applyTo: applyTo,\n                startOffset: keyframes[startIndex].computedOffset,\n                endOffset: keyframes[endIndex].computedOffset,\n                easingFunction: keyframes[startIndex].easingFunction,\n                property: groupName,\n                interpolation: propertyInterpolation(groupName, keyframes[startIndex].value, keyframes[endIndex].value, target)\n            });\n        }\n    }\n    interpolations.sort(function(leftInterpolation, rightInterpolation) {\n        return leftInterpolation.startOffset - rightInterpolation.startOffset;\n    });\n    return interpolations;\n}\nvar InterpolationFactory = function InterpolationFactory(from, to, convertToString) {\n    return function(f) {\n        var interpolated = interpolate(from, to, f);\n        return (0,_antv_util__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(interpolated) ? interpolated : convertToString(interpolated);\n    };\n};\nfunction propertyInterpolation(property, left, right, target) {\n    var metadata = _antv_g_lite__WEBPACK_IMPORTED_MODULE_0__.propertyMetadataCache[property];\n    if (metadata && metadata.syntax && metadata[\"int\"]) {\n        var propertyHandler = _antv_g_lite__WEBPACK_IMPORTED_MODULE_0__.runtime.styleValueRegistry.getPropertySyntax(metadata.syntax);\n        if (propertyHandler) {\n            var parser = propertyHandler.parser;\n            var usedLeft = parser ? parser(left, target) : left;\n            var usedRight = parser ? parser(right, target) : right;\n            // merger [left, right, n2string()]\n            var interpolationArgs = propertyHandler.mixer(usedLeft, usedRight, target);\n            if (interpolationArgs) {\n                var interp = InterpolationFactory.apply(void 0, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_5___default()(interpolationArgs));\n                return function(t) {\n                    if (t === 0) return left;\n                    if (t === 1) return right;\n                    return interp(t);\n                };\n            }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return InterpolationFactory(false, true, function(bool) {\n        return bool ? right : left;\n    });\n}\n/**\n * interpolate with number, boolean, number[], boolean[]\n */ function interpolate(from, to, f) {\n    if (typeof from === \"number\" && typeof to === \"number\") {\n        return from * (1 - f) + to * f;\n    }\n    if (typeof from === \"boolean\" && typeof to === \"boolean\" || typeof from === \"string\" && typeof to === \"string\" // skip string, eg. path ['M', 10, 10]\n    ) {\n        return f < 0.5 ? from : to;\n    }\n    if (Array.isArray(from) && Array.isArray(to)) {\n        // interpolate arrays/matrix\n        var fromLength = from.length;\n        var toLength = to.length;\n        var length = Math.max(fromLength, toLength);\n        var r = [];\n        for(var i = 0; i < length; i++){\n            r.push(interpolate(from[i < fromLength ? i : fromLength - 1], to[i < toLength ? i : toLength - 1], f));\n        }\n        return r;\n    }\n    throw new Error(\"Mismatched interpolation arguments \".concat(from, \":\").concat(to));\n}\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming\n */ var AnimationEffectTiming = /*#__PURE__*/ function() {\n    function AnimationEffectTiming() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, AnimationEffectTiming);\n        /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/delay\n     */ this.delay = 0;\n        /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/direction\n     */ this.direction = \"normal\";\n        /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/duration\n     */ this.duration = \"auto\";\n        /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/easing\n     */ this._easing = \"linear\";\n        this.easingFunction = linear;\n        /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/endDelay\n     */ this.endDelay = 0;\n        /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/fill\n     */ this.fill = \"auto\";\n        /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/iterationStart\n     */ this.iterationStart = 0;\n        /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/iterations\n     */ this.iterations = 1;\n        this.currentIteration = null;\n        this.progress = null;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(AnimationEffectTiming, [\n        {\n            key: \"easing\",\n            get: function get() {\n                return this._easing;\n            },\n            set: function set(value) {\n                this.easingFunction = parseEasingFunction(value);\n                this._easing = value;\n            }\n        }\n    ]);\n}();\n/**\n * @example\n  {\n    translateY: [200, 300],\n    scale: [1, 10],\n  }\n\n * groups' length can be different, the following config should generate 3 frames:\n  @example\n  {\n    translateY: [200, 300, 400],\n    scale: [1, 10],\n  }\n */ function convertToArrayForm(effectInput) {\n    var normalizedEffectInput = [];\n    for(var property in effectInput){\n        // skip reserved props\n        if (property in [\n            \"easing\",\n            \"offset\",\n            \"composite\"\n        ]) {\n            continue;\n        }\n        // @ts-ignore\n        var values = effectInput[property];\n        if (!Array.isArray(values)) {\n            values = [\n                values\n            ];\n        }\n        var numKeyframes = values.length;\n        for(var i = 0; i < numKeyframes; i++){\n            if (!normalizedEffectInput[i]) {\n                var keyframe = {};\n                if (\"offset\" in effectInput) {\n                    keyframe.offset = Number(effectInput.offset);\n                }\n                if (\"easing\" in effectInput) {\n                    // @ts-ignore\n                    keyframe.easing = effectInput.easing;\n                }\n                if (\"composite\" in effectInput) {\n                    // @ts-ignore\n                    keyframe.composite = effectInput.composite;\n                }\n                normalizedEffectInput[i] = keyframe;\n            }\n            if (values[i] !== undefined && values[i] !== null) {\n                normalizedEffectInput[i][property] = values[i];\n            }\n        }\n    }\n    normalizedEffectInput.sort(function(a, b) {\n        return (a.computedOffset || 0) - (b.computedOffset || 0);\n    });\n    return normalizedEffectInput;\n}\nfunction normalizeKeyframes(effectInput, timing) {\n    if (effectInput === null) {\n        return [];\n    }\n    if (!Array.isArray(effectInput)) {\n        effectInput = convertToArrayForm(effectInput);\n    }\n    var keyframes = effectInput.map(function(originalKeyframe) {\n        var keyframe = {};\n        if (timing !== null && timing !== void 0 && timing.composite) {\n            // This will be auto if the composite operation specified on the effect is being used.\n            // @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Keyframe_Formats\n            keyframe.composite = \"auto\";\n        }\n        for(var member in originalKeyframe){\n            var memberValue = originalKeyframe[member];\n            if (member === \"offset\") {\n                if (memberValue !== null) {\n                    memberValue = Number(memberValue);\n                    if (!isFinite(memberValue)) throw new Error(\"Keyframe offsets must be numbers.\");\n                    if (memberValue < 0 || memberValue > 1) throw new Error(\"Keyframe offsets must be between 0 and 1.\");\n                    keyframe.computedOffset = memberValue;\n                }\n            } else if (member === \"composite\") {\n                // TODO: Support add & accumulate in KeyframeEffect.composite\n                // @see https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/composite\n                if ([\n                    \"replace\",\n                    \"add\",\n                    \"accumulate\",\n                    \"auto\"\n                ].indexOf(memberValue) === -1) {\n                    throw new Error(\"\".concat(memberValue, \" compositing is not supported\"));\n                }\n            } else ;\n            // assign to keyframe, no need to parse shorthand value\n            keyframe[member] = memberValue;\n        }\n        if (keyframe.offset === undefined) {\n            keyframe.offset = null;\n        }\n        if (keyframe.easing === undefined) {\n            // override with timing.easing\n            keyframe.easing = (timing === null || timing === void 0 ? void 0 : timing.easing) || \"linear\";\n        }\n        if (keyframe.composite === undefined) {\n            keyframe.composite = \"auto\";\n        }\n        return keyframe;\n    });\n    var everyFrameHasOffset = true;\n    var previousOffset = -Infinity;\n    for(var i = 0; i < keyframes.length; i++){\n        var offset = keyframes[i].offset;\n        if (!(0,_antv_util__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(offset)) {\n            if (offset < previousOffset) {\n                throw new TypeError(\"Keyframes are not loosely sorted by offset. Sort or specify offsets.\");\n            }\n            previousOffset = offset;\n        } else {\n            everyFrameHasOffset = false;\n        }\n    }\n    keyframes = keyframes.filter(function(keyframe) {\n        return Number(keyframe.offset) >= 0 && Number(keyframe.offset) <= 1;\n    });\n    function spaceKeyframes() {\n        var _keyframes$offset;\n        var _keyframes = keyframes, length = _keyframes.length;\n        keyframes[length - 1].computedOffset = Number((_keyframes$offset = keyframes[length - 1].offset) !== null && _keyframes$offset !== void 0 ? _keyframes$offset : 1);\n        if (length > 1) {\n            var _keyframes$0$offset;\n            keyframes[0].computedOffset = Number((_keyframes$0$offset = keyframes[0].offset) !== null && _keyframes$0$offset !== void 0 ? _keyframes$0$offset : 0);\n        }\n        var previousIndex = 0;\n        var previousOffset = Number(keyframes[0].computedOffset);\n        for(var _i = 1; _i < length; _i++){\n            var _offset = keyframes[_i].computedOffset;\n            if (!(0,_antv_util__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(_offset) && !(0,_antv_util__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(previousOffset)) {\n                for(var j = 1; j < _i - previousIndex; j++)keyframes[previousIndex + j].computedOffset = previousOffset + (Number(_offset) - previousOffset) * j / (_i - previousIndex);\n                previousIndex = _i;\n                previousOffset = Number(_offset);\n            }\n        }\n    }\n    if (!everyFrameHasOffset) spaceKeyframes();\n    return keyframes;\n}\nvar fills = \"backwards|forwards|both|none\".split(\"|\");\nvar directions = \"reverse|alternate|alternate-reverse\".split(\"|\");\nfunction makeTiming(timingInput, forGroup) {\n    var timing = new AnimationEffectTiming();\n    if (forGroup) {\n        timing.fill = \"both\";\n        timing.duration = \"auto\";\n    }\n    if (typeof timingInput === \"number\" && !isNaN(timingInput)) {\n        timing.duration = timingInput;\n    } else if (timingInput !== undefined) {\n        Object.keys(timingInput).forEach(function(property) {\n            if (timingInput[property] !== undefined && timingInput[property] !== null && timingInput[property] !== \"auto\") {\n                if (typeof timing[property] === \"number\" || property === \"duration\") {\n                    if (typeof timingInput[property] !== \"number\" || isNaN(timingInput[property])) {\n                        return;\n                    }\n                }\n                if (property === \"fill\" && fills.indexOf(timingInput[property]) === -1) {\n                    return;\n                }\n                if (property === \"direction\" && directions.indexOf(timingInput[property]) === -1) {\n                    return;\n                }\n                // @ts-ignore\n                timing[property] = timingInput[property];\n            }\n        });\n    }\n    return timing;\n}\nfunction normalizeTimingInput(timingInput, forGroup) {\n    timingInput = numericTimingToObject(timingInput !== null && timingInput !== void 0 ? timingInput : {\n        duration: \"auto\"\n    });\n    return makeTiming(timingInput, forGroup);\n}\nfunction numericTimingToObject(timingInput) {\n    if (typeof timingInput === \"number\") {\n        if (isNaN(timingInput)) {\n            timingInput = {\n                duration: \"auto\"\n            };\n        } else {\n            timingInput = {\n                duration: timingInput\n            };\n        }\n    }\n    return timingInput;\n}\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect\n * @example\n  const circleDownKeyframes = new KeyframeEffect(\n    circle, // element to animate\n    [\n      { transform: 'translateY(0)' }, // keyframe\n      { transform: 'translateY(100)' } // keyframe\n    ],\n    { duration: 3000, fill: 'forwards' } // keyframe options\n  );\n *\n */ var KeyframeEffect = /*#__PURE__*/ function() {\n    // pseudoElement: string | null;\n    function KeyframeEffect(target, effectInput, timingInput) {\n        var _this = this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, KeyframeEffect);\n        this.composite = \"replace\";\n        this.iterationComposite = \"replace\";\n        this.target = target;\n        this.timing = normalizeTimingInput(timingInput, false);\n        this.timing.effect = this;\n        this.timing.activeDuration = calculateActiveDuration(this.timing);\n        this.timing.endTime = Math.max(0, this.timing.delay + this.timing.activeDuration + this.timing.endDelay);\n        this.normalizedKeyframes = normalizeKeyframes(effectInput, this.timing);\n        this.interpolations = convertEffectInput(this.normalizedKeyframes, this.timing, this.target);\n        // 不支持 proxy 时降级成 this.timing\n        var Proxy = _antv_g_lite__WEBPACK_IMPORTED_MODULE_0__.runtime.globalThis.Proxy;\n        this.computedTiming = Proxy ? new Proxy(this.timing, {\n            get: function get(target, prop) {\n                if (prop === \"duration\") {\n                    return target.duration === \"auto\" ? 0 : target.duration;\n                }\n                if (prop === \"fill\") {\n                    return target.fill === \"auto\" ? \"none\" : target.fill;\n                }\n                if (prop === \"localTime\") {\n                    return _this.animation && _this.animation.currentTime || null;\n                }\n                if (prop === \"currentIteration\") {\n                    if (!_this.animation || _this.animation.playState !== \"running\") {\n                        return null;\n                    }\n                    return target.currentIteration || 0;\n                }\n                if (prop === \"progress\") {\n                    if (!_this.animation || _this.animation.playState !== \"running\") {\n                        return null;\n                    }\n                    return target.progress || 0;\n                }\n                return target[prop];\n            },\n            set: function set() {\n                return true;\n            }\n        }) : this.timing;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(KeyframeEffect, [\n        {\n            key: \"applyInterpolations\",\n            value: function applyInterpolations() {\n                this.interpolations(this.target, Number(this.timeFraction));\n            }\n        },\n        {\n            key: \"update\",\n            value: function update(localTime) {\n                if (localTime === null) {\n                    return false;\n                }\n                this.timeFraction = calculateIterationProgress(this.timing.activeDuration, localTime, this.timing);\n                return this.timeFraction !== null;\n            }\n        },\n        {\n            key: \"getKeyframes\",\n            value: function getKeyframes() {\n                return this.normalizedKeyframes;\n            }\n        },\n        {\n            key: \"setKeyframes\",\n            value: function setKeyframes(keyframes) {\n                this.normalizedKeyframes = normalizeKeyframes(keyframes);\n            }\n        },\n        {\n            key: \"getComputedTiming\",\n            value: function getComputedTiming() {\n                return this.computedTiming;\n            }\n        },\n        {\n            key: \"getTiming\",\n            value: function getTiming() {\n                return this.timing;\n            }\n        },\n        {\n            key: \"updateTiming\",\n            value: function updateTiming(timing) {\n                var _this2 = this;\n                Object.keys(timing || {}).forEach(function(name) {\n                    _this2.timing[name] = timing[name];\n                });\n            }\n        }\n    ]);\n}();\nfunction compareAnimations(leftAnimation, rightAnimation) {\n    return Number(leftAnimation.id) - Number(rightAnimation.id);\n}\n/**\n * @see https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/web-animations-js/index.d.ts\n */ var AnimationTimeline = /*#__PURE__*/ function() {\n    function AnimationTimeline(document) {\n        var _this = this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, AnimationTimeline);\n        /**\n     * all active animations\n     */ this.animations = [];\n        this.ticking = false;\n        this.timelineTicking = false;\n        this.hasRestartedThisFrame = false;\n        this.animationsWithPromises = [];\n        this.inTick = false;\n        this.pendingEffects = [];\n        this.currentTime = null;\n        this.rafId = 0;\n        this.rafCallbacks = [];\n        this.webAnimationsNextTick = function(t) {\n            _this.currentTime = t;\n            _this.discardAnimations();\n            if (_this.animations.length === 0) {\n                _this.timelineTicking = false;\n            } else {\n                _this.requestAnimationFrame(_this.webAnimationsNextTick);\n            }\n        };\n        this.processRafCallbacks = function(t) {\n            var processing = _this.rafCallbacks;\n            _this.rafCallbacks = [];\n            if (t < Number(_this.currentTime)) t = Number(_this.currentTime);\n            _this.animations.sort(compareAnimations);\n            _this.animations = _this.tick(t, true, _this.animations)[0];\n            processing.forEach(function(entry) {\n                entry[1](t);\n            });\n            _this.applyPendingEffects();\n        };\n        this.document = document;\n    }\n    return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(AnimationTimeline, [\n        {\n            key: \"getAnimations\",\n            value: function getAnimations() {\n                this.discardAnimations();\n                return this.animations.slice();\n            }\n        },\n        {\n            key: \"isTicking\",\n            value: function isTicking() {\n                return this.inTick;\n            }\n        },\n        {\n            key: \"play\",\n            value: function play(target, keyframes, options) {\n                var effect = new KeyframeEffect(target, keyframes, options);\n                var animation = new Animation(effect, this);\n                this.animations.push(animation);\n                this.restartWebAnimationsNextTick();\n                animation.updatePromises();\n                animation.play();\n                animation.updatePromises();\n                return animation;\n            }\n        },\n        {\n            key: \"applyDirtiedAnimation\",\n            value: function applyDirtiedAnimation(animation) {\n                var _this2 = this;\n                if (this.inTick) {\n                    return;\n                }\n                // update active animations in displayobject\n                animation.markTarget();\n                var animations = animation.targetAnimations();\n                animations.sort(compareAnimations);\n                // clear inactive animations\n                var inactiveAnimations = this.tick(Number(this.currentTime), false, animations.slice())[1];\n                inactiveAnimations.forEach(function(animation) {\n                    var index = _this2.animations.indexOf(animation);\n                    if (index !== -1) {\n                        _this2.animations.splice(index, 1);\n                    }\n                });\n                this.applyPendingEffects();\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                if (!this.ticking) {\n                    this.ticking = true;\n                    this.requestAnimationFrame(function() {});\n                    this.hasRestartedThisFrame = true;\n                }\n                return this.hasRestartedThisFrame;\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function destroy() {\n                this.document.defaultView.cancelAnimationFrame(this.frameId);\n            }\n        },\n        {\n            key: \"applyPendingEffects\",\n            value: function applyPendingEffects() {\n                this.pendingEffects.forEach(function(effect) {\n                    effect === null || effect === void 0 || effect.applyInterpolations();\n                });\n                this.pendingEffects = [];\n            }\n        },\n        {\n            key: \"updateAnimationsPromises\",\n            value: function updateAnimationsPromises() {\n                this.animationsWithPromises = this.animationsWithPromises.filter(function(animation) {\n                    return animation.updatePromises();\n                });\n            }\n        },\n        {\n            key: \"discardAnimations\",\n            value: function discardAnimations() {\n                this.updateAnimationsPromises();\n                this.animations = this.animations.filter(function(animation) {\n                    return animation.playState !== \"finished\" && animation.playState !== \"idle\";\n                });\n            }\n        },\n        {\n            key: \"restartWebAnimationsNextTick\",\n            value: function restartWebAnimationsNextTick() {\n                if (!this.timelineTicking) {\n                    this.timelineTicking = true;\n                    this.requestAnimationFrame(this.webAnimationsNextTick);\n                }\n            }\n        },\n        {\n            key: \"rAF\",\n            value: function rAF(f) {\n                var id = this.rafId++;\n                if (this.rafCallbacks.length === 0) {\n                    this.frameId = this.document.defaultView.requestAnimationFrame(this.processRafCallbacks);\n                }\n                this.rafCallbacks.push([\n                    id,\n                    f\n                ]);\n                return id;\n            }\n        },\n        {\n            key: \"requestAnimationFrame\",\n            value: function requestAnimationFrame(f) {\n                var _this3 = this;\n                return this.rAF(function(x) {\n                    _this3.updateAnimationsPromises();\n                    f(x);\n                    _this3.updateAnimationsPromises();\n                });\n            }\n        },\n        {\n            key: \"tick\",\n            value: function tick(t, isAnimationFrame, updatingAnimations) {\n                var _this4 = this, _this$pendingEffects, _this$pendingEffects2;\n                this.inTick = true;\n                this.hasRestartedThisFrame = false;\n                this.currentTime = t;\n                this.ticking = false;\n                var newPendingClears = [];\n                var newPendingEffects = [];\n                var activeAnimations = [];\n                var inactiveAnimations = [];\n                updatingAnimations.forEach(function(animation) {\n                    animation.tick(t, isAnimationFrame);\n                    if (!animation._inEffect) {\n                        newPendingClears.push(animation.effect);\n                        animation.unmarkTarget();\n                    } else {\n                        newPendingEffects.push(animation.effect);\n                        animation.markTarget();\n                    }\n                    if (animation._needsTick) _this4.ticking = true;\n                    var alive = animation._inEffect || animation._needsTick;\n                    animation._inTimeline = alive;\n                    if (alive) {\n                        activeAnimations.push(animation);\n                    } else {\n                        inactiveAnimations.push(animation);\n                    }\n                });\n                (_this$pendingEffects = this.pendingEffects).push.apply(_this$pendingEffects, newPendingClears);\n                (_this$pendingEffects2 = this.pendingEffects).push.apply(_this$pendingEffects2, newPendingEffects);\n                if (this.ticking) this.requestAnimationFrame(function() {});\n                this.inTick = false;\n                return [\n                    activeAnimations,\n                    inactiveAnimations\n                ];\n            }\n        }\n    ]);\n}();\n_antv_g_lite__WEBPACK_IMPORTED_MODULE_0__.runtime.EasingFunction = parseEasingFunction;\n_antv_g_lite__WEBPACK_IMPORTED_MODULE_0__.runtime.AnimationTimeline = AnimationTimeline;\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@antv+g-web-animations-api@2.1.21/node_modules/@antv/g-web-animations-api/dist/index.esm.js\n");

/***/ })

};
;